<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[这是我最后一次追选秀]]></title>
    <url>%2F202007%2F%E8%BF%99%E6%98%AF%E6%88%91%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E8%BF%BD%E7%B4%A0%E4%BA%BA%E9%80%89%E7%A7%80%2F</url>
    <content type="text"><![CDATA[世 界 名 画 《创造营2020》结束了。昨晚的直播宣布张艺凡是第七名的时候我整个人都懵了，后面的直播完全看不下去。 其实每一次的选秀都会有资本调换的情况，但这次不一样的是，七个好妹妹原本有希望一起成长为实力与颜值兼具的中国最强女团，但是张艺凡毁掉了这一切。之前国内的选秀很少有人想要做团粉，但是今年几个妹妹之间的关系就很好，颜和实力也都在，鹅的资源又那么多，多少人想要真情实感地追团。 昨晚三四点钟才睡着觉。 追了两个多月，这个综艺也让我思考了很多。下面零散地记录一些吧。 今晚看到了徐艺洋发的文，突然又感觉这些东西没那么重要了，前面写的都删掉了。 我还真的挺相信，在龙韬娱乐的徐艺洋会比时代峰峻的张艺凡发展的好很多倍。我可能也会作为一个路人粉去支持一下徐。德不配位的人必然会受到反噬的。 尽管努力了十一年依然没法成功出道，尽管是全能ACE镜头依然被剪没，尽管被安排了一个自闭剧本吸引火力，但是希望永远存在。如果努力不够就更努力一些，如果目标实在太过遥远就暂时换个目标。没有一步路是白走的，最后你所有的努力都会在身上熠熠生辉。 以NeNe在节目里对偶像和粉丝的定义来做结尾吧。 爱，不是这样累。 爱，够了。]]></content>
      <categories>
        <category>参省乎己</category>
      </categories>
      <tags>
        <tag>娱乐</tag>
        <tag>选秀</tag>
        <tag>粉圈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《苏东坡传》摘录]]></title>
    <url>%2F202005%2F%E3%80%8A%E8%8B%8F%E4%B8%9C%E5%9D%A1%E4%BC%A0%E3%80%8B%E6%91%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[今年五月份读完的这本书，暑假开始的时候决定把读书笔记和读后感整理放在博客上。关于《苏东坡传》的文章一共有两篇，这是第一篇，内容为读书时的摘录。第二篇如下： 人生到处知何似， 应似飞鸿踏雪泥， 泥上偶然留指爪， 鸿飞那复计东西。 拿西洋作家为例，李白可以媲美雪莱或拜伦，是一个燃烧自己展现出瞬间壮景的文学彗星。杜甫就象米尔顿，是一个热心的哲学家和老好人，以贴切、渊博的古典比喻写出了丰富的作品。苏东坡永远年轻。他性格比较象萨克莱，政治和诗词的盛名则象雨果，同时又具有约翰生博士那份动人的本质。不知怎么约翰生博士的痛风病直到今天还叫我们感动，米尔顿的瞎眼却不尽然。如果约翰生同时又兼有甘斯伯劳的特色，而且象波普用诗词批评政治，又象史维夫特吃过那么多苦而没有史维夫特的尖酸味儿，我们就能找出一个英国的类比了。苏东坡的道精神由于遭受许多困难而更醇美，却没有变酸。今天我们爱他，只因为他吃苦吃得太多了。 苏东坡在面对痛苦时展现出了超常的淡然，他像是一个已经预知了自己一生的人。我最爱他的地方是他面对所有事情的坦诚。 今年五月份读完的这本书，暑假开始的时候决定把读书笔记和读后感整理放在博客上。关于《苏东坡传》的文章一共有两篇，这是第一篇，内容为读书时的摘录。第二篇如下： 我们可以检视一幕幕已经终了的情节，眼见许多事情因外在事变和内在性格的必然性而自然发展。 王安石热衷社会改革，自然觉得任何手段都没有错，甚至不惜清除异己。神圣的目标向来是最危险的。一旦目标神圣化，实行的手段必然日渐卑鄙。这种发展趋势逃不过苏东坡敏锐的心灵，甚至有点违背他的幽默感。他的行径和王安石不合；彼此的冲突决定了他一生的经历，也决定了宋朝的命运。 “文章如精金美玉”，苏东坡写信给谢民师说，“市有定价，非人所能以口舌贵贱也”。 构成永恒特质的“真诚性”究竟是什么呢？苏东坡清清楚楚表达了他对写作和文体的意见。“大略如行云流水。初无定质。但常行于所当行，常止于不可不止。文理自然，姿态横生。孔子曰，言之不文，行之不远。又曰，词达而已矣，夫言止于达意，则疑若不文，是大不然。求物之妙，如系风捕影，能使是物了然于心者，盖千万人而不一遇也。而况能使了然于口与手乎。是之谓词达。词至于能达，则文不可胜用矣。杨雄好为艰深之词。以文浅易之说，若正言之，则人人知之矣。此正所谓雕虫篆刻者。”苏东坡为文体下定义，正好贴切地描述了他自己写文章的过程，动笔收笔都象“行云流水”，揭露出文章和修辞的一切奥秘。什么时候进行，什么时候结束都没有一定的规矩。如果作家的思绪很美，只要他能忠实、诚恳、妥当表达，魅力和美感自然存在。这些不是硬放人作品的东西，词达而造成的单纯、自然和某一种自由感正是好文章的秘诀。这些特质具备了，文体不虚浮空洞，就可以写出真诚的文学作品。 “生平最快乐的时刻”，有一天苏东坡对他的朋友说，“就是写作时笔端能表达一切思想的脉络。我自忖道‘人间自乐莫过于此’”。 他曾一度坚称，给人快慰的力量便是文学本身的报酬。 当时有一位作家说，文士不怕刑罚，不爱晋升，也不贪生怕死，只怕欧阳修的意见。欧阳修对一位同事说，“读苏东坡的信，我全身喜极流汗。我应当退隐，使这个青年出人头地。”想想这句话对苏东坡有多大的影响! 日月何促促， 尘世苦局束。 我简直想说，苏东坡的精神代表“火”，他一生和水灾、旱灾奋斗，每到一地就忙着修建供水系统、水运系统和水井。火的象征很恰当，因为他活力充沛；换句话说，他的脾气和一生都象烈焰，到处给人生机和温暖，也一路烧毁了某些东西。 我没有懂作者这里说的烧毁的是什么东西 人生到处知何似， 应似飞鸿踏雪泥， 泥上偶然留指爪， 鸿飞那复计东西。 这是东坡的佳作之一，飞鸿象征人类的精神。事实上这本书所写的苏东坡生来事略只是一个伟大心灵偶尔留下的足迹，真正的苏东坡是一个幻鸟般的灵魂，说不定今天还在星宿间梦游呢。 她要他当心那些表现太露骨的泛泛之交，以及他根据“世间无恶人”理论而交上的朋友。他的麻烦就出在这儿；他无法看出别人的错处。他太太对他说：“当心那些朋友。太快建立的友情不会长久的。”东坡承认，她的话总是应验，我想她这方面的智慧是来自中国“君子之交淡如水”的古训——没有令人兴奋的味道，却永远不会生厌。诚挚的友情从来不表现太多。真正的好友不常写信，因为全心信任彼此的友谊，根本不必写。分别几年又重逢，友情依然如故。 坑上架着一个小木板桥，百英尺下有激流飞过，四周是直立的峡谷。章惇自己很勇敢，对苏轼一鞠躬，他走过木板桥，在对面峭壁上留几个字。苏东坡拒绝了，章惇独自过桥，泰然自若。他拢拢长袍，抓住一根吊索，沿峭壁到溪流对岸写了六个字：“苏轼章惇来游”。然后若无其事走回来。苏东坡拍拍朋友的背说，“有一天你会杀人。” “为什么？”章惇问道。 苏东坡答道，“能将自己性命玩弄于股掌之上，也就能杀人。”苏东坡的预言到底对不对，我们以后就知道了。 这不是中国第一次试行国家资本主义，却是最后的一次。在中国四千年的历史中，曾四度试行极权主义、国家资本主义、社会主义，以及剧烈的社会革命，每一次都惨败而终。最成功的是法家商鞍的右派极权主义，他的理论由兴建长城的秦始皇（公元前三世纪）有效推行。早期法家理论最重要的两大原则就是教战与重农。两者其实是同一回事，因为商鞍相信农夫是最好的军人，所有中产阶级的商人和贸易家都该尽量受到压制。大家都知道，根据这一教条而建立发展的强大军事系统使秦国统一了全中国；但是此一政治理论刚遍行全国，不到几年就完全崩溃。 王安石的怪习惯是不是伪装，我们无法断定；不过一个人的行为如果太过份，大家难免怀疑他有自我宣传的意味。 王安石说，他宁愿谈谈尧舜的贤臣。“在上等人才眼中，诸葛亮根本不值得一提。” 诸葛亮的政治天才在于一步步走向既定的目标，这位急功自信的财政鬼才觉得很不对胃口。 好官知道这些贷款对人民不利，确定他们付不出本利会下狱坐牢。他们遵守政府的明文规定，宣布贷款完全出于“自愿”，心中打算有一天会因“阻碍新政”而丢官。 王安石认为，控制文人的思想更属必要。他和古代的王莽，近代的希特勒一样，具有“一个国家、一个信仰、一个领袖”的信念〔他像希特勒，遭到反对就大发雷霆；现代精神病学家可以把他列为妄想狂。 无论古今中外，人民爱不爱某一政权唯有等这个专制政府失势才能判断。 郑侠终日站在宫门边，看到成群难民由东北逃来，挤满京师的街道。郑侠知道图画比言辞更有力，就把这些可怜的农民画下来，献给皇上。有一张画描写难民饥寒交迫，在大风雨中流浪。另一张描写半裸的男女正在吃草根树皮，还有人拴着铁链搬砖负柴来缴税。皇帝看到这些图画，不禁掉下泪来，精采的献图——我们以后会谈到——加上一颗彗星出现。圣山发生土崩，皇帝终于废除了许多“新法”。 司马光学问和品德都冠绝当代，从头到尾为原则而争。他和王安石代表相反的政策立场。 过了两个月老相富弼辞职，临行警告说，治斗争总是好人输，奸小一定会爬到高位。因为好人争原则，坏人争权利，最后双方都各得其所，好人去职，坏人留下来。他预言这样下去国家不久就会陷入纷乱。 苏东坡的九千字“上皇帝书”非常重要，可以代表他的政治哲学，也显出他个人的脾气和文风，充满机智、学问和大无畏的勇气。义愤的争论夹着冷静、简明的推理。有时候沮丧、严苛、挑剔、直爽无比；有时候却徐徐辩论，引经（孔孟）据典，引史例来支持他的理论。内容巧妙、诚挚、有力，对世事满怀激动和悲哀。 苏东坡认为，好政府要靠异议的健全作用来维持。民主就根据各党异议的原则而存在。我相信苏东坡若生在现代，一定反对联合国安理会的否决权，认为不民主。他知道盘古开天以来，没有两个人看法完全一样，除了民主就是专制。我从来没有发现一个反对民主的人在家、在国、在世界政局上不是暴君。 若使言无不同，意无不合，更唱迭和，何者非贤。 孔子曾说，人应该“驱郑声，远佞人”。有一天王安石和惠卿谈话，他弟弟安国在外面吹笛子。宰相对弟弟大叫说，“你能不能驱郑声？”他弟弟回答说，“你能不能远佞人？” 两兄弟政治观点始终相同，立场也一致，但是性格却完全不一样。子由性安稳，实事求是，保守，不爱多说话；东坡性豪放，开朗，多嘴多舌，天真而不计一切后果。朋友同伴都觉得子由很可靠，东坡开朗的天才，他的嘲弄和恶作剧却常常使人害怕。 苏东坡最大的缺点就是喜欢在宾客面前或者作品中坦白说出他的想法，十分不利。子由十分了解他的哥哥。子由把手放在他的嘴上，叫他从此沉默些，后来东坡出狱，子由也曾做过同样的暗示。 风中飞蓬正是苏东坡一生最好的象征，从此他就成为政治风暴中的海燕，直到老死从未在一个地方住过三年以上。 这里是他的第二故乡，不只因为此地有美丽的山丘、森林、湖泊、大海、热闹的市街和壮观的寺庙，也因为当地人民都很喜欢他，他度过了这一生中最幸福的日子。居民有南方人快乐的天性，有诗歌有美人，他们敬爱这位年轻的名诗人，欣赏他冲动、热情和无忧无虑的个性。美景启发了他的灵感，此外柔婉的魅力更抚慰了他的心灵。杭州赢得他的青睐，他也赢得杭州人民的爱戴。他担任杭州通判（助理官员），没有机会为人民多尽力，但是诗人的身份已经足够了；他被捕的时候，杭州人纷纷在街上设龛拜祭，替他解灾。他走了以后，南国的美景和温情一直令他魂牵梦系。他知道他会回来，十八年后他再度回来当太守，对本城建树极多，在杭州人心目中留下了不朽的回忆，大家都说他是杭州人。在他死后千年的今天。你走上西湖，登上孤山岛或凤山，或者在湖滨的一家饭店喝茶，你会听到杭州本籍的店主一再提到“苏东坡——苏东坡。”你若点明东坡是四川人，他可不高兴。咦，他认为苏东坡生在那儿，除了京师从来没到过别的地方哩! 苏东坡几乎相信他前生曾住在这儿。他自己的诗词和同代人的杂记都有记载。有一天他拜访寿星院，一进大门就觉得景物很熟悉。他告诉同伴，他知道有九十二级石阶通向忏堂。结果完全正确。他还向同伴描述后殿的建筑、庭院和木石。我们不必相信这些转生的故事，不过社会若相信神鬼和轮回，总有很多这一类的说法，就象鬼故事，没有人能证明是真是假。 游这些山往往要一整天，他常在傍晚回来，街灯都亮了。穿过灯火通明、人潮汹涌的小河塘夜市，他往往半醉才回家，想起一些诗句然后又忘掉一些： 睡眼忽惊矍， 繁灯闹河塘。 市人拍手笑， 状如失林莺。 始悟山野姿， 异趣难自强。 人生安为笑， 吾策殊未良。 这些家船都精雕细琢，船头有笕嘴。湖上还有其它船只专卖食品给游客。有人卖栗子、瓜子、莲藕、甜食、炸鸡和海鲜。有人专供茶水。有些船上载着艺人，照例贴近游客的小船，为大家表演歌唱、杂耍，并供应吊索和其他射猎的游戏。他们身边就是澄蓝的湖水，周长十英里左右。远处白云栖在山顶上，山峰若隐若现。云霞使山峰千变万化，多采多姿，山峰给云霞一个栖息的所在。有时候天冷欲雪，雾气盖满山脚。隔着雾气，游人可以看见零零落落的的亭台楼阁，瞥见远山模糊的棱线。睛天湖水清爽极了，水中鱼儿历历可数，苏东坡曾以两行愉快的诗句描写船夫的黄头巾与青山的背景相映照，画面十分动人： 映山黄帽螭头舫， 夹道青烟鹊尾炉。 他常常借一张和尚的躺椅，搬到附近竹林中；完全卸下官吏的尊严，脱下衣衫，赤身露体睡午觉。小和尚用敬畏的眼光偷看这位大学者，看到了别人无权一窥的场向。他看见——也许是自以为看见——苏东坡背上有七粒黑痣，排列的方位很象北斗七星。老和尚说，可见他是天廷派下来的神灵，暂时在人间作客而已 苏东坡眼中感官的生活和灵性的生活是同一回事，以诗意哲学化的人生观看来并没有什么冲突。有了诗，他热爱今生，不可能变成禁欲的和尚。有了哲学，他十分明智，也不会沉沦在“魔鬼”手中。他不会弃绝青山绿水，也不会弃绝美人、诗歌和酒肉。但是他有深度，不可能披上纨绔子弟肤浅、愤世嫉俗的外衣。 苏东坡身为通判，有一次曾裁决一件与和尚有关的案子。灵隐寺有一位和尚名叫了然，常到红灯区走动，爱上一个名叫秀奴的少女。后来他床头金尽，衣衫槛楼，秀奴就不肯见他了。有一天晚上他喝醉酒又去找那个女孩，吃了闭门羹，就强闯进去，将她打死。于是他被控杀人。官吏审问他，发现他臂上刺了两行诗：“但愿生同极乐国，免教今世苦相思。”调查完毕，证物送到苏东坡手中。苏东坡忍不住写下这一首词： 这个秃奴，修行忒煞，云山顶上空持戒。只因迷恋玉楼人，鹑衣百结浑无奈。 毒手伤心，花容粉碎，色空空色今安在，臂间刺道苦相思，这回还了相思债。 和尚被送到刑场处决。 苏太太聪明贤慧，不想用错方法，把丈夫逼到妓女怀中。此外她知道她丈夫是一个妻子或皇帝都无法阻挡的人，她采取明智的作风——充分信任他。 苏东坡个性复杂多变，很难了解。他是大哲学家，不可能变成清教徒，但他又是儒家子弟，不可能变成酒鬼。他了解生命，珍惜生命，不会把时光完全浪费在醇酒美人身上。他是自然诗人，怀有特殊健全的神秘人生观，往往和自然的了解密切融合。我相信任何一个人和自然、四季、雨、雪、山、谷那么接近，接受它的治疗，一定不会心思闭塞，具有封闭的人生观。 这是苏东坡最沮丧的时期，说也奇怪，诗人最悲哀的时候却写出了最好的作品。照中国的标准，他在这段期间达到诗词的成熟期。愤怒与尖酸都过去了，只留下满心安详与去意。 韩琦和欧阳修已逝。富弼和范镇辞官归隐。司马光潜心著作。张方平沉迷酒杯，东坡的弟弟明哲保身，一句话也不说。东坡不够圆滑。一个人亲眼看到百性受苦，这只是该不该忘掉一切后果表达心中感慨的问题。也许他从来没有考虑过。 现在苏东坡很受欢迎，不仅因为他对抗洪水成功，也因为他亲身关切狱囚的健康和利益，当时很少太守这么做。他亲自去看犯人，第一次派狱医照顾病患。苏东坡指出，法律虽禁止地方官鞭死囚犯，对囚犯病死或失于照顾而死，却没有明文规定。囚犯也是百姓。他遂赢得囚犯亲友的感激。 每一个人都是平等的。 套一句苏东坡自己的话，他始终如蝇在食，吐之乃已，到目前为止还平安无事。但是他“吐”一百次，终于被捉了。 苏东坡笑着对他们说了一个故事： 真宗时代，皇帝四处探访隐居的大学者，有人推荐杨朴。杨朴不愿入京，却被押到朝中见皇帝。 “听说你会写诗”皇帝说。 “不，我不会。”杨朴想掩饰自己的才华，不愿从政。 “朋友们送你出来，有没有人写诗给你？”皇帝又问。 “没有，”杨朴说，“只有臣妻写了一首。” “请问诗中写什么？”陛下问他。 于是杨朴把妻子送行的诗念给皇帝听。全诗如下： 更休落魄贪酒杯， 且莫猖狂爱咏诗。 今日捉将官里去， 这回断送老头皮。 苏太太听到这个故事，热泪盈眶，却忍不住笑出来。这个故事出现在东坡的笔记中，不知道是不是他临时杜撰的。 幽默 外在的工作与责任隐藏了一个人的本性。去掉这些时势和传统的陷阱，真我就出现了。苏东坡回到百姓群中，有如水里的海豹；在陆地上摇鳍摆尾的海豹只是半只海豹而已。 解放的生活使他的心灵产生蜕变，又反映到作品中。刻薄的讽刺、尖锐的笔锋、一切激情与愤怒都过去了，代之而起的是光辉、温暖、亲切、宽容的幽默感，绝对醇美，完全成熟。哲学的价值就是教人笑自己。就我所知，动物只有猩猩会笑，但是我相信只有人才会笑自己。不知道这能不能称为神祗的笑容。希腊诸神充满人性的错误和缺点，他们一定常常有机会自嘲一番；但是基督教的上帝或天使太完美了，不可能这样做。把这种自嘲的特色称为堕落人类独一的美德，该算是一大恭维吧。 任何情况下，幸福都是一种秘密。但是研究苏东坡的作品，就不难探出他幸福的奥秘了。 这位慷慨的天才对世人的贡献远超过他从世上收取的一切，他到处捕捉诗意的片刻，化为永恒，使我们大家都充实不少。 归去来兮，吾归何处……人生底事，来往如梭，待闲看秋风，洛水清波，好在堂前细柳，应念我莫剪柔柯。仍传语江南父老，时与晒鱼蓑。 到了南京，苏东坡去看王安石，后者现在已是疲惫的病老头了。他们一起谈诗论佛。双方都是大诗人，佛家弟子，有不少话可说。传说有一次两人比诗，同韵同题，苏东坡赢了。王安石中途放弃。谈话中苏东坡不免责备王安石招来战祸，迫害学者。 事实上，奢华的日子和简朴的日子在幸福方面倒没有什么差别。只有不配作高官的人才羡慕高官的荣宠。通常不想作官的人为当局一心争取，想作官的人却又不够资格。一旦“官愿”满足了，做大官的乐趣不见得胜过成功的铁匠。 乐事可慕，苦事可畏，皆是未至时心尔。及苦乐既至，以身履之。求畏慕者初不可得况，既过之后复有何物。 当时的知识分子只有两条路可走，不是做官就是自甘淡泊——淡泊通常代表贫穷。当然人可以以潜心学术，得到永远的声名；但是对许多人来说，不朽的声名就算有把握，也只是空腹的自我安慰罢了。 这些年来苏东坡不断在策论中说，“独立思考”和“公正无私”是好大臣的重要条件。但是独立思考和意见公正却是党人最讨厌的。 诗、书、画最主要的材料就是两种液体：酒和墨；他们有上好美酒，上好名墨，还有最好的毛笔和最珍贵的纸张。 把中国书法当做一种抽象画，也许最能解释其中的特性。中国书法和抽象画的问题其实非常相似。判断中国书法的好坏，批评家完全不管文字的意思，只把它视为抽象的构图。它是抽象画，因为它并不描绘任何可辨的物体，与一般绘画不同。中国字是由线条所构成，线条组合千变万化，书法就是把这些字完美凑出来，而且要和同一行、同一页的其它字体相配合。中国字是由最复杂的成份所构成，不免呈现一切构图的问题，包括轴线、轮廓、组织、对比、平衡、比例等等，尤其注重整体的统一概念。 一切艺术的问题都是节奏的问题，无论绘画、雕刻或音乐都是一样。既然美感就是动感，每一种形式都有隐含的韵律。就连建筑方面亦然，哥德式的教堂仿佛在沉思。美学上甚至可以用“冲”、“扫”、“粗鲁”等人格的形容词，这些都是韵律的观念。 这种动作的韵律美观念改变了一切技术家对线条、质量、表面、构图和材料的看法。若属于力学而非静态的美，一切全是平衡的直线画，像工程师的蓝图一般，那就不值得考虑了。相反的艺术家必须寻找扭曲不平的树枝线条，只因为弯曲扭转才能显出生命和运动。这种不平均的线条我们很容易看出生命和动作，其中敏感的压力、休止和扫动以及树枝偶然的哗啦声都仔细保存下来。国画和书法可以说有一项基本原则，除非必要——譬如画书桌和茶几——千万别用均衡的线条。构图的概念也变了。中国艺术家绝不以静态的安排、线面的对比为满足，因为这些线面都是死的。画家因此强调活线条，这是国画技巧和其它绘画的一大差别。 为了培养活线条的基础，书法家便回头观察大自然。自然的线条总让人想起动作，变化永无止尽。善跑的灵堤猎犬结实光滑，自有一种美姿；而爱尔兰小诜多毛矮胖，又另是一番风味。我们可以欣赏小鹿的灵巧，同时又爱慕狮掌强大的肌力。小鹿身材优美，不仅因为轮廓匀称，也因为它让人想起跳跃的动作，狮掌优美则因为让人想起飞扑，就是这种飞扑和跳跃的功能使线条具有活生生的协调感。若追求这种韵律美，我们可以欣赏大象庞然的身躯，小蛇扭曲的张力，甚至长颈鹿枯瘦笨拙的动作。所以自然的韵律永远充满机能，只因为线条和轮廓都是生长过程的结果，具有一定的作用。借自然丰富的韵律，才能极度锻炼我们的鉴赏眼光。中国书法家挥笔时想模仿的就是这种自然的律动，也只有最敏感的画笔才能模摹出来。有些笔触稳定而圆熟，令人想起狮掌的威力；有些令人想起马足的肌力，节骨分明。有些想表现明快的清爽感，字体有肩、有腰、有支架，正如完美的女性，或者像中国批评家所说的“如美人鬓带鲜花”。有些想效法枯藤难摹的雅姿，末端形成温文安定的小卷，用几片细叶加以平衡。别忘枯藤的平衡最完美，因为末端弯曲的角度和形状要看藤蔓整个的重量——茎株的支持点和残叶在哪一边而定。 在八大山人的鱼鸟或石涛的兰花中也许更能看出印象派艺术的极端例证。无论画鱼画鸡画鸟，八大山人的画可以说是用最少线条、最少墨汁来表现最多的韵味。大艺术家只花几分钟，迅速泼墨完成一张鱼、马或人像图；不是成功就是失败，万一失败他就把纸条揉成一团，丢入字纸篓中，从头来起。 我前面已说过，在位党和反对党也没有明确的权责。多数党统治的机能并不存在。于是政治游戏便成为个人之间的斗争，比西方更剧烈。但是东西方的政治规则完全一样：爬到顶端的一定是庸才。 第一，好政客要会说一大堆话，却不透露任何消息。好官决不肯定什么，只用否定。只要学会“无可奉告”、“你说得对”等至理名言，好官就可以无往而不利。第二、他应该施惠于朋友。第三、他应该小心不得罪人。一个人如果不随便说话，爱用文雅、细柔、愉快的低语，又很喜欢施小惠给人家，他就算不位极人臣，也不会失势。他到死都有官做。 苏东坡逃避政治，政治却在追逐他。他和司马光政见不合——独立的心灵永远不会完全一致——但是他到京师半年，司马光就去世了。苏东坡陷入显赫遭忌的地位。 他维护意见不一的原则。信中指出，“若上之所可，不问其是非，下亦可之。上之所否，不问其曲直，下亦否之”，对国家并没有好处。君主和大臣应该互相提供意见，如果百官唯唯诺诺，就变成孔子所谓“足以丧邦”的跟屁虫了。 当时政府最大的间题——中国每一朝代都是如此——就是冗官充斥。文人太多，官位太少，在“学而优则仕”的中国社会成为经常存在的弊端。除非现在能改变此一观念，否则教育普及就能把国家拖垮。我们要如何提供四亿五千万知识分子的官位呢？如果公职制度严格遵行，用人惟才，则考中的人数自然有限，素质也会提高。但是苏东坡时代已盛行亲族主义。 事实上他已决心离开朝廷。他说君子如麟凤难求，小人“易进如蛆蝇，腥膻所聚，瞬息千万”。 “聚蚊成雷，积羽成舟，寡不胜众也”。 苏东坡对于这种零碎、没有组织的救病工作并不满意，他由政府基金拨出两千缗，自己又捐了五十两金子，在城中心众安桥建了一座公立医院。就我所知，这个“安乐坊”是中国最早的公立医院。三年内曾医过一千个病人，主管医院的道士由政府赠以紫袍和金钱。后来医院搬到湖边，改名“安济坊”，苏东坡离开后还继续看病。 太后死前十天，范纯仁和苏子由等六位大臣进去看她。 “我大概无法复原了，”太后说，“不能长期看着你们。你们要尽力侍候小皇帝。” 大臣即将告退，太后指名要范纯仁留下来。于是哲宗叫别人退开，只剩范纯仁和吕大防。 朝中传闻太后谋反，要立自己的儿子为帝，太后问道，“皇上年幼，神宗托老身治国。九年里你们可曾看我特别照顾高家？” “没有，”吕大防说，“太后未曾厚待娘家，一切以邦国为重。” “正是如此，”太后含泪说，“所以老身临死才见不到自己的儿子和女儿。”她并没有派儿子在京师做官。 “太后必能康复，”吕大防说，“请听医生的劝告。您现在不该说这些事情。” “不，”太后说，“今天当你们的面，我要对皇上说几句话。我知道我死后很多大臣会愚弄他。孙子，你该当心。”她转向吕大防和范纯仁说：“我觉得老身死后，你们还是辞官归隐吧，小皇帝会用新人。” 她问侍从宫中有没有请大臣吃饭，她对吕大防和范纯仁说：“现在去用餐吧。明年此日，请记得老身。” 一个王朝的悲剧在于皇后们有必要接连生出善良、聪明、能干的儿子、孙子和曾孙，皇室才能长保权位——这是生物学上人类从来没有听过的不保险假设。天才不生天才，迟早贤明的君主会生出邪恶、昏庸的后代。 中国历史上若有一个时期可以称得上残暴与混乱的时代，那就是蔡京手下的政府了。他替皇帝建设精美的乐园，在中国历史中写下最可怕的一页，因为皇家乐园也用不着国人付出那么多悲惨的代价呀。园中每一块异石，每一朵奇花都曾牺牲几条人命。读到徽宗和大臣们赞美这个花园、假山、清溪、异石的诗句，我们不禁脊骨发冷，感受到中国文学史上从未有过的悲剧。悲剧在于作者并不知道这些。 章惇劝皇帝挖司马光的坟墓，打烂棺材，鞭尸示众，以警告所有不忠的臣民。在小皇帝心目中，司马光变成元祐时代奸诈、不忠、邪恶的象征。上朝的时候大家都表示赞成，只有许将不说话。小皇帝打量他，退朝后叫他留下来。 他转念一想：“此间有什么歇不得处。由是心若挂钩之鱼忽得解脱。若人悟此，当恁么时也不妨熟歇。” 他又恢复了自然的本性。他在广州曾买了一些檀香，现在他常关门静坐，享受奇特的异香，反省自己以往的错误。有时午后小睡一回，凉爽的江风吹进窗口，房顶的鸟鸦打断他的幽梦，他突然觉得自己卸下一切责任。他看到大江的光影射入他房中。真美，他暗自说，美得像清空的明月。他不懂为什么有人喜欢云中的翳月。他觉得晴空是光明磊落的象征。 苏东坡写过一篇酒颂。就是不解杯中乐趣的人读到他描写半痴半醉的幸福状态也会为之入迷： “浊醪有妙理赋 酒勿嫌浊，人当取醇。失忧心于昨梦，信妙理之疑神……仔人之生，以酒为命。常因既醉之适，人识此心之正。稻米无知，岂解穷理。麴栗有毒，安能发性，乃知神物之自然，盖与天工而相并。得时行道，我则师齐相之饮醇。远害全身，我则学徐公之中圣。湛若秋露，穆如春风。疑宿云之解驳，漏朝日之暾红。初体栗之失去，旋眼花之扫空……兀尔坐忘，浩然天纵。如如不动而体无碍，了了常知而心不用。座中客满。惟忧百種之空。身后名轻，但觉一杯之重。今夫明月之珠，不可以襦，夜光之璧，不可以哺。刍肉饱我而不我觉，布帛袄我而不我娱。惟此君独游万物之表，盖天下不可一日而无。在醉常醒，孰是狂人之乐。得意忘味，始知至道之腴。” 她是虔诚的佛教徒，临死还念着《金刚经》的一道偈/jié/语： 一切有为法， 如梦幻泡影。 如露亦如电， 应作如是观。 根据她的遗嘱，苏东坡将她安葬在城西丰湖边的山脚上，靠近一座亭台和几间佛寺。墓后有山溪瀑布流入湖中。 玉骨那愁瘴雾，冰肌自有仙风。海仙时遣探花丛，倒挂绿毛么凤。 素面常嫌粉污，洗妆不退唇红。高情已逐晓云空，不与梨花同梦。 苏东坡自以为晚年可以定居惠州，没想到突然被贬到海外。新居落成两个月，移居海南岛的命令就来了。有人记载说，他写了两行诗描述他在春风中小睡，聆听屋后庙院钟声的情景。章惇读到这段诗，就说：“原来苏东坡那么惬意。”于是颁布了移居的命令。 但是他不屈的灵魂和人生观不容许他失去生活的乐趣：“尚有此身付与造物者，听其运转流行坎止无不可者。故人知之，免忧热。”他写信给一位朋友说。 “吾始至南海，环视天水无际，凄然伤之曰‘何时得出此岛也’。已而思之：天地在积水中，九洲在大浪海中，中国在少海中。有生孰不在岛者。譬如注水于地，小草浮其上，一蚁抱草叶求活，已而水干，遇他蚁而泣日‘不意尚能相见尔’。小蚁岂知瞬间竟得全哉？思及此事甚妙。与诸友人小饮后记之。” 苏东坡也许是倔强，也许是真的掌握了自己。至少他从未失去幽默感。 苏东坡曾经对他弟弟说：“我上可以陪玉皇大帝，下可陪卑田院乞儿。在我眼中天下没有一个不是好人。”现在他和默默无闻的穷学者、农夫农妇交往。他和这些纯朴小民谈话不必有戒心，自由自在，最能表现自己。家里一天没有客人他就不自在，别人不来他就出去拜访邻居。和黄州时期一样，他与高官、平民、学者、农夫杂处。聊天总是他发言；他天生爱说话。但是他也希望别人开口。他带着海南种的大犬“乌嘴”到处闲逛。他和村民坐在槟榔树下，想畅谈一番。无知的穷农夫能对他说什么呢？农夫对这位大学者敬畏万分，“我们不知道要谈什么。”苏东坡说：“那就谈鬼吧，说几个鬼故事来听听。”对方会说他们没听过什么好的鬼故事，他说：“没关系，就谈你们听过的好了。”后来苏过告诉朋友，他父亲如果一天没看到客人，就好像有什么不对劲似的。 小屋完成后的两年半期间，苏东坡过着无忧无虑却十分贫穷的生活。他有两位妙友，一个是替他转信的广州道士何德顺，另一位是四处游荡，送他食物、药物、米、泡菜、书本的小学者（吴复古）。 他写了不少有关药草的笔记，我要特别谈谈荨麻治风湿的办法，荨麻含有荨麻素和黄体素，像毒藤似的，碰到皮肤就会肿痛。照他的说法，把荨麻敷在风湿起始的肿痛关节上，全身各处的酸痛都会停止。他还热烈信仰苍耳。苍耳到处都有，对人无害，不管吃多久怎么吃都可以（含有脂肪，少量树胶、维他命C1和耳醣）。他写下苍耳白粉碾制的办法，把叶灰用温火烧二十四小时就成了。白粉吃下去据说可以美化皮肤，“满肌如玉’。有些笔记谈到蔓菁、芦菔和苦荠，苏东坡称为‘葛天氏之遗民”的美食，价值高，味道又好吃。 他请子由写序，在一封信中说：“然吾于渊明，岂独好其诗也哉。如其为人，实有感焉。”很多崇拜苏东坡的人也会这样说。 徽宗继位时，国家的命脉已经腐蚀削弱。有个性、有才华、有正义感的君子是文明社会的珍贵产物，需要长时间培养茁壮。司马光、欧阳修、范纯仁、吕公著的时代过去了，那一代的人已经分别下狱、流放、病死、老死或被杀。独立批评，勇敢思考写作的气氛已经僵化，整个政治生命都污染了。苏东坡师徒因言论而受罪，不愿意再入政坛，何况政风又对他们不利。皇帝一声命令，不可能马上有一群正直、博学、大无畏的学者出现朝中。己尝了八年权力滋味的大批政客更不可能放弃权位。 显然神宗皇后和她婆婆一样，善于感受国家的利益，她们具有单纯的女性本能，会判断好人坏人。批评家和历史家迷恋优美的文辞和抽象的特征，善于研究某一时期深奥的问题和政策，却忘记我们看人最后总逃不过“好”、“坏”这两个形容词。总括一个人的事迹和个性，“好人”就是最高的赞美。苏东坡服侍的太后们似乎从来不管政府领袖的问题和政策。当然章惇是一个坚强果断的人。惠卿是雄辩家。蔡京生气勃勃、精明能干。但太后一概把他们归类成坏人。 他本来想等福建大船，苦等不来，就随吴复古、苏过和爱犬（乌嘴）渡海，一行人到雷州去找秦观。吴复古又失去踪影。苏东坡和吴复古一生游遍全中国，不同的是苏东坡被别人的命令赶来赶去，吴复古却是自愿飘泊。追忆往事，苏东坡似乎恨不能和他的朋友交换际遇。那样一定快乐得多，也自由得多。 他在广州受到热诚的招待。他到海南岛第二年，有人传说他死了。有一位朋友在宴席上开玩笑说： “我以为你死了。” 苏东坡说：“不错，我死了，在地府半路上碰到章惇，我又决定折回来。” 大家庭有不少小孩和年轻的妇女，他们就乘船到南雄。没走多远，吴复古和一群和尚追上他们，陪老苏畅游了几天。然后吴复古突然病倒去世，一切都那么简单。苏东坡问他临终有什么交代。吴复古笑笑合上了眼睛。 苏东坡最初和最终的乐趣都是写作。他把自己在南方所写的诗文拿给钱世雄看，眼睛闪闪发光，似乎忘记了一切。有时候他还能写短简和题跋，其中包括一篇桂酒颂，他知道好友会仔细珍藏，就把这篇文章送给钱世雄。 苏东坡缓缓低语：“西天也许存在，不过设法到那儿也没有用。”钱世雄站在旁边，就对他说：“尤其这个时候，你一定要试试看。”苏东坡最后一句话是“试就不对了”。那就是他的道家哲学，解脱在于自然而不自觉的善行。 由尘世的标准来说，苏东坡的一生相当坎坷不幸。有一次孔子的门生问起两个为信念而饿死的古圣人。门生问孔子，伯夷叔齐死前有没有悔意。孔子说：“他们求仁而得仁，为什么要后悔呢？” 苏东坡今生的“浩然之气”己经用光。人生不过是性灵的生活，而性灵是控制人类事迹和个性的力量，与生俱来，只能靠生命和际遇和环境来表现。正如苏东坡的描写：“浩然之气不依形而立，不恃力而行，不待生而存，不随生而亡矣。故在天为星辰，在地为河岳，幽则为鬼神，而明则复为人。此理之常，无足怪者。” 读到苏东坡的生平，我们等于追察人类心智和性灵暂时显现在地球上的生命。苏东坡死了，他的名字只是一段回忆，但是他却为我们留下了他灵魂的欢欣和心智的乐趣，这些都是不可磨灭的宝藏。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>苏东坡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《祭亡妻程氏文》 苏洵]]></title>
    <url>%2F202002%2F%E7%A5%AD%E4%BA%A1%E5%A6%BB%E7%A8%8B%E6%B0%8F%E6%96%87%2F</url>
    <content type="text"><![CDATA[与子相好，相期百年。不知中道，弃我而先。 东坡刚考中准备做官的时候，他的母亲去世了，她临死还没有听到京师的好消息。《苏东坡传》中林语堂先生引了苏洵的《祭亡妻程氏文》的一段话：“我归旧庐，无不改移。魂兮未泯，不日来归。” 昨晚读到这里的时候有被触动。今天去找来了原文查词典把文章理顺了。 呜呼！与子相好，相期百年，不知中道，弃我而先。 我徂京师，不远当还；嗟子之去，曾不须臾。子去不返，我怀永哀。反复求思，意子复回。 人亦有言，死生短长，苟皆不欲，尔避谁当，我独悲子。 生逢百殃，有子六人，今谁在堂？唯轼与辙，仅存不亡。咻呴抚摩，既冠既昏，教以学问，畏其无闻。昼夜孜孜，孰知子勤？ 提携东去，出门迟迟。今往不捷，后何以归？二子告我，母氏劳苦，今不汲汲，奈后将悔。大寒酷热，崎岖在外。亦既荐名，试于南宫。文字炜炜，叹惊群公。二子喜跃，我知母心，非官实好，要以文称。 我今西归，有以藉口。故乡千里，期母寿考。归来空堂，哭不见人。伤心故物，感涕殷勤。 嗟予老矣，四海一身。自子之逝，内失良朋。孤居终日，有过谁箴？ 昔予少年，游荡不学，子虽不言，耿耿不乐。我知子心，忧我泯没，感叹折节，以至今日！ 呜呼死矣！不可再得。 安镇之乡，里名可龙，隶武阳县，在州北东。有蟠其丘，惟子之坟。凿为二室，期与子同。骨肉归土，魂无不之。我归旧庐，无不改移。魂兮未泯，不日来归。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《极简欧洲史》读书笔记]]></title>
    <url>%2F202002%2F%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[从2019年年底到2020年年初我一直在读的这本书——《极简欧洲史》，我应该不会向身边的人推荐这本书，因为这是一本比较枯燥的历史课本。唯一能让我对历史提起兴趣的描写性语言少之又少。在我读到大概三分之二的时候就想放弃，然而最后还是因为微职的读书小组坚持读下来了。这本书越往后节奏越快，到后面快要变成了流水账。不过通过这本书我也做了非常多的思考：像我这样对历史毫无兴趣的理科生还需不需要读历史？有没有更舒服的、更有趣地了解历史的方式？ 本书的内容原本是授课用的讲义，目的是让澳大利亚的大学生对欧洲历史有个初步的认识。但身为老师的我并不是从最前面开始，按部就班讲到最后。我的做法是先为学生很快地做个概论，再回头补充细节。——《极简欧洲史》引言 既然整本书都只是知识性的，那这本书的读书笔记应该是一份复习提纲。然而我并没有按照书的逻辑做摘录，而是仅仅把其中触动我的一些文字摘录了出来。现在回去看，这些摘录并不是关于“历史”的，而是关于“人”的。 在雅典，死刑通常都是立刻执行，这次却往后推迟了，因为宗教庆典的关系。苏格拉底大可趁机潜逃，说不定那些官员还暗自希望他逃之夭夭，但他却拒绝逃跑。他问：“既然我不能永远活着，那又何必苟且偷生？活着不是目的，好好活着才是。我曾在雅典的法治下过着很好的生活，如今我已准备好接受惩罚。”直到最后一刻，他还是充满了哲学思辨。直到他的镣铐被取下，他还在发表高论，说痛苦和享乐只是一线之隔。他被判处服毒芹汁自绝，必须在一日将尽时服下毒药，他的弟子求他晚点再喝，现在太阳还没下山呢！苏格拉底回复道，要是他这样偷生，自己看了都觉得荒谬，他平静地接过毒药一饮而尽，全无半点神伤，很快就药效发作而亡。 “他该受到什么报应，”鲁克丽丝说，“我交由你们决定。至于我，虽然失节非我之过，但我要接受自己的惩罚。失贞的女人应该得到什么报应，我绝不会首开避脱的先例。”话声甫落，她便从衣袍中掏出一把刀刺入心脏，应声倒下，就此香销玉殒。她的父亲和丈夫哀恸欲绝。两人只能呆立着无助地哭泣，但布鲁图斯拔出鲁克丽丝胸前染血的刀，举着它高喊：“我要对这位烈女的血发誓：在她被暴君蹧蹋之前，没有人比她更为贞洁，我也对上帝发誓，我要借助刀剑、烈火以及所有能让我更强大的东西，追捕骄傲者塔克文、邪恶的王后及其所有的子女，绝不让他们任何人再登上罗马的王座。” 拿破仑是启蒙运动之子，深信革命所揭橥的诸多原则，却不相信人民有权统治自己。自1789年之后，法国在这个志业上可说是节节落败，拿破仑的政见因此非常吸引人。他是独裁者中最有魅力的一个，他不准任何团体享有特权，所有国民一律得到平等对待，国家提供所有孩童受教育的机会，所有职务都要公开选才。他延揽各方人才进入政府，无论是保王派还是共和派，雅各宾恐怖政权的支持者还是反对者，完全不计较他们过去在革命中扮演的角色。他只交给他们一个使命：创立一个有理性、有秩序的政府体制。 你一定会喜欢这些平民百姓。他们很脏很臭，看来很不讨喜，因为他们一年到头无分寒暑地日夜操劳，形容憔悴、伤痕累累、营养不良、疾病缠身。那为什么你还会喜欢他们？因为他们的命运很容易追踪；百年复百年，他们做的都是同样的事，几乎所有的人都在耕种。 历史是枯燥的，但历史河流中的每个人都是鲜活的。我们可以通过面对死亡时平淡和毅然的苏格拉底去了解雅典的法庭；通过坚贞的鲁克莉丝了解罗马共和政体的开启；通过飒爽的拿破仑了解法国的革命。当我们从人的角度切入历史的时候，我们可以收获更多的共鸣。《中国的历史精神》里说“历史便即是人生”，因为历史确实是由无数的人生构成的。历史本身就是我们人生整个过往的经验。 当我发现人物对于历史的重要性之后，也明确了自己想要了解历史的一个更好的途径应该是人物传记。所以也从自己最喜欢的苏轼开始读《苏东坡传》，上一周的读书时间也比较开心，不仅仅是因为苏轼本身就是一个很有意思的人，林语堂的文风也比较轻松诙谐。苏轼身上的纯真相当感染人，也对我自己面对选择的态度有挺大的触动。希望这周能把《苏东坡传》读完吧。 以古为鉴，可知兴替；以人为鉴，可正德身。 ——唐太宗]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>极简欧洲史</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【2020.02.03 - 2020.02.09】 一周记录]]></title>
    <url>%2F202002%2F%E4%B8%80%E5%91%A8%E8%AE%B0%E5%BD%95week1%2F</url>
    <content type="text"><![CDATA[一周记录图片]]></content>
      <categories>
        <category>一周记录</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[（更新于2月13日）支持向量机算法（Support Vector Machine Alg）的介绍及数学推导]]></title>
    <url>%2F202002%2F%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%2F</url>
    <content type="text"><![CDATA[🌟上个学期周文安老师教我们专业的机器学习课程，在讲每一个算法的时候老师都会强调数学推导的重要性。 她希望大家能够不仅仅会调库，还能明白算法最底层的原理，并且能够自己推导。然而上学期我在数学推导这里一直在划水😖，没有理解透各种推导过程，所以趁着寒假在家里比较有时间，把机器学习部分算法的数学推导部分补全。 🌟SVM算法的证明用到了求解对偶问题的思想，石川老师在课上也说过这个算法的证明过程非常🕺“漂亮”🚶‍♂️。所以数学推导这一系列我决定从SVM开始。 在学期中我也有尝试手推过一次 SVM，但是并不是很理解，尤其是几何间隔、函数间隔和对偶问题等概念都没有理解，而这些概念对于推导过程都十分重要。现在的这篇文章将会展开得更详细。这是上学期的文章👉SVM优化对偶问题的详细推导过程 文章的大致思路是 SVM 的介绍、推导过程中的基本概念介绍、数学推导。我会把问题描述到最容易理解。参考资料主要有李航老师的《统计学习方法》、吴恩达老师的机器学习课程、python scikit learn的官方文档和上个学期的课件。 支持向量机介绍 支持向量机（support vector machines, SVM）是一种二分类模型。它的基本模型是定义在特征空间上的间隔最大的线性分类器，间隔最大使它有别于感知机，支持向量机还包括核技巧，这使它成为实质上的非线性分类器。（关于“间隔”、“核技巧”的介绍在下文中会讲） 支持向量机的应用 Support vector machines (SVMs) are a set of supervised learning methods used for classification, regression and outliers detection. 译：支持向量机是一种监督学习算法，可以用于分类问题、回归问题和异常点识别问题。 直观理解支持向量机 假设在一个二分类问题中，我们的样例中有四个正例和五个反例（其中正例由圆形表示，反例由叉表示），如 pic0 所示。 现在我们想通过一条直线将正例和反例区分开。显而易见，能够实现分类的有无数条直线，图中我们给出了三条分类直线：l1、l2、l3，如 pic1 所示。 然而，这三条直线的分类能力并不相同。假设我们再向训练样例中添加两个正样例（在 pic2 中用绿色的圆点表示），此时我们可以发现，直线 l1 和直线 l3 失去了完美的分类能力，因为它们没法将新加入的样例成功分类。 由此我们可以看出，l2 的分类能力比 l1 和 l3 的分类能力更强。而支持向量机算法就是去寻找所有直线中分类最强的那一条直线。在后面的推导过程中，我们也会证明：在这样的线性可分问题中，分类能力最强的直线（也就是“超平面”，后面会介绍）有且仅有一条。 支持向量机的优势和劣势了解 SVM 的优势能够帮助我们在合适的问题中选择合适的算法。 在看过后面算法的推导过程之后，会对支持向量机的优势和劣势有更深刻的了解。 支持向量机的优势 Effective in high dimensional spaces.在高维空间中比较容易使用。 Still effective in cases where number of dimensions is greater than the number of samples. 当样本特征数比样本数更多的时候，支持向量机仍然可以用。 Uses a subset of training points in the decision function (called support vectors), so it is also memory efficient.仅仅用到了训练集中的部分样例（即支持向量），所以会节省内存空间。 Versatile: different Kernel functions can be specified for the decision function. Common kernels are provided, but it is also possible to specify custom kernels.不同的核函数决定不同的决策函数。在python的scikit learn库中提供了普遍使用的核函数，当然我们也可以自定义核函数。 支持向量机的劣势 If the number of features is much greater than the number of samples, avoid over-fitting in choosing Kernel functions and regularization term is crucial.当样本特征数比样本数多的时候要注意防止过拟合，这个时候核函数的选择至关重要。 SVMs do not directly provide probability estimates, these are calculated using an expensive five-fold cross-validation (see Scores and probabilities, below).sklearn包并不直接提供概率评估，是通过代价很大的五折交叉运算来实现的。 支持向量机的分类 线性可分支持向量机（linear support vector machine in linearly separable case）通过硬间隔最大化（hard margin maximization）学习一个线性的分类器，又称为硬间隔支持向量机。 线性支持向量机（linear support vector machine）当训练数据近似可分时，通过软间隔最大化（soft margin maximization）形成线性不可分支持向量机，简称为线性支持向量机 非线性支持向量机（non-linear support vector machine）当训练数据集线性不可分时，通过使用核技巧以及软间隔最大化来学习非线性支持向量机。 相关定义和方法介绍L0, L1, L2范数直观地说， L0范数：$||x||_0 := \sum_{i = 1}^n x^0$ 即向量中所有非零元素的个数； L1范数：$||x||_1 := \sum_{i = 1}^n |x|$ 即向量中所有元素绝对值的和； L2范数：$||x||_2 := \sqrt{\sum_{i = 1}^n x^2}$ 即欧几里得（Euclidean）范数； 范数是一个函数，其赋予某个向量空间（或矩阵）中的每个向量以长度或大小。对于零向量，另其长度为零。直观的说，向量或矩阵的范数越大，则我们可以说这个向量或矩阵也就越大。有时范数有很多更为常见的叫法，如绝对值其实便是一维向量空间中实数或复数的范数，而Euclidean距离也是一种范数。 p范数（p-norm）的表达公式： ||x||_p := (\sum_{i = 1}^n x^p)^{\frac{1}{p}}函数间隔和几何间隔首先在这里补充超平面的概念，超平面即分离不同类样本的分界面，在二维空间中的超平面就是线。 我们回到最开始的二分类问题，如pic3所示。 假设我们用直线 $l_2$ 对样例进行划分，图中的横轴表示样例的第一个属性$x^{(1)}$ ，纵轴表示样例的第二个属性 $x^{(2)}$。图中的点 $m_1(x_1^{(1)}, x_1^{(2)})$ 和 $m_2(x_2^{(1)}, x_2^{(2)})$ 都被划分为正类。一般来说，一个点距离超平面的远近可以表示分类预测确信程度，距离超平面越远的点确信程度越高，这个从直观上也比较容易理解。 假设图中 $l_2$ 的方程确定为 $w_1x^{(1)} + w_2x^{(2)} + b = 0$ ，通过点到直线的距离公式$d = \frac{|w_1x^{(1)} + w_2x^{(2)} + b|}{\sqrt{w_1^2 + w_2^2}}$ 我们可以求得 $m_1$ 和 $m_2$ 到超平面的距离，以此来评判这些点分类的确信程度。这里的 $d$ 就被我们称为几何间隔。 但如果我们仅仅想比较点 $m_1$ 和 $m_2$ 确信程度的大小，我们可以仅用距离公式的分子：$d’ = |w_1x^{(1)} + w_2x^{(2)} + b|$ 进行比较，因为同一条直线分类的点的分母都是相同的。这里的 $d’$ 我们称为函数间隔。 $d’$ 在图中的几何意义表示如下图所示： 一般来说，在超平面 $w·x+b=0$ 确定的情况下，$|w·x+b|$ 能够相对地表示点$x$距离超平面的远近，而 $w·x+b$ 的符号与类标记 $y$ 的符号是否一致能够表示分类是否正确。（在这里 $y$ 表示样本的标签）所以可以用$\widehat{\gamma_i} = y_i(w·x_i+b)$ 来表示点 $m_i$ 分类的正确性及确信度，这就是样本的函数间隔的概念。 定义超平面 $(w, b)$ 关于训练数据集 $T$ 的函数间隔为超平面$(w, b)$ 关于 $T$ 中所有样本点$(x_i, y_i)$ 的函数间隔的最小值，即： \widehat\gamma = min_{i=1,...,N}\widehat{\gamma_i}函数间隔可以表示分类预测的正确性和及确信度。但是选择分离超平面时，只有函数间隔还不够。因为只要成比例地改变$w$和$b$，例如将它们改为$2w$和$2b$，超平面并没有改变，但函数的间隔却变为原来的两倍。这一事实启示我们，可以对分离超平面的法向量$w$加某些约束，如规范化，$||w||=1$，使得间隔是确定的。这是函数间隔成为几何间隔（geometric margin）。 定义（几何间隔） 对于给定的训练数据集$T$和超平面$(w, b)$ ，定义超平面$(w,b)$ 关于样本点$(x_i, y_i)$ 的几何间隔为 \gamma_i = y_i(\frac{w}{||w||}·x_i+\frac{b}{||w||})定义超平面$(w,b)$ 关于训练数据集$T$ 的几何间隔为超平面$(w, b)$ 关于 $T$ 中所有样本点$(x_i, y_i)$的几何间隔最小值，即： \gamma=min_{i=1,...,N}\gamma_i拉格朗日对偶性首先举例直观理解，求解 $min_xmax_{\alpha, \beta} L(x, \alpha, \beta)$ 和求解 $max_{\alpha, \beta}min_x L(x, \alpha, \beta)$ 是对偶问题。前者是极小极大问题，后者是极大极小问题。 在约束优化问题中，常常利用拉格朗日对偶性（Lagrange duality）将原始问题转换为对偶问题，通过对偶问题而得到原始问题的解。该方法应用在许多统计学习方法中，例如，最大熵模型与支持向量机。这里简要叙述拉格朗日对偶性的主要概念和结果。 原始问题假设$f(x)$, $c_i(x)$, $h_j(x)$ 是定义在 $R^n$ 的连续可微函数。考虑约束最优化问题： min_{x \in R^n} f(x) \tag {C.1}s.t. c_i(x) \leq 0, i = 1, 2, ..., k \tag {C.2}h_j(x)=0, j=1,2,...,l \tag {C.3}称此最优化问题为原始最优化问题或原始问题。 首先引进广义拉格朗日函数（generalized Lagrange function） L(x, \alpha, \beta) = f(x)+\sum_{i=0}^k\alpha_ic_i(x)+\sum_{j=1}^l\beta_jh_j(x) \tag {C.4}这里，$x=(x^{(1)}, x^{(2)}, …, x^{(3)})^T \in R^n$ ，$\alpha_i, \beta_j$ 是拉格朗日乘子，$\alpha \geq 0$。考虑 $x$ 的函数： \theta_P(x) = max_{\alpha,\beta:\alpha_i \geq 0} L(x, \alpha, \beta) \tag {C.5}这里，下标 $P$ 表示原始问题。 假设给定某个$x$。如果 $x$ 违反原始问题的约束条件，即存在某个 $i$ 使得 $c_i(x) &gt; 0$ 或者存在某个 $j$ 使得 $h_j(x) \neq 0$，那么就有 \theta_P(x) = max_{\alpha, \beta:\alpha_i \geq 0} [f(x)+\sum_{i=0}^k\alpha_ic_i(x)+\sum_{j=1}^l\beta_jh_j(x)]=+ \infty \tag {C.6}因为若某个 $i$ 使约束 $c_i(x) &gt; 0$ ，则可令 $\alpha_i \rightarrow + \infty $ ，若某个 $j$ 使 $h_j(x) \neq 0$，则可令 $\beta_j$ 使 $\beta_jh_j(x) \rightarrow + \infty$ ，而将其余各 $\alpha_i$， $\beta_j$ 均取为0. 相反地，如果 $x$ 满足约束条件$(C.2)$ 和$(C.3)$ ，此时 $\theta_P(x)=f(x)$. 所以，如果考虑极小化问题 min_x\theta_P(x) = min_x max_{\alpha, \beta:\alpha_i \geq 0} L(x, \alpha, \beta)$min_x max_{\alpha, \beta:\alpha_i \geq 0} L(x, \alpha, \beta)$ 称为广义拉格朗日函数的极小极大问题。 为了方便，定义原始问题的最优值 p* = min_x\theta_P(x)对偶问题\theta_D(x) = min_{x} L(x, \alpha, \beta) \tag {C.8}再考虑极大化 $\theta_D(x) = min_{x} L(x, \alpha, \beta)$ ，即 max_{\alpha, \beta:\alpha_i \geq 0}\theta_D(\alpha, \beta) = max_{\alpha, \beta:\alpha_i \geq 0}min_{x} L(x, \alpha, \beta) \tag {C.9}问题 $max_{\alpha, \beta:\alpha_i \geq 0}min_{x} L(x, \alpha, \beta)$ 称为广义拉格朗日函数的极大极小问题。 可以将广义拉格朗日定理函数的极大极小问题表示为约束最优化问题： max_{\alpha, \beta}\theta_D(\alpha, \beta) = max_{\alpha, \beta}min_{x} L(x, \alpha, \beta)s.t. \alpha_i \geq 0, i=1, 2,...,k称为原始问题的对偶问题，定义对偶问题的最优值： d^* = max_{\alpha, \beta:\alpha_i \geq 0} \tag {C.10}原始问题和对偶问题的关系这里只给出了定理，证明略去。 定理C.1 若原始问题和对偶问题都有最优值，则 d^* = max_{\alpha, \beta : \alpha_i \geq 0} min_x L(x, \alpha, \beta) \leq min_x max_{\alpha, \beta:\alpha_i \geq 0} L(x, \alpha, \beta) = p^* \tag {C.11}推论C.1 设 $x^$ 和 $\alpha^$ ， $\beta^$ 分别是原始问题和对偶问题的可行解，并且 $d^ = p^$ ，则 $x^$ 和 $\alpha^, \beta^$ 分别是原始问题和对偶问题的最优解。 定理C.2 假设函数 $f(x)$ 和 $c_i(x)$ 是凸函数，$h_j(x)$ 是仿射函数；并且假设不等式约束$c_i(x)$ 是严格可行的，即存在 $x$ ，对所有$i$有$c_i(x) &lt;0$，则存在 $x^\ast , \alpha^\ast , \beta^\ast $ ，使 $x^\ast$ 是原始问题的解，$\alpha^\ast$ , $\beta^\ast$ 是对偶问题的解，并且 p^* = d^* = L(x^*, \alpha^*, \beta^*) \tag {C.12}定理C.3 假设函数 $f(x)$ 和 $c_i(x)$ 是凸函数，$h_j(x)$ 是仿射函数；并且假设不等式约束$c_i(x)$ 是严格可行的，则 $ x^\ast $ 和 $\alpha^\ast, \beta^\ast$ 分别是原始问题和对偶问题的解的充分必要条件是 $x^\ast, \alpha^\ast, \beta^\ast$ 满足下面的 Karush-Kuhn-Trucker(KKT) 条件： \triangledown_xL(x^*, \alpha^*, \beta^*)=0 \tag {C.13}\alpha_i^*c_i(x^*)=0,i=1,2,...,k \tag {C.14}c_i(x) \leq 0, i=1,2,...,k \tag {C.15}\alpha_i^* \geq ,i=1,2,...,k \tag {C.16}h_j(x^*)=0,j=1,2,...,l \tag {C.17}特别指出，式$(C.24)$ 称为 KKT 的对偶互补条件。由此条件可知：若 $\alpha_i^ &gt;0$ ， 则 $c_i(x^)=0$。 简单的总结一下这一小节：在某些条件下，原始问题和对偶问题的解相同，我们可以通过求解对偶问题的解来解决原问题。 核技巧 核技巧我们可以通过一张图来理解： 核函数是二元函数，输入是映射之前的两个向量，其输出等价于两个向量映射之后的内积。 下面这个链接里有关于核函数更详细的描述： 关于核函数 支持向量机数学推导关于支持向量机的推导，重点还是在线性可分支持向量机这里。在明白了线性可分支持向量机的推导之后，线性支持向量机仅仅是在此基础上加了一个软间隔，非线性支持向量机是加上了核技巧。 注意，在看下面的推导过程之前，请务必保证理解了上面的函数间隔和几何间隔、对偶问题等概念。 线性可分支持向量机支持向量机学习的基本想法是求解能够正确划分数据集并且几何间隔最大的分离超平面。这里的间隔最大化又称硬间隔最大化（与后面讨论的软间隔最大化相对应）。 间隔最大化的直观理解： 对训练数据集找到几何间隔最大的超平面意味着以充分大的确信度对训练数据进行分类。也就是说，不仅将正负实例点分开，而且对最难分的实例点（离超平面最近的点）也有足够大的确信度将它们分开。这样的超平面应该对未知的新实例有很好的分类预测能力。 最大间隔算法我们的目标是求解一个几何间隔最大的分离超平面，可以表示为下面的约束最优化问题： max_{w,b} \gamma \tag {1.1}y_i(\frac{w}{||w||}·x_i+\frac{b}{||w||}) \geq \gamma,i=1,2,...,N \tag {1.2}考虑到几何间隔和函数间隔的关系（$\gamma$ 表示几何间隔，$\widehat{\gamma}$ 表示函数间隔），可以将这个问题改写为： max_{w,b} \gammas.t. y_i(w·x_i+b) \geq \widehat{\gamma},i=1,2,...,N函数间隔$\widehat{\gamma}$ 的取值并不影响最优化问题的解。事实上，假设将$w$ 和 $b$ 按比例改编为 $\lambda w$ 和 $\lambda b$ ，这时函数间隔成为 $\lambda \widehat{\gamma}$ ，函数间隔的这一改变对等式约束没有影响，对目标函数的优化也没有影响。 这样，我们可以取$\widehat{\gamma} =1$ ，带入到上面的式子，同时我们注意到最大化$\frac{1}{||w||}$ 和最小化 $\frac{1}{2}||w||^2$ 是等价的，于是约束规划问题可以转换成如下的形式： $min_{w,b} \frac{1}{2}||w||^2 \tag {1.3}$ s.t.y_i(w·x_i+b)-1 \geq 0,i=1,2,...,N \tag {1.4}综上，我们得到了线性可分的支持向量机算法——最大间隔法，在后文中我们会对这个算法进行求解。 算法（线性可分支持向量机学习算法）： 输入：线性可分训练数据集 $T=\{(x_1,y_1),(x_2,y_2),…,(x_N,y_N)\}$，其中，$x_i \in X =R^n,y_i \in Y ={-1, +1},i=1,2,…,N$; 输出：最大间隔分离超平面和分类决策函数 （1） 构造并求解约束最优化问题： min_{w,b} \frac{1}{2}||w||^2s.t. y_i(w_i ·x+b)-1 \geq 0,i=1,2,...,N求得最优解$w^,b^$。 （2） 由此得到分类超平面啊： w^* · x+b^*=0分类决策函数 f(x)=sign(w^*·x+b^*)算法求解线性支持向量机非线性支持向量机归纳和总结]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>SVM</tag>
        <tag>算法推导</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据预处理]]></title>
    <url>%2F201911%2F%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[代码实现：（由于时间原因，这里忽略了各方法的参数的意义和方法）4.1.3 数据可视化实例 显示各列名称 数据的快速统计汇总，包括平均数、最大最小点和分位点等 频度分布图 偏态和峰度 散点图 scatter plot 箱线图 box plot 相关矩阵 correlation matrix 4.2.1 用Python进行缺失值处理 创造缺失数据 查看缺失率 将缺失的行全部删去 使用均值填充缺失值 4.2.3 异常值的检测和处理 计算平均值和标准差（计算均值） 绘制数据密度曲线 根据$3/sigma$原则检验异常值并剔除 使用箱线图查看数据分布 计算分位差 根据分位差的上下限筛选出异常值error，剔除异常值 4.3.4 元组重复如何使用卡方值，相关系数与协方差进行删除冗余与相关分析。 选取两个属性计算卡方值，若两个数据完全相关，可以删掉一个属性来消除冗余。 选取两个属性计算协方差和相关系数，若发现两个属性存在相关性，但并不是完全相关，不能删除其中任何一个属性。 4.4.2 维规约PCA：又称K-L方法，搜索k个最能代表数据的n维正交向量，其中k&lt;=n。这样，原来的数据投影到一个小得多的空间上，实现维规约。属性子集选择这一节选择了Boston房价数据集，分别使用PCA方法和逐步向前选择的属性子集选择方法进行维规约。 4.5.2 规范化把属性数据按比例缩放，使之落入一个小区间。 最大-最小规范化 Z-score规范化 小数定标规范化 4.5.3 离散化通过把数值属性的原始值用区间标签或概念标签替换。这种方法可以自动地产生数据的概念分层，而概念分层允许在多个粒度层进行挖掘。]]></content>
      <categories>
        <category>数据科学导论</category>
      </categories>
      <tags>
        <tag>数据预处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Price Suggestion Chanllenge]]></title>
    <url>%2F201911%2FPrice_Suggestion_Chanllenge%2F</url>
    <content type="text"><![CDATA[Price Suggestion Chanllenge[TOC] 实验题目题目背景考虑到网上销售的产品数量，产品定价在规模上变得更加困难。服装有很强的季节性定价趋势，受品牌影响很大，而电子产品价格根据产品规格波动。如何根据以往信息进行合理定价，有效地帮助商家进行商品的销售是一个有意义的问题。 分析目标通过给出的商品描述、商品类别和品牌信息，并结合训练数据中的商品价格来给新商品定价格。Eg ： 显然 Versace 的衣服价格上应该远高于美特斯邦威的衣服，并且在商品描述中，可以发现两者描述有细微差别。 本 project 旨在对文本信息进行分析，提取文本信息中重要信息，推导出和价格之间的潜在关系 数据字段分析 数据集 train.csv 训练集 （含price） test.csv 测试集 (不含price) ; label_test.csv 测试集 中对应的 price f_test.csv 最终的评价数据集 （不含 price ） 评价指标评价的使用的是 Mean Squared Logarithmic Error: 计算的方式如下 MSLE = \cfrac{1}{n}\sum_{i=1}^n(log(p_i+1)-log(\alpha_i+1))^2其中$n$代表测试集的样本数；$p_i$代表的是预测的商品价格值；$\alpha_i$代表实际的销售价格。 作业要求提交的最后文件内容为： 最终代码文件（请写清楚使用了那些库，以及相应库的版本，可使用 pip list 命令查看版本，确保能顺利运行） 在 f_test.csv数据集上的结果 分析文档请不要是简单的代码粘贴，加入分析过程将你对于数据的理解记录下来，简单来说，缺失值处理这种基本操作写出你的尝试的各种方法，为了解决rank太低的情况下分数太低写一份同学负责哪一部分代码，每一部分没有区别，主要是为了给代码风格打分。 提交结果文件格式 结果文件名为 提交格式 第一行为 test_id \t price 的表头 接下来的每行为id \t predict_price 实验过程这次实验难度很大，我们所有参考资料均在实验报告的末尾注明 一、样例代码的学习首先尝试了给出的样例代码，了解了解决这个问题的大致思路。解决这个价格预测问题的主要过程是：导入数据和数据探索、数据预处理、模型构建、价格预测和测评。 导入数据和数据探索导入数据和初步了解数据train_data = pd.read_csv('../data/4/train.csv', sep="\t")test_data = pd.read_csv('../data/4/test.csv',sep='\t')train_data.info() &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 300000 entries, 0 to 299999Data columns (total 8 columns):train_id 300000 non-null int64name 300000 non-null objectitem_condition_id 300000 non-null int64category_name 298719 non-null objectbrand_name 171929 non-null objectprice 300000 non-null float64shipping 300000 non-null int64item_description 300000 non-null objectdtypes: float64(1), int64(3), object(4)memory usage: 18.3+ MB 数据预处理首先处理属性，训练数据首先要删去price，再去掉没有用处的 train_id 或者 test_id。通过观察上面的数据属性可知 category_name 和 brand_name有数据缺失，样例代码直接用 missing填充。def featureProcessing(df): # delete the data that will not be used df = df.drop(['price', 'test_id', 'train_id'], axis=1) # deal with the missing value with a default value df['category_name'] = df['category_name'].fillna('missing').astype(str) df['brand_name'] = df['brand_name'].fillna('missing').astype(str) df['item_description'] = df['item_description'].fillna('No') # convert the data : int -&gt; str df['shipping'] = df['shipping'].astype(str) df['item_condition_id'] = df['item_condition_id'].astype(str) return df 模型构建首先做模型的输入，通过CountVectorizer 和 TfidfVectorizer生成词频的矩阵， Tfidf 的效果更优，因为考虑了各词在所有字段钟出现的次数，生成的词频矩阵是带有权重的。 vectorizer = FeatureUnion([ ('name', CountVectorizer(ngram_range=(1, 2), max_features=50000, preprocessor=build_preprocessor_1('name'))), ('category_name', CountVectorizer(token_pattern='.+', preprocessor=build_preprocessor_1('category_name'))), ('brand_name', CountVectorizer(token_pattern='.+', preprocessor=build_preprocessor_1('brand_name'))), ('shipping', CountVectorizer(token_pattern='\d+', preprocessor=build_preprocessor_1('shipping'))), ('item_condition_id', CountVectorizer(token_pattern='\d+', preprocessor=build_preprocessor_1('item_condition_id'))), ('item_description', TfidfVectorizer(ngram_range=(1, 3),max_features=100000, preprocessor=build_preprocessor_1('item_description'))),]) 利用岭回归，实现价格预测。def ridgeClassify(train_data, train_label): ridgeClf = Ridge( solver='auto', fit_intercept=True, alpha=0.5, max_iter=500, normalize=False, tol=0.05) # 训练 ridgeClf.fit(train_data, train_label) return ridgeClf 通过对数据集的了解和对样例代码的学习，我们了解到优化这个问题的答案有三个角度可以入手： 数据预处理：怎样处理缺失值？数据该怎样结合？ 形成词频矩阵时进行优化：调整 CountVectorizer 和 TfidfVectorizer 的参数 模型的选择和优化：尝试岭回归之外的模型、调整模型参数。 二、尝试更多的模型在上面的样例代码中，利用岭回归模型得到的结果是3.01左右。经过之前课上的提示和网上的资料查找，我们准备再去尝试一下 MLP模型和 Lgmb模型。在粗略的尝试了两个模型之后我们决定进一步利用 MLP 进行下一步的优化。 MLPMLP 模型的结果如下： LGBMLgbm 模型的结果如下： MLP 和 LGBM 结合 特征处理 导入数据集 # 读文件 train = pd.read_csv('data/train.csv', sep='\t') test = pd.read_csv('data/test.csv', sep='\t') # 训练数据和测试数据一起处理 df = pd.concat([train, test], axis=0) 缺失值处理 #对缺失值进行处理 df['category_name'] = df['category_name'].fillna('MISS').astype(str) df['brand_name'] = df['brand_name'].fillna('missing').astype(str) df['item_description'] = df['item_description'].fillna('No') #数据类型处理 df['shipping'] = df['shipping'].astype(str) df['item_condition_id'] = df['item_condition_id'].astype(str) 特征向量化 使用 sklearn 库中的 CountVectorizer 类将文本特征进行向量化处理，并使用 FeatureUnion 进行特征联合 vectorizer = FeatureUnion([ ('name', CountVectorizer( ngram_range=(1, 2), max_features=100000, preprocessor=build_preprocessor('name'))), ('category_name', CountVectorizer( token_pattern='.+', preprocessor=build_preprocessor('category_name'))), ('brand_name', CountVectorizer( token_pattern='.+', preprocessor=build_preprocessor('brand_name'))), ('shipping', CountVectorizer( token_pattern='\d+', preprocessor=build_preprocessor('shipping'))), ('item_condition_id', CountVectorizer( token_pattern='\d+', preprocessor=build_preprocessor('item_condition_id'))), ('item_description', TfidfVectorizer( ngram_range=(1, 3), max_features=200000, preprocessor=build_preprocessor('item_description'), stop_words='english')), ]) 模型构建 对特征分别使用岭回归模型，Lgbm 模型和 mlp 模型进行训练，在本地测试得到的解分别为3.01，3.00，0.26 岭回归模型 def ridge_classify(train_data,train_label): #模型 model = Ridge( solver='auto', fit_intercept=True, alpha=0.4, max_iter=100, normalize=False, tol=0.05) #训练 model.fit(train_data, train_label) return model lgbm模型 def lgbm_classify(train_data,train_label): params = &#123; 'learning_rate': 0.75, 'application': 'regression', 'max_depth': 3, 'num_leaves': 100, 'verbosity': -1, 'metric': 'RMSE', &#125; train_X, valid_X, train_y, valid_y = train_test_split(train_data, train_label, test_size=0.1, random_state=144) d_train = lgb.Dataset(train_X, label=train_y) d_valid = lgb.Dataset(valid_X, label=valid_y) watchlist = [d_train, d_valid] model = lgb.train(params, train_set=d_train, num_boost_round=2200, valid_sets=watchlist, \ early_stopping_rounds=50, verbose_eval=100) return model mlp 模型 MLP 模型由两个全连接层和一个dropout层组成，本质上就是一个多隐藏层的网络 def mlp_model(train_data,train_label,row_train): model = Sequential() # 全连接层 model.add(Dense(64, input_shape=(row_train,), activation='relu')) # DropOut层 model.add(Dropout(0.4)) # 全连接层+分类器 model.add(Dense(1, activation='relu')) model.compile(loss='mean_squared_logarithmic_error', optimizer='adam', metrics=['accuracy'] ) model.fit(train_data, train_label, batch_size=300, epochs=1, ) return model.predict(X_test) 三、形成词频矩阵时进行优化在样例代码中我们尝试了将所有 CountVectorizer 替换为 TdidfVectorizer，然后利用岭模型进行预测，但是结果并没有优化很多，仅仅到2.9而已。在后面利用 MLP时完全舍弃了 CountVectorizer 只利用 TdidfVectorizer。 四、优化数据预处理过程我们对上面基本已经完善的 MLP 进行优化的方式是尝试不同特征的组合。 数据属性分析（详见Price Suggestion Challenge1.ipynb）首先对属性进行分析：item_condition_id 300000 non-null int64shipping 300000 non-null int64name 300000 non-null objectcategory_name 298719 non-null objectbrand_name 171929 non-null objectitem_description 300000 non-null object item_condition_id 和 shipping 直接作为输入考虑，而 name, category_name, brand_name, item_description 考虑不同的组合进行尝试。 在此之前，我们找到了一个数据可视化的实例教程，对数据的属性进行分析。通过详细观察数据得到最优的输入组合：train.head() price通过数据可视化后的观察我们得知为什么要对 price 做 log1p 处理，这样使 price 分布更优。 category_name尝试对该属性进行拆分，分成各种子类并查看相应数据。 item_description 不同的输入组合 在样例代码中只是简单地将各个属性结合在一起进行文本分析，即name + item_condition_id + category_name + brand_name + shipping + item_description（6个输入） 尝试name, item_condition_id, shipping,category_name + item_description, brand_name（5个输入） 尝试name, item_condition_id, shipping, category_name + brand_name + item_description（4个输入） 尝试name, item_condition_id, shipping, name + category_name + brand_name + item_description （4个输入） 四种组合作为输入的结果非常相近，除了组合1MSLE在0.4左右，组合2和3 在0.21 左右，组合4最终能跑到0.17左右。组合4实际上加大了name的权重，让最终结果更好。 最终源码及实验结果 数据预处理 # 数据处理# 属性共有8个，删去price，train_id对结果没有影响。def data_preprocess(df): df['name'] = df['name'].fillna('') + ' ' + df['brand_name'].fillna('') df['text'] = (df['item_description'].fillna('') + ' ' + df['name'] + ' ' + df['category_name'].fillna('')) return df[['name', 'text', 'shipping', 'item_condition_id']] 构建模型 def fit_predict(xs, y_train): X_train, X_test = xs # 配置tf.Session的运算方式，比如gpu运算或者cpu运算 config = tf.ConfigProto( # 设置多个操作并行运算的线程数 intra_op_parallelism_threads=1, use_per_session_threads=1, inter_op_parallelism_threads=1) # Session提供了Operation执行和Tensor求值的环境。 with tf.Session(graph=tf.Graph(), config=config) as sess, timer('fit_predict'): ks.backend.set_session(sess) model_in = ks.Input(shape=(X_train.shape[1],), dtype='float32', sparse=True) # ks.layers.Dense 表示输出空间的维度 # Dense全连接层，相当于直接添加一层 # activation 是按逐个元素计算的激活函数 out = ks.layers.Dense(192, activation='relu')(model_in) out = ks.layers.Dense(64, activation='relu')(out) out = ks.layers.Dense(64, activation='relu')(out) out = ks.layers.Dense(1)(out) model = ks.Model(model_in, out) model.compile(loss='mean_squared_error', optimizer=ks.optimizers.Adam(lr=3e-3)) for i in range(3): with timer(f'epoch &#123;i + 1&#125;'): model.fit(x=X_train, y=y_train, batch_size=2 ** (11 + i), epochs=1, verbose=0) return model.predict(X_test)[:, 0] 训练模型并预测结果 def main(): vectorizer = make_union(# 把所有的transformers组装成一个FeatureUnion. n_jobs表示可以同时进行 # FunctionTransformer 实现自定义转换，validate=False 时没有输入验证 # TfidfVectorizer函数，仅考虑按照词频排列前max_feature位的词，token_pattern='\w+'至少匹配一位的词 make_pipeline(FunctionTransformer(itemgetter('name'), validate=False), TfidfVectorizer(max_features=100000, token_pattern='\w+')), make_pipeline(FunctionTransformer(itemgetter('text'), validate=False), TfidfVectorizer(max_features=100000, token_pattern='\w+')), make_pipeline(FunctionTransformer(itemgetter(['shipping', 'item_condition_id']), validate=False), FunctionTransformer(to_records, validate=False), DictVectorizer()), n_jobs=4) # StandardScaler()进行数据标准化。保存训练集中的参数（均值、方差）直接使用其对象转换测试集数据。 y_scaler = StandardScaler() # with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。 with timer('process train'): train = pd.read_csv('train.csv', sep='\t') test = pd.read_csv('test.csv', sep='\t') # 删去'price'属性 train = train[train['price'] &gt; 0].reset_index(drop=True) # 将price数据进行标准化 y_train = y_scaler.fit_transform(np.log1p(train['price'].values.reshape(-1, 1))) X_train = vectorizer.fit_transform(data_preprocess(train)).astype(np.float32) print(f'X_train: &#123;X_train.shape&#125; of &#123;X_train.dtype&#125;') with timer('process valid'): X_test = vectorizer.transform(data_preprocess(test)).astype(np.float32) with ThreadPool(processes=4) as pool: Xb_train, Xb_test = [x.astype(np.bool).astype(np.float32) for x in [X_train, X_test]] xs = [[Xb_train, Xb_test], [X_train, X_test]] * 2 # 预测模型 y_pred = np.mean(pool.map(partial(fit_predict, y_train=y_train), xs), axis=0) y_pred = np.expm1(y_scaler.inverse_transform(y_pred.reshape(-1, 1))[:, 0]) # print(type(y_pred)) # 输出预测结果到csv test_id = np.array(range(0, len(y_pred))) dataframe = pd.DataFrame(&#123;'test_id': test_id, 'price': y_pred&#125;) dataframe.to_csv("res.csv", index=False, sep='\t') # print('Valid MSLE: &#123;:.4f&#125;'.format(mean_squared_log_error(valid['price'], y_pred))) 最终实验结果达到了0.179。 在MLP模型下的其他优化方向 可以观察到在item_desciption 的词云中，有诸如shipping 和free等词，这些词可能代表着免运费等含义，与shipping属性有一定的重复，将它作为特征词训练模型会造成干扰。 单个关键词可能包含的信息不全面，关键词之间可能有很大的关联。 在最终的模型中MLP采用了四层感知机，感知机的层数和每层的输入规模还可以做进一步调参。 实验心得这次实验的难度非常大，不知道从何入手。 在仔细研究了课程中给的样例代码和数据可视化分析的内容之后，对数据集和预测的方法都有了初步的了解。 因为对MLP，Lightgbm等模型非常不熟悉，所以从输入的角度入手，在不同属性的组合之处进行尝试，得到了最终的较为优秀的结果。 在之后的学习中应该更加深入地学习和了解模型，尽量能够自己独立完成创建模型，而不是修改其他已经写好的模型。 参考资料[1].https://ahmedbesbes.com/how-to-mine-newsfeed-data-and-extract-interactive-insights-in-python.html [2]. https://github.com/pjankiewicz/mercari-solution [3].https://www.kaggle.com/thykhuely/mercari-interactive-eda-topic-modelling [4].https://wklchris.github.io/Py3-pandas.html#%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AFdfdescribe-svalue_counts—unique [5].https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8 [6].https://blog.csdn.net/weixin_39807102/article/details/81912566 [7].https://github.com/maiwen/NLP [8]. https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F [9].https://blog.csdn.net/u012609509/article/details/72911564 [10]. https://www.kaggle.com/tunguz/more-effective-ridge-lgbm-script-lb-0-44823 [11]. https://qiita.com/kazuhirokomoda/items/1e9b7ebcacf264b2d814 [12]. https://www.jianshu.com/p/c532424541ad [13]. https://www.jiqizhixin.com/articles/2017-11-13-7]]></content>
      <categories>
        <category>数据科学导论</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux开发环境及应用作业1]]></title>
    <url>%2F201911%2FLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BD%9C%E4%B8%9A%2020191031%2F</url>
    <content type="text"><![CDATA[Linux开发环境及应用作业 20191031作业要求从因特网上搜索相关Web网页，处理网页html数据，从中提取出当前时间点北京各监测站的 PM2.5浓度，输出格式如下。要求：写出各个处 理步骤，并给出解释。2018-03-15 13:00:00,海淀区万柳,732018-03-15 13:00:00,昌平镇,672018-03-15 13:00:00,奥体中心,662018-03-15 14:00:00,海淀区万柳,732018-03-15 14:00:00,昌平镇,732018-03-15 14:00:00,奥体中心,75 实验过程数据搜集北京各监测站的PM2.5指数的数据来源网站：http://www.86pm25.com/city/beijing.html 数据整理及汇总先展示实现该操作的指令和最后的结果： 下面详细解释指令： 首先利用标签把数据分成单独的行，sed -e &#39;s/&lt;tr/\n&lt;tr/g&#39; 其次删掉html文件中的所有标签-e &#39;s/&lt;[^&lt;&gt;]*&gt;/ /g，把所有标签都换成了空格。 我先在html文件中寻找日期和时间，发现时间的那一行有“更新”的字样，于是建立awk文件，此时发现“更新”后面中文的冒号紧跟着日期，没发把日期分离开，于是先在中文冒号后面添加空格。顺便把日期和时间的格式改成标准的输出的格式。-e &#39;s/：/： /g&#39; -e &#39;s/[年月]/-/g&#39; -e &#39;s/日//g -e &#39;s/时/:00:00/g&#39; 此时可以把时间和日期抽离出来了。在建立的awk文件中输入/更新/ {data = $2; time = $3} 得到日期和时间 之后，我们去找监测站和pm2.5指数，发现在这些数据最后都有$m^3$单位在，于是在awk文件中添加/m3/{printf(&quot;%s %s,%s,%s\n&quot;,date, time, $1, $3);} 最后把单位删掉，并输出到csv文件中即可。awk -f flow.awk | sed -e &#39;s/[ug/m3]//g&#39; &gt; flow.csv]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>文本处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[神经网络作业报告]]></title>
    <url>%2F201911%2F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BD%9C%E4%B8%9A%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[神经网络作业报告[TOC]本次作业部分源码的参考资料已注明 一、实验要求 推导具有单隐层的神经网络的前向传播和反向传播算法，并进行编程（可以使用sklearn中的神经网络）。 探讨10，30，100，300，1000，不同隐藏节点数对网络性能的影响。 探讨不同学习率和迭代次数对网络性能的影响。 改变数据的标准化方法，探讨对训练的影响。 查阅资料说明什么是Hebb学习规则 二、推导单隐层神经网络的前向传播和反向传播算法参考资料：https://blog.csdn.net/Lucky_Go/article/details/89738286 三、算法实现参考资料：https://blog.csdn.net/zsx17/article/details/89342506 因为网上神经网络的代码基本都是用tensorflow实现的，这里是直接调库。在完成了作业的基本要求之后我也尝试了自己实现单隐层神经网络的代码（在实验报告的后部分）。 1. 载入数据# 1、载入数据import numpy as npimport tensorflow as tfimport tensorflow.examples.tutorials.mnist.input_data as input_data# 读取mnist数据mnist = input_data.read_data_sets('MNIST_data/', one_hot=True) 2. 建立模型# 2.建立模型# 2.1 构建输入层x = tf.placeholder(tf.float32, [None, 784], name='X')y = tf.placeholder(tf.float32, [None, 10], name='Y')# 2.2 构建隐藏层# 隐藏层神经元数量(随意设置）H1_NN = 256# 权重W1 = tf.Variable(tf.random_normal([784, H1_NN]))# 偏置项b1 = tf.Variable(tf.zeros([H1_NN]))Y1 = tf.nn.relu(tf.matmul(x, W1) + b1)# 2.3 构建输出层W2 = tf.Variable(tf.random_normal([H1_NN, 10]))b2 = tf.Variable(tf.zeros([10]))forward = tf.matmul(Y1, W2) + b2pred = tf.nn.softmax(forward) 3. 训练模型# 3.训练模型# 3.1 定义损失函数# tensorflow提供了下面的函数，用于避免log(0)值为Nan造成数据不稳定loss_function = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=forward, labels=y))# # 交叉熵损失函数# loss_function = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))# 3.2 设置训练参数train_epochs = 40 # 训练轮数batch_size = 50 # 单次训练样本数(批次大小)# 一轮训练的批次数total_batch = int(mnist.train.num_examples / batch_size)display_step = 1 # 显示粒数learning_rate = 0.01 # 学习率# 3.2 选择优化器optimizer = tf.train.AdamOptimizer(learning_rate).minimize(loss_function)# 3.3定义准确率correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(pred, 1))accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))# 3.4 模型的训练# 记录训练开始的时间from time import timestartTime = time()sess = tf.Session()sess.run(tf.global_variables_initializer())for epoch in range(train_epochs): for batch in range(total_batch): # 读取批次训练数据 xs, ys = mnist.train.next_batch(batch_size) # 执行批次训练 sess.run(optimizer, feed_dict=&#123;x: xs, y: ys&#125;) # 在total_batch批次数据训练完成后，使用验证数据计算误差和准确率，验证集不分批 loss, acc = sess.run([loss_function, accuracy], feed_dict=&#123;x: mnist.validation.images, y: mnist.validation.labels&#125;) # 打印训练过程中的详细信息 if (epoch + 1) % display_step == 0: print('训练轮次：', '%02d' % (epoch + 1), '损失：', '&#123;:.9f&#125;'.format(loss), '准确率：', '&#123;:.4f&#125;'.format(acc))print('训练结束')# 显示总运行时间duration = time() - startTimeprint("总运行时间为：", "&#123;:.2f&#125;".format(duration)) 4. 模型评估# 4.评估模型accu_test = sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y: mnist.test.labels&#125;)print('测试集准确率：', accu_test) 5. 应用模型# 5.应用模型prediction_result = sess.run(tf.argmax(pred, 1), feed_dict=&#123;x: mnist.test.images&#125;)# 查看预测结果的前10项print("前10项的结果：", prediction_result[0:10])# 5.1找出预测错误的样本compare_lists = prediction_result == np.argmax(mnist.test.labels, 1)print(compare_lists)err_lists = [i for i in range(len(compare_lists)) if compare_lists[i] == False]print('预测错误的图片：', err_lists)print('预测错误图片的总数：', len(err_lists))# 定义一个输出错误分类的函数import numpy as npdef print_predict_errs(labels, # 标签列表 prediction): # 预测值列表 count = 0 compare_lists = (prediction == np.argmax(labels, 1)) err_lists = [i for i in range(len(compare_lists)) if compare_lists[i] == False] for x in err_lists: print('index=' + str(x) + '标签值=', np.argmax(labels[x]), '预测值=', prediction[x]) count = count + 1 print("总计：" + str(count))print_predict_errs(labels=mnist.test.labels, prediction=prediction_result)# 可视化import matplotlib.pyplot as pltdef plot_images_labels_prediction(images, # 图像列表 labels, # 标签列表 predication, # 预测值列表 index, # 从第index个开始显示 num=10): # 缺省一次显示10幅 fig = plt.gcf() # 获取当前图表，get current figure fig.set_size_inches(10, 12) # 设为英寸，1英寸=2.53厘米 if num &gt; 25: num = 25 # 最多显示25个子图 for i in range(0, num): ax = plt.subplot(5, 5, i + 1) # 获取当前要处理的子图 # 显示第index图像 ax.imshow(np.reshape(images[index], (28, 28)), cmap='binary') # 构建该图上显示的title title = 'label=' + str(np.argmax(labels[index])) if len(predication) &gt; 0: title += ",predict=" + str(predication[index]) # 显示图上的title信息 ax.set_title(title, fontsize=10) ax.set_xticks([]) # 不显示坐标轴 ax.set_yticks([]) index += 1 plt.show()plot_images_labels_prediction(mnist.test.images, mnist.test.labels, prediction_result, 10, 25)plot_images_labels_prediction(mnist.test.images, mnist.test.labels, prediction_result, 610, 20) 6. 结果展示上面的代码中隐层节点个数为256个，学习率为0.01，迭代次数为40次。训练结果如下： 部分分类图像如下所示： 四、算法调优在上面的模型中隐层结点数为256，学习率为0.01，迭代次数为40次。 下面分别从隐层节点数、学习率和迭代次数三个角度进行调优。 1. 隐层节点数将隐层节点数设为10，得到的结果如下图所示： 将隐层节点设为30，100，300，1000的效果不再具体展示，效果如下所示： 隐层节点个数 总运行时间/s 预测错误的图片数 准确率 10 46.29 736 0.9264 30 43.46 528 0.9472 100 59.06 343 0.9657 256 84.48 249 0.9751 300 76.64 269 0.9731 1000 302.27 240 0.976 由表可知，准确率随着隐层节点个数的增加而增加，增加速率逐步减少。 2. 学习率学习率分别为0.005，0.01， 0.02， 0.1，隐层节点数选择256，迭代次数选择40。分类结果如下： 学习率 总运行时间/s 预测错误的图片数 准确率 0.005 78.81 231 0.9769 0.01 84.48 249 0.9751 0.02 69.72 446 0.9554 0.1 73.87 2561 0.7439 由表可知，准确率随着学习率的增加而降低。在学习率低于0.01时，图片分类的准确率提升的速率较小。 3. 迭代次数迭代次数分别为20，40，100，隐层节点数选择256，学习率选择0.01。分类结果如下： 迭代次数 总运行时间/s 预测错误的图片数 准确率 20 37.12 307 0.9693 40 84.48 249 0.9751 100 184.39 239 0.9761 由表可知，迭代次数对总运行时间的影响率很大，准确率随着迭代次数的增加而增加，但对准确率起决定因素的还是隐层的节点个数以及学习率。 4. 改变数据标准化方法最大-最小规范化Z-score规范化五、Hebb学习规则参考资料：https://baike.baidu.com/item/Hebb%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99/3061563?fr=aladdin Hebb学习规则是一个无监督学习规则，这种学习的结果是使网络能够提取训练集的统计特性，从而把输入信息按照它们的相似性程度划分为若干类。这一点与人类观察和认识世界的过程非常吻合，人类观察和认识世界在相当程度上就是在根据事物的统计特征进行分类。Hebb学习规则只根据神经元连接间的激活水平改变权值，因此这种方法又称为相关学习或并联学习。 无监督学习规则 唐纳德·赫布（1904-1985）是加拿大著名生理心理学家。Hebb学习规则与“条件反射”机理一致，并且已经得到了神经细胞学说的证实。 巴甫洛夫的条件反射实验：每次给狗喂食前都先响铃，时间一长，狗就会将铃声和食物联系起来。以后如果响铃但是不给食物，狗也会流口水。 受该实验的启发，Hebb的理论认为在同一时间被激发的神经元间的联系会被强化。比如，铃声响时一个神经元被激发，在同一时间食物的出现会激发附近的另一个神经元，那么这两个神经元间的联系就会强化，从而记住这两个事物之间存在着联系。相反，如果两个神经元总是不能同步激发，那么它们间的联系将会越来越弱。 Hebb学习律可表示为：$W_{ij}(t+1)=W_{ij}(t)+a⋅y_i⋅y_j$$W_{ij}(t+1)=W_{ij}(t)+a⋅y_i⋅y_j$ 其中$W_{ij}$表示神经元$j$到神经元$i$的连接权，$y_i$与$y_j$表示两个神经元的输出，$a$是表示学习速率的常数，如果$y_i$与$y_j$同时被激活，即$y_i$与$y_j$同时为正，那么$W_{ij}$将增大。如果$y_i$被激活，而$y_j$处于抑制状态，即$y_i$为正$y_j$为负，那么$W_{ij}$将变小。 六、 自己实现单隐层神经网络参考资料：https://blog.csdn.net/hellozhxy/article/details/81055391 网络结构的函数定义： def layer_sizes(X, Y): n_x = X.shape[0] # size of input layer n_h = 4 # size of hidden layer n_y = Y.shape[0] # size of output layer return (n_x, n_h, n_y) 参数初始化函数： def initialize_parameters(n_x, n_h, n_y): W1 = np.random.randn(n_h, n_x)*0.01 b1 = np.zeros((n_h, 1)) W2 = np.random.randn(n_y, n_h)*0.01 b2 = np.zeros((n_y, 1)) assert (W1.shape == (n_h, n_x)) assert (b1.shape == (n_h, 1)) assert (W2.shape == (n_y, n_h)) assert (b2.shape == (n_y, 1)) parameters = &#123;"W1": W1, "b1": b1, "W2": W2, "b2": b2&#125; return parameters 前向传播计算函数： def forward_propagation(X, parameters): # Retrieve each parameter from the dictionary "parameters" W1 = parameters['W1'] b1 = parameters['b1'] W2 = parameters['W2'] b2 = parameters['b2'] # Implement Forward Propagation to calculate A2 (probabilities) Z1 = np.dot(W1, X) + b1 A1 = np.tanh(Z1) Z2 = np.dot(W2, Z1) + b2 A2 = sigmoid(Z2) assert(A2.shape == (1, X.shape[1])) cache = &#123;"Z1": Z1, "A1": A1, "Z2": Z2, "A2": A2&#125; return A2, cache 计算损失函数： def compute_cost(A2, Y, parameters): m = Y.shape[1] # number of example # Compute the cross-entropy cost logprobs = np.multiply(np.log(A2),Y) + np.multiply(np.log(1-A2), 1-Y) cost = -1/m * np.sum(logprobs) cost = np.squeeze(cost) # makes sure cost is the dimension we expect. assert(isinstance(cost, float)) return cost 反向传播函数： def backward_propagation(parameters, cache, X, Y): m = X.shape[1] # First, retrieve W1 and W2 from the dictionary "parameters". W1 = parameters['W1'] W2 = parameters['W2'] # Retrieve also A1 and A2 from dictionary "cache". A1 = cache['A1'] A2 = cache['A2'] # Backward propagation: calculate dW1, db1, dW2, db2. dZ2 = A2-Y dW2 = 1/m * np.dot(dZ2, A1.T) db2 = 1/m * np.sum(dZ2, axis=1, keepdims=True) dZ1 = np.dot(W2.T, dZ2)*(1-np.power(A1, 2)) dW1 = 1/m * np.dot(dZ1, X.T) db1 = 1/m * np.sum(dZ1, axis=1, keepdims=True) grads = &#123;"dW1": dW1, "db1": db1, "dW2": dW2, "db2": db2&#125; return grads 权值更新函数： def update_parameters(parameters, grads, learning_rate = 1.2): # Retrieve each parameter from the dictionary "parameters" W1 = parameters['W1'] b1 = parameters['b1'] W2 = parameters['W2'] b2 = parameters['b2'] # Retrieve each gradient from the dictionary "grads" dW1 = grads['dW1'] db1 = grads['db1'] dW2 = grads['dW2'] db2 = grads['db2'] # Update rule for each parameter W1 -= dW1 * learning_rate b1 -= db1 * learning_rate W2 -= dW2 * learning_rate b2 -= db2 * learning_rate parameters = &#123;"W1": W1, "b1": b1, "W2": W2, "b2": b2&#125; return parameters 最终的神经网络模型： def nn_model(X, Y, n_h, num_iterations = 10000, print_cost=False): np.random.seed(3) n_x = layer_sizes(X, Y)[0] n_y = layer_sizes(X, Y)[2] # Initialize parameters, then retrieve W1, b1, W2, b2. Inputs: "n_x, n_h, n_y". Outputs = "W1, b1, W2, b2, parameters". parameters = initialize_parameters(n_x, n_h, n_y) W1 = parameters['W1'] b1 = parameters['b1'] W2 = parameters['W2'] b2 = parameters['b2'] # Loop (gradient descent) for i in range(0, num_iterations): # Forward propagation. Inputs: "X, parameters". Outputs: "A2, cache". A2, cache = forward_propagation(X, parameters) # Cost function. Inputs: "A2, Y, parameters". Outputs: "cost". cost = compute_cost(A2, Y, parameters) # Backpropagation. Inputs: "parameters, cache, X, Y". Outputs: "grads". grads = backward_propagation(parameters, cache, X, Y) # Gradient descent parameter update. Inputs: "parameters, grads". Outputs: "parameters". parameters = update_parameters(parameters, grads, learning_rate=1.2) # Print the cost every 1000 iterations if print_cost and i % 1000 == 0: print ("Cost after iteration %i: %f" %(i, cost)) return parameters]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Finds算法和ID3算法]]></title>
    <url>%2F201910%2FFINDS%E7%AE%97%E6%B3%95%E5%92%8CID3%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[FINDS 算法与 ID3 算法作业要求 实现FINDS算法 实现ID3算法 不要调库自己写。如果有能力可以继续用课件里的数据集测试两个算法（用天气的4条记录测试FINDS，用贷款的15条记录测试ID3）给出训练误差测试误差等； 再有能力可以使用更大的数据集测试算法。 算法实现FINDS算法 目标：寻找极大特殊假设。 从假设集合H中最特殊的假设开始。在该假设不能正确地划分一个正例的时候将其进行一般化。算法如下： FINDS算法是一种利用more-general-than的偏序结构来搜索假设空间的方法，这一搜索沿着偏序链，从较特殊的假设逐渐演变为较一般的假设。 算法Python实现： """ -*- coding: utf-8 -*- Created on 2019/10/21 21:02 FINDS @Author : Zhouy @Blog : www.crocodilezs.top"""# create datasetdef CreateDataset(): dataset = [['Sunny', 'Warm', 'Normal', 'Strong', 'Warm', 'Same', 'Yes'], ['Sunny', 'Warm', 'High', 'Strong', 'Warm', 'Same', 'Yes'], ['Rainy', 'Cold', 'High', 'Strong', 'Warm', 'Change', 'No'], ['Sunny', 'Warm', 'High', 'Strong', 'Cold', 'Change', 'Yes']] labels = ['Sky', 'Temp', 'Humidity', 'Wind', 'Water', 'Forest', 'OutdoorSport'] return dataset, labels# Find one version space by using FINDS# '/' means null, and '*' means generalizationdef FINDS(dataset): constraint = ['/', '/', '/', '/', '/', '/'] for item in dataset: if item[-1] == 'Yes': # only go through positive instances for i in range(len(item)-1): if(item[i] != constraint[i] and constraint[i] != '*'): if(constraint[i] == '/'): constraint[i] = item[i] else: constraint[i] = '*' return constraintdef main(): dataset, labels = CreateDataset() constraint = FINDS(dataset) print(constraint)if __name__ == "__main__": main() ID3算法 决策树：决策树是一种常用的分类与回归方法。决策树的模型为树形结构，在针对分类问题时，实际上就是针对输入数据的各个特征对实例进行分类的过程，即通过树形结构的模型，在每一层级上对特征值进行判断，进而到达决策树叶子节点，即完成分类过程。决策树的本质是概念学习。 信息熵（香浓熵）、条件熵和信息增益的概念 信息量：一件事发生的概率越小，我们说它所蕴含的信息量越大。 信息熵：信息熵就是所有可能发生的事件的信息量的期望 条件熵：表示在X给定条件下，Y的条件概率分布的熵对X的数学期望。![条件熵(https://s2.ax1x.com/2019/10/22/K36FBj.jpg) 信息增益：当我们用另一个变量X对原变量Y分类后，原变量Y的不确定性就会减小了(即熵值减小)。而熵就是不确定性，不确定程度减少了多少其实就是信息增益。这就是信息增益的由来，所以信息增益定义如下： 算法’python’实现:(用课件上的贷款数据集一直没法成功分类，于是参考了csdn博客的另一个数据集合代码) myTrees.py """ -*- coding: utf-8 -*- Created on 2019/10/22 11:59 myTrees @Author : Zhouy @Blog : www.crocodilezs.top"""from math import logimport operator# 原始数据def createDataSet(): dataSet = [[1, 1, 'yes'], [1, 1, 'yes'], [1, 0, 'no'], [0, 1, 'no'], [0, 1, 'no']] labels = ['no surfacing','flippers'] return dataSet, labels# 多数表决器# 列中相同值数量最多为结果def majorityCnt(classList): classCounts = &#123;&#125; for value in classList: if (value not in classCounts.keys()): classCounts[value] = 0 classCounts[value] += 1 sortedClassCount = sorted(classCounts.iteritems(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0]# 划分数据集# dataSet:原始数据集# axis:进行分割的指定列索引# value:指定列中的值def splitDataSet(dataSet, axis, value): retDataSet = [] for featDataVal in dataSet: if featDataVal[axis] == value: # 下面两行去除某一项指定列的值，很巧妙有没有 reducedFeatVal = featDataVal[:axis] reducedFeatVal.extend(featDataVal[axis + 1:]) retDataSet.append(reducedFeatVal) return retDataSet# 计算香农熵def calcShannonEnt(dataSet): # 数据集总项数 numEntries = len(dataSet) # 标签计数对象初始化 labelCounts = &#123;&#125; for featDataVal in dataSet: # 获取数据集每一项的最后一列的标签值 currentLabel = featDataVal[-1] # 如果当前标签不在标签存储对象里，则初始化，然后计数 if currentLabel not in labelCounts.keys(): labelCounts[currentLabel] = 0 labelCounts[currentLabel] += 1 # 熵初始化 shannonEnt = 0.0 # 遍历标签对象，求概率，计算熵 for key in labelCounts.keys(): prop = labelCounts[key] / float(numEntries) shannonEnt -= prop * log(prop, 2) return shannonEnt# 选出最优特征列索引def chooseBestFeatureToSplit(dataSet): # 计算特征个数，dataSet最后一列是标签属性，不是特征量 numFeatures = len(dataSet[0]) - 1 # 计算初始数据香农熵 baseEntropy = calcShannonEnt(dataSet) # 初始化信息增益，最优划分特征列索引 bestInfoGain = 0.0 bestFeatureIndex = -1 for i in range(numFeatures): # 获取每一列数据 featList = [example[i] for example in dataSet] # 将每一列数据去重 uniqueVals = set(featList) newEntropy = 0.0 for value in uniqueVals: subDataSet = splitDataSet(dataSet, i, value) # 计算条件概率 prob = len(subDataSet) / float(len(dataSet)) # 计算条件熵 newEntropy += prob * calcShannonEnt(subDataSet) # 计算信息增益 infoGain = baseEntropy - newEntropy if (infoGain &gt; bestInfoGain): bestInfoGain = infoGain bestFeatureIndex = i return bestFeatureIndex# 决策树创建def createTree(dataSet, labels): # 获取标签属性，dataSet最后一列，区别于labels标签名称 classList = [example[-1] for example in dataSet] # 树极端终止条件判断 # 标签属性值全部相同，返回标签属性第一项值 if classList.count(classList[0]) == len(classList): return classList[0] # 只有一个特征（1列） if len(dataSet[0]) == 1: return majorityCnt(classList) # 获取最优特征列索引 bestFeatureIndex = chooseBestFeatureToSplit(dataSet) # 获取最优索引对应的标签名称 bestFeatureLabel = labels[bestFeatureIndex] # 创建根节点 myTree = &#123;bestFeatureLabel: &#123;&#125;&#125; # 去除最优索引对应的标签名，使labels标签能正确遍历 del (labels[bestFeatureIndex]) # 获取最优列 bestFeature = [example[bestFeatureIndex] for example in dataSet] uniquesVals = set(bestFeature) for value in uniquesVals: # 子标签名称集合 subLabels = labels[:] # 递归 myTree[bestFeatureLabel][value] = createTree(splitDataSet(dataSet, bestFeatureIndex, value), subLabels) return myTree# 获取分类结果# inputTree:决策树字典# featLabels:标签列表# testVec:测试向量 例如：简单实例下某一路径 [1,1] =&gt; yes（树干值组合，从根结点到叶子节点）def classify(inputTree, featLabels, testVec): # 获取根结点名称，将dict转化为list firstSide = list(inputTree.keys()) # 根结点名称String类型 firstStr = firstSide[0] # 获取根结点对应的子节点 secondDict = inputTree[firstStr] # 获取根结点名称在标签列表中对应的索引 featIndex = featLabels.index(firstStr) # 由索引获取向量表中的对应值 key = testVec[featIndex] # 获取树干向量后的对象 valueOfFeat = secondDict[key] # 判断是子结点还是叶子节点：子结点就回调分类函数，叶子结点就是分类结果 # if type(valueOfFeat).__name__=='dict': 等价 if isinstance(valueOfFeat, dict): if isinstance(valueOfFeat, dict): classLabel = classify(valueOfFeat, featLabels, testVec) else: classLabel = valueOfFeat return classLabel# 将决策树分类器存储在磁盘中，filename一般保存为txt格式def storeTree(inputTree, filename): import pickle fw = open(filename, 'wb+') pickle.dump(inputTree, fw) fw.close()# 将瓷盘中的对象加载出来，这里的filename就是上面函数中的txt文件def grabTree(filename): import pickle fr = open(filename, 'rb') return pickle.load(fr) treePlotter.py """ -*- coding: utf-8 -*- Created on 2019/10/22 12:00 treePlotter @Author : Zhouy @Blog : www.crocodilezs.top"""import matplotlib.pyplot as pltdecisionNode = dict(boxstyle="sawtooth", fc="0.8")leafNode = dict(boxstyle="round4", fc="0.8")arrow_args = dict(arrowstyle="&lt;-")# 获取树的叶子节点def getNumLeafs(myTree): numLeafs = 0 # dict转化为list firstSides = list(myTree.keys()) firstStr = firstSides[0] secondDict = myTree[firstStr] for key in secondDict.keys(): # 判断是否是叶子节点（通过类型判断，子类不存在，则类型为str；子类存在，则为dict） if type(secondDict[ key]).__name__ == 'dict': # test to see if the nodes are dictonaires, if not they are leaf nodes numLeafs += getNumLeafs(secondDict[key]) else: numLeafs += 1 return numLeafs# 获取树的层数def getTreeDepth(myTree): maxDepth = 0 # dict转化为list firstSides = list(myTree.keys()) firstStr = firstSides[0] secondDict = myTree[firstStr] for key in secondDict.keys(): if type(secondDict[ key]).__name__ == 'dict': # test to see if the nodes are dictonaires, if not they are leaf nodes thisDepth = 1 + getTreeDepth(secondDict[key]) else: thisDepth = 1 if thisDepth &gt; maxDepth: maxDepth = thisDepth return maxDepthdef plotNode(nodeTxt, centerPt, parentPt, nodeType): createPlot.ax1.annotate(nodeTxt, xy=parentPt, xycoords='axes fraction', xytext=centerPt, textcoords='axes fraction', va="center", ha="center", bbox=nodeType, arrowprops=arrow_args)def plotMidText(cntrPt, parentPt, txtString): xMid = (parentPt[0] - cntrPt[0]) / 2.0 + cntrPt[0] yMid = (parentPt[1] - cntrPt[1]) / 2.0 + cntrPt[1] createPlot.ax1.text(xMid, yMid, txtString, va="center", ha="center", rotation=30)def plotTree(myTree, parentPt, nodeTxt): # if the first key tells you what feat was split on numLeafs = getNumLeafs(myTree) # this determines the x width of this tree depth = getTreeDepth(myTree) firstSides = list(myTree.keys()) firstStr = firstSides[0] # the text label for this node should be this cntrPt = (plotTree.xOff + (1.0 + float(numLeafs)) / 2.0 / plotTree.totalW, plotTree.yOff) plotMidText(cntrPt, parentPt, nodeTxt) plotNode(firstStr, cntrPt, parentPt, decisionNode) secondDict = myTree[firstStr] plotTree.yOff = plotTree.yOff - 1.0 / plotTree.totalD for key in secondDict.keys(): if type(secondDict[ key]).__name__ == 'dict': # test to see if the nodes are dictonaires, if not they are leaf nodes plotTree(secondDict[key], cntrPt, str(key)) # recursion else: # it's a leaf node print the leaf node plotTree.xOff = plotTree.xOff + 1.0 / plotTree.totalW plotNode(secondDict[key], (plotTree.xOff, plotTree.yOff), cntrPt, leafNode) plotMidText((plotTree.xOff, plotTree.yOff), cntrPt, str(key)) plotTree.yOff = plotTree.yOff + 1.0 / plotTree.totalD# if you do get a dictonary you know it's a tree, and the first element will be another dict# 绘制决策树def createPlot(inTree): fig = plt.figure(1, facecolor='white') fig.clf() axprops = dict(xticks=[], yticks=[]) createPlot.ax1 = plt.subplot(111, frameon=False, **axprops) # no ticks # createPlot.ax1 = plt.subplot(111, frameon=False) #ticks for demo puropses plotTree.totalW = float(getNumLeafs(inTree)) plotTree.totalD = float(getTreeDepth(inTree)) plotTree.xOff = -0.5 / plotTree.totalW plotTree.yOff = 1.0 plotTree(inTree, (0.5, 1.0), '') plt.show()# 绘制树的根节点和叶子节点（根节点形状：长方形，叶子节点：椭圆形）# def createPlot():# fig = plt.figure(1, facecolor='white')# fig.clf()# createPlot.ax1 = plt.subplot(111, frameon=False) #ticks for demo puropses# plotNode('a decision node', (0.5, 0.1), (0.1, 0.5), decisionNode)# plotNode('a leaf node', (0.8, 0.1), (0.3, 0.8), leafNode)# plt.show()def retrieveTree(i): listOfTrees = [&#123;'no surfacing': &#123;0: 'no', 1: &#123;'flippers': &#123;0: 'no', 1: 'yes'&#125;&#125;&#125;&#125;, &#123;'no surfacing': &#123;0: 'no', 1: &#123;'flippers': &#123;0: &#123;'head': &#123;0: 'no', 1: 'yes'&#125;&#125;, 1: 'no'&#125;&#125;&#125;&#125; ] return listOfTrees[i]# thisTree = retrieveTree(0)# createPlot(thisTree)# createPlot()# myTree = retrieveTree(0)# numLeafs =getNumLeafs(myTree)# treeDepth =getTreeDepth(myTree)# print(u"叶子节点数目：%d"% numLeafs)# print(u"树深度：%d"%treeDepth) testTrees_3.py """ -*- coding: utf-8 -*- Created on 2019/10/22 12:00 testTrees_3 @Author : Zhouy @Blog : www.crocodilezs.top"""import myTrees as mtimport treePlotter as tp#测试dataSet, labels = mt.createDataSet()#copy函数：新开辟一块内存，然后将list的所有值复制到新开辟的内存中labels1 = labels.copy()#createTree函数中将labels1的值改变了，所以在分类测试时不能用labels1myTree = mt.createTree(dataSet,labels1)#保存树到本地mt.storeTree(myTree,'myTree.txt')#在本地磁盘获取树myTree = mt.grabTree('myTree.txt')print (u"决策树结构：%s"%myTree)#绘制决策树print(u"绘制决策树：")tp.createPlot(myTree)numLeafs =tp.getNumLeafs(myTree)treeDepth =tp.getTreeDepth(myTree)print(u"叶子节点数目：%d"% numLeafs)print(u"树深度：%d"%treeDepth)#测试分类 简单样本数据3列labelResult =mt.classify(myTree,labels,[1,1])print(u"[1,1] 测试结果为：%s"%labelResult)labelResult =mt.classify(myTree,labels,[1,0])print(u"[1,0] 测试结果为：%s"%labelResult)]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>FindS</tag>
        <tag>ID3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机系统基础实验一、Linux环境和GCC工具链]]></title>
    <url>%2F201910%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C%E4%B8%80%2F</url>
    <content type="text"><![CDATA[Linux操作系统概述和实验环境介绍操作系统概念OS是管理和控制计算机硬件与软件资源的计算机程序，是直接在“裸机”上的最基本的系统软件。 Linux的应用 服务器端：Linux非常稳定，特别适合大型企业生产环境。 作为网络平台的后端服务器被使用。 作为应用服务器、数据库服务器被使用：解决海量数据、高并发的问题； 作为嵌入式操作系统被使用：智能控制、自动化、物联网等领域。 Linux历史追溯到UNIX简单地说，Linux是对UNIX的重新实现。世界各地的Linux开发人员借鉴了UNIX的技术和用户界面，并且融入了很多独创的技术。Linux不属于BSD和AT&amp;T风格的UNIX中的任何一种。因此，严格来说，Linux是有别于UNIX的另一种操作系统。 Linux简介Linux发现行版本举例：Ubuntu、redhat 操作系统的三个部分内核操作系统五大管理功能一般都由操作系统内核负责。 外壳 外壳程序负责接收用户操作，提供与 用户的交互界面。 一般操作系统提供给用户的界面主要有两种：文本界面、GUI图形界面。管理工具和附属软件 操作系统的功能 CPU的控制与管理：处理器管理 内存的分配与管理：存储器管理 外部设备的控制与管理：设备管理 文件管理 作业管理和控制：用户接口 Shell 外壳程序对用户的输入命令进行解释，为用户提供一种通过操作系统使用计算机的操作环境。 Windows的图形界面，由一个成为Explorer的模块解释用户的输入。 如DOS的命令行界面，Command.com是对命令输入进行解释的外壳程序(Linux的Shell) Shell命令：从命令行输入语句，每输入一次就能得到一次响应，这些语句就是shell命令。 Shell程序：又称Shell脚本。（把一系列的shell命令，按照一定的语法规则和控制结构，组织在一个文件中，然后由内核来一条接一条地解释和执行这些命令，这个文件就是shell程序，类似DOS/Winsows中的。bat批处理文件。） [username@computername ~]$user name为当前用户名，computername 为当前计算机名 ，$表示当前用户是一般用户。 ssh secure shell把Linux终端搬到Windows下，连接到BUPT1.Shell常用命令目录操作命令目录操作命令能够对当前的目录进行查看、创建、删除，以及显示当前工作目录和改变当前目录等操作。 1. /etc - 系统所需的重要配置和管理文件 2. /dev - 存放device file（装置文件） 3. /boot - 存放系统激活的相关文件，不可任意删除。 4. /home - 登陆用户的主目录 5. /lib - 存放系统激活时需要的系统函数库 6. /usr/lib - 存放一些应用程序的共享函数库 7. /mnt - 系统默认的挂载点(mount point) 8. /proc - 虚拟文件系统，不占用硬盘空间，目录下的文件均放置于内存中 9. /root - 系统管理用户root的主目录 10. /bin - 存放一些系统启动时所需的普通程序和系统程序 11. /tmp - 存放临时文件 12. /var - 存放被系统修改过的数据。 常用的目录操作命令包括： pwd 打印当前工作目录 cd 改变当前所在目录 ls 查看当前目录下的内容 dir 类似ls命令 mkdir 创建目录 rmdir 删除空目录 文件操作命令 在命令行环境下对文件进行操作将比在图形环境下操作文件更加快捷和高效 文件操作主要包括：搜索文件、复制和移动文件、删除文件以及合并文件内容 常用文件操作命令： cat more less head tail cp mv rm find touch ln 使用帮助命令 man 命令名 whatis 命令名 help 命令名：适用于部分命令 Vi编辑器Vi简介 Vi编辑器是Visual interface的简称，它可以执行输出、删除、查找、替换、块操作等众多文本操作 Vi不是一个排版程序，只是一个文本编辑程序。 是全屏幕文本编辑器，没有菜单，只有命令。 Vi的基本概念 命令行模式（command mode）控制屏幕光标的移动、字符、字或行的删除、移动复制某区段及进入Insert mode下，或者到last line mode。 插入模式（Insert mode）只有在Insert mode下，才可以做文字输入，按ESC键可回到命令行模式。 底行模式(last line mode)将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号。 $ vi test.txt 即可进入vi（打开或新建文件） 操作： 命令行模式 —-&gt;(i) 插入模式 插入模式 —-&gt;（ESC） 命令行模式 如果处于「插入模式」，就只能一直输入文字，如果发现输错了字想用光标往回移动将该字删除，就得先回到「命令行模式」 在「命令行模式」下，按下：进入底行模式: w filename: wq: q! GCC工具链简介 GCC编译器能将C和C++语言源程序、汇编程序编译、链接成可执行文件。 使用GCC编译器时，编译过程可以被细分为四个阶段： 预处理(Pre-Processing) 编译(Compiling) 汇编(Assembling) 链接(Linking) GDB的概述GDB是一款GNU开发组织并发布的UNIX/Linux下的程序调试工具。它使你能够在程序运行时观察程序的内部结构和内存的使用情况。以下是GDB提供的一些功能： 监视程序中变量的值 设置断点以使程序在指定的代码行上停止运行 能逐行执行代码 Objdump简介Objdump是以一种可阅读的格式让你更多地了解二进制文件可能带有地附加信息。对于想进一步了解系统地程序员，这个命令没有没有更多意义，对于想进一步了解系统的程序员，应该掌握这种工具，至少你可以自己写写shellcode了，或者看看人家给的exploit中的shellcode是什么东西。把C语言源代码编译链接生成的可执行程序反汇编后得到对应的汇编代码，可以帮助我们理解C语言和汇编语言之间的对应关系。非常有助于深入理解C语言 至此，已经完成了计算机系统基础第一次实验的理论部分，其中有太多的东西还需要自己去实践、接下来开始实验！]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[KNN与Naive_Bayes代码实现]]></title>
    <url>%2F201911%2FKNN%E4%B8%8ENaive_Bayes%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[KNN与Naive_Bayes代码实现任务要求采用Python实现分类算法： 不得借助现成的工具包调库，例如SKlearn 至少实现k-近邻，朴素贝叶斯，逻辑回归，决策树与支持向量机中的其中一个算法。k-临近，朴素贝叶斯相对较简单，逻辑回归，决策树与支持向量机相对较难。 对breast cancer数据集调用编写的函数进行分类演示。 能力强的可以多实现几种算法 算法实现——kNN利用breast_cancer中的数据，实现kNN算法。 导入数据集，并分为训练集和测试集 实现kNN算法 对每一个测试集中的实例，计算它距离训练集中的点的距离 根据选定的k值，选择距离最近的k个点数量更多的“标签” 算法效果测试，测试算法的精确度，和SKlearn提供的kNN算法进行比较。 源码导入数据# 导入数据集from sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn import neighborsdatasets = datasets.load_breast_cancer()X = datasets.data;y = datasets.target;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)k = 5# print(datasets.DESCR)# malignant - 0, benign - 1y_predict = [] kNN算法实现def knn(X_train, y_train, X_test, y_predict): ''' 对测试集的数据进行预测，得到的结果与y_test比较。用欧式距离进行计算。 ''' for test_data in X_test: first_k_instance = [] for i in range(len(X_train)): distance = 0; for attributes_no in range(len(X_train[0])): distance += (test_data[attributes_no] - X_train[i][attributes_no]) ** 2 Euclid_distance = distance ** 0.5 #print(Euclid_distance) if i &lt; k: first_k_instance.append((i, Euclid_distance)) elif Euclid_distance &lt; first_k_instance[k-1][1]: first_k_instance[k-1] = (i, Euclid_distance) first_k_instance = sorted(first_k_instance, key = lambda x:x[1]) #print(first_k_instance) # 现在得到了距离测试点最近的k个点，用多数表决器来判断测试点是良性还是恶性 benign = 0 malignant = 0 for instance in first_k_instance: if y_train[instance[0]] == 0: malignant += 1 else: benign += 1 if malignant &gt;= benign: y_predict.append(0) else: y_predict.append(1) 精确度计算函数def accuracy(y_predict, y_test): correct = 0 for i in range(len(y_predict)): if y_predict[i] == y_test[i]: correct += 1 accuracy_rate = correct / len(y_predict) return correct, accuracy_rate 主函数def main(): knn(X_train, y_train, X_test, y_predict) correct, accuracy_rate = accuracy(y_predict, y_test) print(y_predict) print("kNN模型测试集预测的准确率为：%.3f" % accuracy_rate); KNN = neighbors.KNeighborsClassifier(n_neighbors = 5) KNN.fit(X_train, y_train) print("sklearn库中kNN模型预测的准确率为：%.3f" % KNN.score(X_test, y_test)); if __name__ == '__main__': main() [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1] kNN模型测试集预测的准确率为：0.947 sklearn库中kNN模型预测的准确率为：0.947 通过实验结果可以发现，我们实现的kNN与SKlearn中提供的kNN效果一致。我们可以通过设置k的值和转换寻找相似样本的策略（将欧式距离替换为匹配系数或Jaccard等），进一步优化精确度。 算法实现——Naive_Bayes利用breast_cancer中的数据，实现Naive_Bayes算法。 导入数据集，并分为训练集和测试集 实现Naive Bayes算法 把连续的属性划分区间，计算正例和反例落在每个属性的每个区间的个数 计算概率值，预测测试集的标签 算法效果测试，测试算法的精确度，和SKlearn提供的Naive Bayes算法进行比较。 源码导入数据# load datasetsfrom sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn import naive_bayesdatasets = datasets.load_breast_cancer()X = datasets.data;y = datasets.target;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)#print(datasets.DESCR)#malignant - 0, benign - 1y_predict = [] 由于30个属性全部都是连续值，我们使用朴素贝叶斯的时候需要将属性的值的范围分为几个区间，计算实例落在该区间的概率。这里每个属性我都以平均值作为间隔来划分区间。 对每个连续的属性划分区间并统计个数def distribution(X_train, y_train): ''' 先把区间分好，然后再计算概率。 ''' #===============区间划分====================# attributes_max_min_mean = [] # 记录所有属性的最大值、最小值和平均值 for i in range(len(X_train[0])): #属性循环 #section = [max, min, mean] section = [X_train[0][i], X_train[0][i], 0] for instance in X_train: #训练样例循环 if instance[i] &gt; section[0]: section[0] = instance[i] if instance[i] &lt; section[1]: section[1] = instance[i] section[2] += instance[i] section[2] /= len(X_train) attributes_max_min_mean.append(section) #=========计算每个属性落在每个区间的样例个数=========# instance_distribution = [] for i in range(len(X_train[0])): #属性循环 smaller_benign = 0 larger_benign = 0 smaller_malignant = 0 larger_malignant = 0 for j in range(len(X_train)): #训练样例循环 if X_train[j][i] &gt; attributes_max_min_mean[i][2]: if y_train[j] == 1: larger_benign += 1 else: larger_malignant +=1 elif y_train[j] == 1: smaller_benign += 1 else: smaller_malignant += 1 instance_distribution.append([smaller_benign, larger_benign, smaller_malignant, larger_malignant]) return instance_distribution, attributes_max_min_mean 实现朴素贝叶斯def Naive_Bayes(X_test, y_predict, instance_distribution,attributes_max_min_mean): for test_data in X_test: #测试样例循环 #训练集中良性和恶性肿瘤的数量 malignant = instance_distribution[0][2] + instance_distribution[0][3] benign = instance_distribution[0][0] + instance_distribution[0][1] #概率初始化，下面计算每个属性的概率 p_xc0 = 1 p_xc1 = 1 for i in range(len(X_train[0])): # 属性循环 if test_data[i] &gt; attributes_max_min_mean[i][2]: p_xc0 *= instance_distribution[i][3] / malignant p_xc1 *= instance_distribution[i][1] / benign else: p_xc0 *= instance_distribution[i][2] / malignant p_xc1 *= instance_distribution[i][0] / benign p0 = p_xc0 * malignant / (malignant + benign) p1 = p_xc1 * benign / (malignant + benign) if p0 &gt; p1: y_predict.append(0) else: y_predict.append(1) 计算精确度def accuracy(y_predict, y_test): correct = 0 for i in range(len(y_predict)): if y_predict[i] == y_test[i]: correct += 1 accuracy_rate = correct / len(y_predict) return correct, accuracy_rate 主函数def main(): instance_distribution, attributes_max_min_mean = distribution(X_train, y_train) Naive_Bayes(X_test, y_predict, instance_distribution, attributes_max_min_mean) correct, accuracy_rate = accuracy(y_predict, y_test) print(y_predict) print("Naive Bayes模型测试集预测的准确率为：%.3f" % accuracy_rate); bayes = naive_bayes.GaussianNB() bayes.fit(X_train, y_train) print("sklearn库中Naive Bayes模型预测的准确率为：%.3f" % bayes.score(X_test, y_test)); if __name__ == '__main__': main() [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1] Naive Bayes模型测试集预测的准确率为：0.930 sklearn库中Naive Bayes模型预测的准确率为：0.924 通过实验结果可以发现，我们实现的朴素贝叶斯比SKlearn提供的朴素贝叶斯效果更好。我们可以通过尝试各属性不同的区间划分，进一步优化精确度。而SKlearn提供的朴素贝叶斯效果不好的原因可能就是将连续值转换为离散值的区间划分没有做好。]]></content>
      <categories>
        <category>数据科学导论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CS229-机器学习-吴恩达（一）]]></title>
    <url>%2F201910%2FCS229-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%90%B4%E6%81%A9%E8%BE%BE%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1-1 Welcome to machine learning! Machine learning is the science of getting computers to learn without being explicitly programmed. Machine Learning Honor Code 1-2 Welcomemachine Learning - Grew out of work in AI - New capability for computers Exmaple: - Database mining Large datasets from growth of automation/web. E.g. Web click data, medical records, biology, engineering - Applicaitons can&#39;t program by hand. E.g., Autonomous helicopter, handwriting recognition, most of Natural Language Processing(NLP), Computer Vision. - Self customizing programs E.g., Amazon, Netflix product recommendations - Understanding human learning(brain, real AI). 1-3 What is machine learning?To know what is machine learning and give u a sense of when u want to use machine learning. Machine learning defination Arthur Samuel(1959). Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed. Tom Mitchell(1998) Well-posed Learning Problem: A computer Program is said to learn from experience $E$ with respect to some task $T$ and some performance measure $P$, if its performance on $T$ as measured by $P$ improves with experience $E$. Machine learning algorithms Supervised learning Unsupervised learning Others: Reinforcement learning(强化学习), recommender systems(推荐系统). Also talk about practical advice for applying learning algorithms. 1-4 Supevised learningSupervised learning:“right answers” given. Regression: Predict continuous valued output.(Used: house price) Classification: Discrete valued output(0 or 1)(Used: Breast cancer) How do you deal with an infinite number of features, and how do you even store an infinite number of things on the computer?SVM will be a neat mathematical trick that will allow a computer to deal with an infinite number of features. 1-5 Unsupervised LearningData does not have any labels.Used: Google News.(Cluster the news of the same topic) DNA microarray data. Organize large computer clusters. Social network analysis Market segmentation Astronomical data analysis(how galaxies are formed.) Clustering is just one type of Unsupervised Learning. Cocktail Party problemrecognize and separate the audio.when you use the right programming enviroment, many learning algorithms can be really shot programs. If you use Octave as your learning tool and as your prorotyping tool(原型工具), it will let you learn and prototype learning algorithms much quickly.]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Fisher算法&SVM&K-Means及其优化]]></title>
    <url>%2F201911%2FFisher%E7%AE%97%E6%B3%95%26SVM%26K-Means%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[Fisher算法&amp;SVM&amp;K-Means及其优化部分源码的参考资料已注明 fisher算法及其实现 请实现fisher算法，并采用自己随机生成2类数据（每类100个）的方式，验证自己的算法。参考资料:https://blog.csdn.net/pengjian444/article/details/71138003 数据生成from sklearn.datasets import make_multilabel_classificationimport numpy as npx, y = make_multilabel_classification(n_samples=200, n_features=2, n_labels=1, n_classes=1, random_state=2)# 根据类别分类index1 = np.array([index for (index, value) in enumerate(y) if value == 0]) # 获取类别1的indexsindex2 = np.array([index for (index, value) in enumerate(y) if value == 1]) # 获取类别2的indexsc_1 = x[index1] # 类别1的所有数据(x1, x2) in X_1c_2 = x[index2] # 类别2的所有数据(x1, x2) in X_2 make_multilabel_classification方法参数说明n_samples:样本的数量。n_features：样本的特征，这里是在二维平面中的点，所以为2.n_labels：每个实例的平均标签数。n_classes：分类问题的分类数。random_state：设置随机数种子，保证每次产生相同的数据。 enumerate()函数说明enumerate()函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。 fisher算法实现def cal_cov_and_avg(samples): u1 = np.mean(samples, axis=0) cov_m = np.zeros((samples.shape[1], samples.shape[1])) for s in samples: t = s - u1 cov_m += t * t.reshape(2, 1) return cov_m, u1def fisher(c_1, c_2): cov_1, u1 = cal_cov_and_avg(c_1) cov_2, u2 = cal_cov_and_avg(c_2) s_w = cov_1 + cov_2 u, s, v = np.linalg.svd(s_w) # 奇异值分解 s_w_inv = np.dot(np.dot(v.T, np.linalg.inv(np.diag(s))), u.T) return np.dot(s_w_inv, u1 - u2) np.mean：计算制定轴上的平均值。np.zeros：给定形状和类型确定的数组，并用0填充。 判定类别def judge(sample, w, c_1, c_2): u1 = np.mean(c_1, axis=0) u2 = np.mean(c_2, axis=0) center_1 = np.dot(w.T, u1) center_2 = np.dot(w.T, u2) pos = np.dot(w.T, sample) return abs(pos - center_1) &lt; abs(pos - center_2)w = fisher(c_1, c_2) # 调用函数，得到参数wout = judge(c_1[1], w, c_1, c_2) # 判断所属的类别# print(out) 绘图import matplotlib.pyplot as pltplt.scatter(c_1[:, 0], c_1[:, 1], c='#99CC99')plt.scatter(c_2[:, 0], c_2[:, 1], c='#FFCC00')line_x = np.arange(min(np.min(c_1[:, 0]), np.min(c_2[:, 0])), max(np.max(c_1[:, 0]), np.max(c_2[:, 0])), step=1)line_y = - (w[0] * line_x) / w[1]plt.plot(line_x, line_y)plt.show() &lt;Figure size 640x480 with 1 Axes&gt; SVM优化对偶问题的详细推导过程 请给出SVM优化对偶问题的详细推导过程；并给出只有2维特征情况下的，对偶问题的优化求解过程（可以采用lagrange方法，也可以采用其他方法。）参考资料：https://zhuanlan.zhihu.com/p/49331510 SVM算法的实现 请实现SVM算法；并采用自己随机生成2类线性可分数据（每类100个）的方式验证自己的算法。参考资料：https://www.jb51.net/article/131580.htm from sklearn import svm import numpy as np import matplotlib.pyplot as plt np.random.seed(0) x = np.r_[np.random.randn(100,2)-[2,2],np.random.randn(100,2)+[2,2]] #正态分布来产生数字,20行2列*2 y = [0]*100+[1]*100 #100个class0，100个class1 clf = svm.SVC(kernel='linear') clf.fit(x,y) w = clf.coef_[0] #获取w a = -w[0]/w[1] #斜率 #画图划线 xx = np.linspace(-5,5) #(-5,5)之间x的值 yy = a*xx-(clf.intercept_[0])/w[1] #xx带入y，截距 #画出与点相切的线 b = clf.support_vectors_[0] yy_down = a*xx+(b[1]-a*b[0]) b = clf.support_vectors_[-1] yy_up = a*xx+(b[1]-a*b[0]) print("W:",w) print("a:",a) print("support_vectors_:",clf.support_vectors_) print("clf.coef_:",clf.coef_) plt.figure(figsize=(8,4)) plt.plot(xx,yy) plt.plot(xx,yy_down) plt.plot(xx,yy_up) plt.scatter(clf.support_vectors_[:,0],clf.support_vectors_[:,1],s=80) plt.scatter(x[:,0],x[:,1],c=y,cmap=plt.cm.Paired) #[:，0]列切片，第0列 plt.axis('tight') plt.show() W: [0.95070185 1.15607502] a: -0.8223530762163854 support_vectors_: [[-0.51174781 -0.10411082] [ 0.16323595 -0.66347205] [ 2.39904635 -0.77259276] [ 0.66574153 0.65328249] [-0.25556423 0.97749316]] clf.coef_: [[0.95070185 1.15607502]] k-means算法的实现 请实现k-means的算法；并采用自己随机生成3类数据（每类100个）的方式，验证自己的算法。参考资料1:https://cloud.tencent.com/developer/article/1465020参考资料2:https://blog.csdn.net/weixin_42029738/article/details/81978038 ''' K-Means clustering algorithms'''print(__doc__)import timeimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster import MiniBatchKMeans, KMeansfrom sklearn.metrics.pairwise import pairwise_distances_argminfrom sklearn.datasets.samples_generator import make_blobs# ############################################################################## Generate sample datanp.random.seed(0)batch_size = 45centers = [[1, 1], [-1, -1], [1, -1]] # 初始化3个中心n_clusters = len(centers) # 聚类的数目为3# 产生10000组二维数据，以上面三个点为中心，以(-10,10)为边界，数据集的标准差是0.7X, labels_true = make_blobs(n_samples=10000, centers=centers, cluster_std=0.7)# ############################################################################## Compute clustering with Meansk_means = KMeans(init='k-means++', n_clusters=3, n_init=10)t0 = time.time()k_means.fit(X)# 使用k-means对300组数据集训练算法的时间消耗t_batch = time.time() - t0# ############################################################################## Plot resultfig = plt.figure(figsize=(8, 3))fig.subplots_adjust(left=0.02, right=0.98, bottom=0.05, top=0.9)colors = ['#4EACC5', '#FF9C34', '#4E9A06']# We want to have the same colors for the same cluster from the# MiniBatchKMeans and the KMeans algorithm. Let's pair the cluster centers per# closest one.k_means_cluster_centers = np.sort(k_means.cluster_centers_, axis=0)k_means_labels = pairwise_distances_argmin(X, k_means_cluster_centers)# KMeansax = fig.add_subplot(1, 3, 1)for k, col in zip(range(n_clusters), colors): my_members = k_means_labels == k cluster_center = k_means_cluster_centers[k] ax.plot(X[my_members, 0], X[my_members, 1], 'w', markerfacecolor=col, marker='.') ax.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col, markeredgecolor='k', markersize=6)ax.set_title('KMeans')ax.set_xticks(())ax.set_yticks(())plt.text(-3.5, 1.8, 'train time: %.2fs\ninertia: %f' % ( t_batch, k_means.inertia_))plt.show() K-Means clustering algorithms k-means算法的改进 请给出三种k-means算法在大数据量时的改进方法，并分析改进的结果。改进方法包括： k-means++（改变中心点的选取方法） elkan K-Means（减少不必要的距离计算） ISODATA算法（在运行过程中根据实际情况调整聚类中心数k） Mini Batch k-means算法（采用部分样本，舍弃一些精确度大大加快收敛速度） 其中1和4改进方法给出了源码和对比。 k-means++（改变中心点的选择方法）参考资料1:https://blog.csdn.net/github_39261590/article/details/76910689参考资料2:https://www.cnblogs.com/yszd/p/9672885.htmlk-means++算法选择初始seeds的基本思想就是：初始的聚类中心之间的相互距离要尽可能的远。 算法步骤： 从输入的数据点集合中随机选择一个点作为第一个聚类中心 对于数据集中的每一个点x，计算它与最近聚类中心(指已选择的聚类中心)的距离D(x) 选择一个新的数据点作为新的聚类中心，选择的原则是：D(x)较大的点，被选取作为聚类中心的概率较大 重复2和3直到k个聚类中心被选出来 利用这k个初始的聚类中心来运行标准的k-means算法 import numpy as npimport matplotlib.pyplot as pltimport sklearn.datasets as dsimport matplotlib.colorsfrom sklearn.cluster import KMeansfrom sklearn.cluster import MiniBatchKMeansdef expand(a, b): d = (b - a) * 0.1 return a-b, b+dif __name__ == "__main__": N = 400 centers = 4 data, y = ds.make_blobs(N, n_features=2, centers=centers, random_state=2) data2, y2 = ds.make_blobs(N, n_features=2, centers=centers, cluster_std=(1, 2.5, 0.5, 2), random_state=2) # 按行拼接numpy数组 data3 = np.vstack((data[y == 0][:], data[y == 1][:50], data[y == 2][:20], data[y == 3][:5])) y3 = np.array([0] * 100 + [1] * 50 + [2] * 20 + [3] * 5) cls = KMeans(n_clusters=4, init='k-means++') y_hat = cls.fit_predict(data) y2_hat = cls.fit_predict(data2) y3_hat = cls.fit_predict(data3) m = np.array(((1, 1),(1, 3))) data_r = data.dot(m) y_r_hat = cls.fit_predict(data_r) matplotlib.rcParams['font.sans-serif'] = [u'SimHei'] matplotlib.rcParams['axes.unicode_minus'] = False cm = matplotlib.colors.ListedColormap(list('rgbm')) plt.figure(figsize=(9, 10), facecolor='w') plt.subplot(421) plt.title(u'原始数据') plt.scatter(data[:, 0], data[:, 1], c=y, s=30, cmap=cm, edgecolors='none') x1_min, x2_min = np.min(data, axis=0) x1_max, x2_max = np.max(data, axis=0) x1_min, x1_max = expand(x1_min, x1_max) x2_min, x2_max = expand(x2_min, x2_max) plt.xlim((x1_min, x1_max)) plt.ylim((x2_min, x2_max)) plt.grid(True) plt.subplot(422) plt.title(u'KMeans++聚类') plt.scatter(data[:, 0], data[:, 1], c=y_hat, s=30, cmap=cm, edgecolors='none') plt.xlim((x1_min, x1_max)) plt.ylim((x2_min, x2_max)) plt.grid(True) elkan k-means算法参考资料:https://blog.csdn.net/u014465639/article/details/71342072elkan K-Means利用了两边之和大于等于第三边,以及两边之差小于第三边的三角形性质，来减少距离的计算。第一种规律是对于一个样本点和两个质心。如果我们预先计算出了这两个质心之间的距离，则如果计算发现,我们立即就可以知道。此时我们不需要再计算,也就是说省了一步距离计算。第二种规律是对于一个样本点和两个质心。我们可以得到。这个从三角形的性质也很容易得到。利用上边的两个规律，elkan K-Means比起传统的K-Means迭代速度有很大的提高。但是如果我们的样本的特征是稀疏的，有缺失值的话，这个方法就不使用了，此时某些距离无法计算，则不能使用该算法。 ISODATA算法参考资料1:https://blog.csdn.net/houston11235/article/details/8511379参考资料2:https://www.cnblogs.com/huadongw/p/4101422.htmlk-means 的一个缺点就是必须指定聚类的个数，这个有些时候并不太行得通。于是就要求最好这个类别的个数也可以改变，这就形成了 isodata 方法，通过设定一些类别分裂和合并的条件，在聚类的过程中自动增减类别的数目。当然这也带来了一个问题，就是这个条件有时候并不那么好给出。当然 isodata 在很多情况下还是可以得到比较靠谱的结果。 Mini Batch k-means（用一部分样本做传统的k-means，舍弃一部分精确度大大提高收敛速度）参考资料1:https://cloud.tencent.com/developer/article/1465020Mini Batch KMeans算法是一种能尽量保持聚类准确性下但能大幅度降低计算时间的聚类模型，采用小批量的数据子集减少计算时间，同时仍试图优化目标函数，这里所谓的Mini Batch是指每次训练算法时随机抽取的数据子集，采用这些随机选取的数据进行训练，大大的减少了计算的时间，减少的KMeans算法的收敛时间，但要比标准算法略差一点，建议当样本量大于一万做聚类时，就需要考虑选用Mini Batch KMeans算法。 ''' Comparison of the K-Means and MiniBatchKMeans clustering algorithms'''print(__doc__)import timeimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster import MiniBatchKMeans, KMeansfrom sklearn.metrics.pairwise import pairwise_distances_argminfrom sklearn.datasets.samples_generator import make_blobs# ############################################################################## Generate sample datanp.random.seed(0)batch_size = 45centers = [[1, 1], [-1, -1], [1, -1]] # 初始化3个中心n_clusters = len(centers) # 聚类的数目为3# 产生10000组二维数据，以上面三个点为中心，以(-10,10)为边界，数据集的标准差是0.7X, labels_true = make_blobs(n_samples=10000, centers=centers, cluster_std=0.7)# ############################################################################## Compute clustering with Meansk_means = KMeans(init='k-means++', n_clusters=3, n_init=10)t0 = time.time()k_means.fit(X)# 使用k-means对300组数据集训练算法的时间消耗t_batch = time.time() - t0# ############################################################################## Compute clustering with MiniBatchKMeansmbk = MiniBatchKMeans(init='k-means++', n_clusters=3, batch_size=batch_size, n_init=10, max_no_improvement=10, verbose=0)t0 = time.time()mbk.fit(X)# 使用MiniBatchKMeans对300组数据集训练算法的时间消耗t_mini_batch = time.time() - t0# ############################################################################## Plot resultfig = plt.figure(figsize=(8, 3))fig.subplots_adjust(left=0.02, right=0.98, bottom=0.05, top=0.9)colors = ['#4EACC5', '#FF9C34', '#4E9A06']# We want to have the same colors for the same cluster from the# MiniBatchKMeans and the KMeans algorithm. Let's pair the cluster centers per# closest one.k_means_cluster_centers = np.sort(k_means.cluster_centers_, axis=0)mbk_means_cluster_centers = np.sort(mbk.cluster_centers_, axis=0)k_means_labels = pairwise_distances_argmin(X, k_means_cluster_centers)mbk_means_labels = pairwise_distances_argmin(X, mbk_means_cluster_centers)order = pairwise_distances_argmin(k_means_cluster_centers, mbk_means_cluster_centers)# KMeansax = fig.add_subplot(1, 3, 1)for k, col in zip(range(n_clusters), colors): my_members = k_means_labels == k cluster_center = k_means_cluster_centers[k] ax.plot(X[my_members, 0], X[my_members, 1], 'w', markerfacecolor=col, marker='.') ax.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col, markeredgecolor='k', markersize=6)ax.set_title('KMeans')ax.set_xticks(())ax.set_yticks(())plt.text(-3.5, 1.8, 'train time: %.2fs\ninertia: %f' % ( t_batch, k_means.inertia_))# MiniBatchKMeansax = fig.add_subplot(1, 3, 2)for k, col in zip(range(n_clusters), colors): my_members = mbk_means_labels == order[k] cluster_center = mbk_means_cluster_centers[order[k]] ax.plot(X[my_members, 0], X[my_members, 1], 'w', markerfacecolor=col, marker='.') ax.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col, markeredgecolor='k', markersize=6)ax.set_title('MiniBatchKMeans')ax.set_xticks(())ax.set_yticks(())plt.text(-3.5, 1.8, 'train time: %.2fs\ninertia: %f' % (t_mini_batch, mbk.inertia_))# Initialise the different array to all Falsedifferent = (mbk_means_labels == 4)ax = fig.add_subplot(1, 3, 3)for k in range(n_clusters): different += ((k_means_labels == k) != (mbk_means_labels == order[k]))identic = np.logical_not(different)ax.plot(X[identic, 0], X[identic, 1], 'w', markerfacecolor='#bbbbbb', marker='.')ax.plot(X[different, 0], X[different, 1], 'w', markerfacecolor='m', marker='.')ax.set_title('Difference')ax.set_xticks(())ax.set_yticks(())plt.show() Comparison of the K-Means and MiniBatchKMeans clustering algorithms]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Fisher</tag>
        <tag>SVM</tag>
        <tag>K-Means</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux开发环境及其应用学习笔记（二）]]></title>
    <url>%2F201910%2FLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%BA%E5%99%A8%E5%BA%94%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Chap1 开始使用LinuxLinux发展过程系统登陆与退出字符终端 UNIX和Linux是多用户系统：主机连接多台字符终端，字符终端作为交互式输入输出设备。 终端的组成 键盘 屏幕 RS232串口 主机与终端的连接主机中的串口卡（硬件）引出多个RS232串口。每个RS232接口通过电缆连接一台终端。RS232是一个通信标准，现在仍在使用。 终端与主机的功能分工 终端：主机的输入和输出设备。终端通过电缆把用户的按键信息送到主机，把主机发来的信息在屏幕上显示。 主机：程序和数据的存储及处理。数据及程序存放在主机的硬盘上，程序的运行也都由主机内的CPU占用主机内存来完成。 行律与驱动程序 驱动程序：不同的硬件需要不同的驱动程序，驱动程序也是与行律模块的接口。把行律送上来的字节流，沿着通信线路发上去。 行律的作用 一行内字符的缓冲、回显与编辑，直到按下回车键 数据加工，比如说把\n转化成\r\n 将Ctrl + C 转换为终止进程运行的信号 主机和终端的通信实际上没有“删除”（\b），是利用\b + blankspace + \b 构成的，用blankspace替换了打错的地方，\b只控制了光标 终端转义序列 转义字符：ASCII码1B（十进制27，八进制033） 主机发往终端方向数据中的转义序列的功能 控制光标位置、字符颜色、字符大小等等 选择终端的字符集 控制终端上的打印机、刷卡机、磁条机、密码键盘 终端类型 每一种终端都会有对应的一系列转义序列，不同的终端转义序列可能不同，因此我们把终端分成不同的类型，例如ansi,vt100,vt220等。 主机根据终端类型，实现相应功能时发送对应的控制码；当终端类型设置不对时，可能一些全屏幕操作的软件运行失败。 主机和终端之间的流量控制 必要性 终端的显示速度跟不上主机的发送速度； 主机送来的数据终端需要打印出来，但打印速度慢 主机送来的显示内容，需暂停显示，仔细分析 需要一种机制控制主机方向来的数据流量。 两种流控方法 硬件方式：RS232接口的CTS信号线 软件方式：利用流控字符Xon和Xoff 仿真终端和虚拟终端 仿真终端PC机串口，运行终端仿真软件来仿真终端。仿真的内容包括实现终端的转义码序列功能。 虚拟终端UNIX主机和PC机通过网络相连，客户端运行telnet，服务器端运行telnetd，成为UNIX的一个基于TCP通信的虚拟终端。 由于telnet不安全，现在都使用更加安全的终端，在TCP链接上加密和压缩数据，如Windows客户端软件SecureCRT或者Putty 用户登录和练级手册的查询登陆创建新用户登陆shell：一般是bash，也可以选其他shell，其他系统程序等等。 登陆成功后出现shell提示符： $ Bourne Shell系列（sh, ksh, bash） # 当前用户为超级用户 出现shell提示符后就可以输入系统命令（注意：英文字母大小写敏感！） 基本的Linux命令 man 查阅手册取自manual分页器：q-退出； 空格-下一页； 上下箭头-上移下移章节：1. 命令； 2. 系统调用； 3. 库函数； 5. 配置文件]]></content>
      <categories>
        <category>Linux开发环境及其应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux开发环境及其应用学习笔记（一）]]></title>
    <url>%2F201910%2FLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%BA%E5%99%A8%E5%BA%94%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Tips： 先修课：C语言、操作系统 上机实验：自己安装VMware虚拟机和Ubuntu 成绩考核：平时成绩+上机作业（30%），期末考试（70%） 计算机系统的组成硬件 主机 CPU 寄存器组 控制器 运算器 Cache MMU 内存 ROM RAM 软件 系统软件 操作系统 编译器 数据库 网络软件 应用软件 MMU MMU是Memory Management Unit的缩写，中文名是内存管理单元，它是中央处理器（CPU）中用来管理虚拟存储器、物理存储器的控制线路，同时也负责虚拟地址映射为物理地址，以及提供硬件机制的内存访问授权，多用户多进程操作系统。 操作系统的发展 手工操作（电子管） 单道批处理操作系统问题：慢速的输入输出处理仍然由CPU完成，输入输出时，CPU处于等待状态。 多道批处理系统提高了CPU的利用率，用户交互性差 分时系统 分时共享：多个程序分时共享CPU资源 按时间片分配：多个程序在CPU上执行的轮换时间 多道程序需要的硬件支持： 中断与通道技术 中断 通道：有专用的I/O处理器，控制I/O设备与内存间的数据传输，启动后独立于CPU运行，实现CPU与I/O的并行。 DMA：直接内存存取Direct Memory Access CPM通信处理器 实现多道程序需要的硬件支持：内存管制存储器管理单元MMU 多道程序的加载程序采用虚拟地址，以保证多道同时运行的程序可以在内存中重定位（虚实地址转换） 内存保护避免同时运行在内存中的程序互相影响（越界/越权）；CPU设置核心、用户态。 系统调用和系统命令系统调用可以认为操作系统就是所有中断服务程序的集合，包括硬件中断和软件中断。 系统命令操作系统自带的命令也是利用系统调用设计的应用程序，与普通的应用程序具有相同的地位。 应用软件和设备驱动程序开发应用软件开发SDK设备驱动程序开发DDK操作系统对设备进行分类，每类设备设计一种抽象的接口（包括多个函数）设备驱动程序操纵硬件，处理中断，提供这类设备接口规定的一组函数。设备驱动程序工作在CPU特权级，驱动程序的BUG可能会导致整个系统崩溃。 操作系统在计算机系统中的地位 注意：沙漏型生态 课程内容 Linux常用命令 shell脚本程序设计 系统调用 网络socket程序设计 Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。 学习的过程中不知道UNIX和LINUX之间是什么关系，怎么好像一会儿在讲Lunix一会儿在讲UNIX？ ![UNIX和LINUX的历史](http://c.biancheng.net/view/707.html) Linux 是一个类似 Unix 的操作系统，Unix 要早于 Linux，Linux 的初衷就是要替代 UNIX，并在功能和用户体验上进行优化，所以 Linux 模仿了 UNIX（但并没有抄袭 UNIX 的源码），使得 Linux 在外观和交互上与 UNIX 非常类似。 UNIX/Linux 系统可以粗糙地抽象为 3 个层次（所谓粗糙，就是不够细致、精准，但是便于初学者抓住重点理解）。底层是 UNIX/Linux 操作系统，即系统内核（Kernel）；中间层是 Shell 层，即命令解释层；高层则是应用层。 1) 内核层 内核层是 UNIX/Linux 系统的核心和基础，它直接附着在硬件平台之上，控制和管理系统内各种资源（硬件资源和软件资源），有效地组织进程的运行，从而扩展硬件的功能，提高资源的利用效率，为用户提供方便、高效、安全、可靠的应用环境。 2) Shell层 Shell 层是与用户直接交互的界面。用户可以在提示符下输入命令行，由 Shell 解释执行并输出相应结果或者有关信息，所以我们也把 Shell 称作命令解释器，利用系统提供的丰富命令可以快捷而简便地完成许多工作。 3) 应用层 应用层提供基于 X Window 协议的图形环境。X Window 协议定义了一个系统所必须具备的功能（就如同 TCP/IP 是一个协议，定义软件所应具备的功能），可系统能满足此协议及符合 X 协会其他的规范，便可称为 X Window。 关于SecureCRT： SecureCRT是一款支持SSH（SSH1和SSH2）的终端仿真程序，简单地说是Windows下登录UNIX或Linux服务器主机的软件。 关于SSH： 安全外壳协议。Secure Shell的缩写。 SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。 SSH是由客户端和服务端的软件组成，服务端是一个守护进程(daemon)，它在后台运行并响应来自客户端的连接请求，客户端包含ssh程序以及像scp（远程拷贝）、slogin（远程登陆）、sftp（安全文件传输）等其它应用程序。 Linux和Ubuntu是什么关系？ 答：Ubuntu是世界上最流行的Linux发行版。 严格来讲，Linux这个词本身只表示Linux内核，但在实际上使用者已经习惯了用Linux来形容整个基于Linux内核并且使用GNU 工程各种工具和数据库的操作系统(也被称为GNU/Linux)。 基于这些组件的Linux软件被称为Linux发行版。 一个典型的Linux发行版包括GNU程序库和工具，命令行shell，图形界面包括：Linux内核，一的X Window系统和相应的桌面环境，如KDE或GNOME，并包含数千种从办公套件，编译器，文本编辑器到科学工具的应用软件。]]></content>
      <categories>
        <category>Linux开发环境及其应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写于10月15日——博客正式对外开放之际]]></title>
    <url>%2F201909%2F%E5%86%99%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E5%AF%B9%E5%A4%96%E5%BC%80%E6%94%BE%E4%B9%8B%E9%99%85%2F</url>
    <content type="text"><![CDATA[If you can quite, then quite.If you can’t quite, you’re a writer. ——R.A.Salvatore 经过四个月的磨叽，新的博客基本已经完善。鳄鱼先生的水族馆本来想着把原先wordpress博客的文章慢慢搬过来再向大家开放博客，但是仔细看看自己原来的那些文章，要么是没什么深度的书评和影评，要么是平淡的流水账。 但是讲真话，看到自己以前的文字觉得很有成就感，因为那些文章的信息量虽然没那么高、有很多无意义的情绪宣泄，但是里面都有很有意思的闪光点，自己大一大二还真是一个有些自负的天马行空少年。如果这个学期还有时间，就把自己曾经的一些想法整理一下发到博客上来。 下面就记录一下自己接触博客这个圈子以来的一些感触。 我为什么要写博客？表达自己的方式有太多了，微信朋友圈、微信公众平台、QQ空间、微博、知乎、百度贴吧…但是我逐渐发现两个非常严重的问题，其一、这些社交平台上的原创信息都太多了，把自己的想法和感触发布出去真的就是石沉大海，少有人能注意到自己的想法，即使看到了，能让大家留下印象真的非常困难（微信公众平台最明显，随着微信公众平台的门槛降低，“写的比看的多”真的成为了现实）这是消息爆炸的必然结果，随着时间的累积，互联网上文字的平均价值一定会逐渐减少。其二、即使在自己很有存在感的朋友圈和空间，发布的内容也只是自己即时的感慨和供大家取乐的段子，这些东西能够极大地满足我的虚荣心，也记录下了自己很多美好的瞬间。但是在这些平台发布一些长篇大论，就少有人阅读也很难引发深刻的共鸣。 自己的文字越来越浮躁、信息量越来越低，最终在2017年12月，我开始接触博客。 博客对于我来说就像是信息海洋里属于自己的象牙舟——任缘分流，最后还回港口。 老狼就是一个不会被时间改变的人，你应该庆幸身边有这样的人。我是那种随时跟着时代改变的，但是如果你身边都是这样的人，大家都是弄潮儿，最后就不知道随波逐流到哪儿去了。那你身边有这么一个人呢，你在哪儿弄潮也好，还是劈波斩浪也好，你老能看见他。你会知道，“哦，这个地方是我们出发的地方，这个地方是我们还要回去的地方。” ——高晓松 搭建博客的历史大一的时候根本不懂任何技术，经知乎大佬们安利最终决定自己买服务器用wordpress进行傻瓜操作。买域名主机一气呵成，按照教程搭建好了自己的博客。wordpress也确实对小白很友好了，但是它有一个很严重的问题——慢，还有一个致命的问题——莫名其妙地自己的博客就会打不开。wordpress有很棒的地方比如说操作简单、文章可以带密码（有些文章只开放给特定人群），当然缺点就是可定制性太低了，博文内部的插件很少很少，不想现在的’hexo’NeXT主题非常灵活。最终，在我又一次打不开自己博客的时候，我选择了放弃wordpress，放弃自己买的主机，准备转战其他的地方。 博客中国、博客大巴这些老牌BSP（Blog Service Provider）已经半死不活了。博客园、CSDN的博客技术性又太强了。当时的我始终逃避自己码代码，虽然对hexo早有耳闻，但是总感觉技术性太强一直不愿尝试。最后找到了一个发布轻博文的地方——网易lofter，然而lofter现在的用户流量也大不如前。无奈，我最终还是选择了hexo+github。现在真的可以说是真香了。 搭建的过程真的非常非常艰辛，从六月份一直到现在，花了不知道多少时间和多少精力，从git的使用到前端的学习，从markdown进阶到next博文内嵌的插件，每一项都学的我要疯掉。最困难的就是next主题更新的速度太快，根本找不到什么新版本的指导教程，只能自己一点一点摸索，借鉴别人的博客。最终才把自己的主题写好。期间受到过很多大佬的博客的启发： 内容方面陈素封的博客：陈素封老师是我搭建博客期间最佩服的博主，他的文章信息量极大，让我获益匪浅。 技术方面Sanarous的博客：最好看的主题没有之一，我的博客的博文字体和配色基本都是借鉴这位大佬的。他的博客搭建系列对我的技术和审美的提升都非常大。他的博客也是我见过的最优秀的博客。 下面的博客各有可取之处，在搭建的过程中也给了我莫大的帮助： 李瑞豪的博客asdfv1929’s blog贤柳阁Felix：这个主题真的让人眼前一亮YouForeverLinchao’s Blog 我的生活博客搭建的具体过程已经忘得差不多了，也不想再费尽心思地回想和记录。目前自己博客的定位当然不会是一个单纯的技术博客，平时也会post自己的学习笔记、健身记录、书影观后感、游记、摄影和随笔。可以说这是自己的一个个人品牌吧，在接下来的日子里要不断地完善。陈素封老师在自己地一篇文章中提到过写博客的意义： 提供持续学习的动力 积累更多的知识 提高将事情讲清楚的能力 分享带来的连锁反应 帮你找到志同道合的人 记录成长 培养持续做一件事的能力 讨论反思 搜寻你意想不到的东西 一个人在做一件属于自己的事 互联网的身份识别 以上意义对我来说，最重要的应该是1、5、10、11，还有就是让自己沉淀下来，能够去把信息碎片整合、归纳、扩展，形成自己独树一帜的观点。这些是博客对于我的意义。 我现在的日程轨迹自己也非常地满意： 晚上十一点开始清理滴答清单的每日Checklist，然后为第二天安排任务。滴答清单的具体使用方法参考了课程《跟邹小强学用滴答清单》，课程在网易云课堂上应该有。滴答清单我用了快半年了，这是我目前接触的最完美的时间管理类app，我需要的功能它全部都有，而且有产品自己的对时间管理的一些想法。“收集箱”的存在对我有很大的帮助。 下面是我每晚的checklist： 1. 信息门户 2. 北邮人论坛十大 3. 清理阅读清单 4. qq官方通知群 5. 清理滴答清单 6. 整理知识碎片 7. 计算机院公众号 每日的打卡清单包括： 1. 查看今天花了多少钱 2. 健身（z1.2.3.5.6） 3. 坚持记录 4. 阅读 5. 不发脾气 6. 背单词 7. 吃早餐 8. 喝水 每日的咨询获得包括：36氪、澎湃新闻、部分微信公众号、网易云课堂、北邮人论坛收集的app：pocket（很优秀的app！）晚上记录的app：卡片日记（记录app里界面我最喜欢的了，每天记录的时候心情最重要，所以日记软件的颜值要求应该是最高的~）然后有时间的时候再根据卡片日记里的想法形成长篇大论发到博客。&lt;/div&gt; 然而、然而、最近课程真的太忙了啊！专业分流就跟转专业了一样，前两年学的东西和现在的专业都脱轨了啊！这几天累的不行，也好久都没写博客了。 今天写的这一篇的内容一定还有太多不完善的地方，日后再慢慢细化吧。]]></content>
      <categories>
        <category>参省乎己</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据技术基础课堂笔记（4）]]></title>
    <url>%2F201909%2F%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89%2F</url>
    <content type="text"><![CDATA[hadoop存储格式行式存储格式未压缩的Sequence File通过设置同步的标记，把key value划分成块，当后面出错的时候只需要重传一个块。相当于debug时的断点。record length-key length-key-valueblock的结构要清楚。 Sequence File读写数据（略过）java写的 行式存储（2种） text file 二进制的key value 图片 视频 存 squence file 没有压缩 文件级别的压缩 block级别的压缩 列式存储 ORC文件Parquet文件Carbondata文件：吸取了ORC和Parquet的优点 分布式存储数据的采集数据的存储hdfxscale-up scale-out 十分重要摩尔定律 晶体管会散热，一个processsor上能够集成多个core，从一个core到多个core就是从scale-up到scale-out集成的过程当processor已经无法集成再多core的时候，可以利用多个processor，或者多个计算机（机群）这也是scale-out的策略interact是一个问题。随着技术的发展，当出现瓶颈的时候scale-out 的方式就是绕过瓶颈的思路。又比如，笔记本电脑加硬盘，总能加到一定的限制，那么此时通过网络进行扩充 文件级别和块级别的分布式文件系统文件级别的文件有大有小，无法实现很好的负载均衡；难以并行处理 块级别的分布式系统把文件分成大小相同的块云计算-2006年Amazon提出AWS，EC2-虚拟机，之前只有物理机器，S3 object storage第一个把它商品化的公司。服务器租赁，颠覆了整个计算机行业的租赁和购买。 HDFS基本架构standby namenode 是active namenode的替补 HDFS关键技术HDFS的容错性设计 副本放置策略-三副本放置策略 机架-机架上有交换机（局域网和城域网的区别） client 和 datanode在同节点 在不同节点 异构存储介质集中式缓存管理每个节点都有一定空间用来做cache，集中式的缓存管理就是把这些东西收上来 HDFS Shell文件一致性的检验 数据搜集]]></content>
      <categories>
        <category>大数据技术基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[沙河半日]]></title>
    <url>%2F201909%2F%E6%B2%99%E6%B2%B3%E5%8D%8A%E6%97%A5%2F</url>
    <content type="text"><![CDATA[温馨和感动的一天。 今天去沙河和小排长们一起商议关于微职2019级招新的事情，早晨和中午发生的事情，让我觉得莫名的温暖。早晨六点半起床，匆忙和Wbh、Yyr、Lyt会合，三个人骑车到地铁站。地铁站上四个人商量一会儿会议的流程。到了沙河，到处都是国庆的氛围。进教学楼之后我们体验了一下高级的智能售货机。然后四个人一起布置教室，迎接小排长们的到来。然后是自我介绍和萝卜蹲游戏。然后就是大家的头脑风暴。再然后就是制定时间和Ending. 我发现和参谋部的大家在一起就有一种安心的感觉，和参谋部大伙的感情就像是空气，我时时刻刻都能呼吸到。海霞学姐前两天说，老桑学长到现在一直有很大的心力在微职上，我今天突然明白了这种感觉。我想起《小王子》里的一段话。他又回到了狐狸身边。“再见了。”小王子说道。“再见。”狐狸说，“喏，这就是我的秘密。很简单：只有用心才能看得清。实质性的东西用眼睛是看不见的。”“实质性的东西，用眼睛是看不见的。”小王子重复着这句话，以便能把它记在心间。“正因为你为你的玫瑰花费了时间，这才使你的玫瑰变得如此重要。”“正因为你为你的玫瑰花费了时间…”小王又重复着，要使自己记住这些。“人们已经忘记了这个道理，”狐狸说，“可是，你不应该忘记它。你现在要对你驯服过的一切负责到底。你要对你的玫瑰负责…”“我要对我的玫瑰负责…”小王子重复着…… 没有什么事情是天生就对你重要的，它对你意义非凡是因为你在它身上倾注了太多心力，你在它身上看得到过去的自己、现在的自己和未来的自己，你希望它更好，也希望自己更好。 无论是一直指引着我的学长学姐，还是身边参谋部和合伙人地朋友们，还有无限活力的学弟学妹，有你们在真是一件很好的事情。接下来一年我在参谋部首席运营官的事务，我一定会做的更好的。 yr和yt是我身边的我最喜欢的一对情侣。他们之间的感觉我太羡慕了。就是那种淡淡的但是能感觉到他们很喜欢很喜欢对方。日常斗嘴调情，走路的时候两个人开心的闹腾，yt有时走着走着就挽起yr，或者两个人就牵起了手。我根本没法用文字形容他们两个人之间的感觉。 我们仨去操场，今晚在操场有一场《我和我的祖国》露天电影。yr跟yt说“你晚上来信通这边坐嘛”，yt：“你晚上来现邮这边坐嘛”，yr：“要不咱们去计算机坐嘛”哈哈哈哈哈他们真的好好啊，就跟他俩在一起根本没有电灯泡的感觉。我酸了，他们太好了🍋 这届学弟学妹也是相当的给力啊！真的要感谢二进制的氛围带出来这么一群挺活跃的小伙子小姑娘们，鲨鱼也有很棒的小伙子和小姑娘们！Chz真的鲨鱼之光了哈哈哈（什么破形容）！Szy真就是那种办事踏实还特别可爱的乖学弟人设啊，，他看起来太可爱了吧哈哈哈wsl今年把二进制的小排长分开覆盖到所有新兵群里去，是一件再正确不过的事情。希望之后整个微职的团队气氛都能像今天的会议一样这么好！值得一提的是，今天关于整个招新流程的商议，我是在按照字节跳动的校园宣传的前辈的讲课方式进行的，这说明我也真的收获了一个项目制的头脑风暴的模板。真棒！ 另，沙河早饭的肉夹馍小了一圈还是这么贵，，， 炒饭没有了，被一个羊肉麻辣烫味的饭替代了，，不过倒真挺好吃嘿嘿🐏 就到这里啦~明天还要早起去健身！提前晚安💖]]></content>
      <categories>
        <category>参省乎己</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于细节]]></title>
    <url>%2F201909%2F2019-09-24-%E5%85%B3%E4%BA%8E%E7%BB%86%E8%8A%82%2F</url>
    <content type="text"><![CDATA[最近的生活中“细节”这个词出现了很多次。我们从小就被大人们叮嘱要“注意细节”，随着年龄的增长这个词很少再被人提起。这两天发生的一系列事情都让我回过头来重新关注这个词。 近期让我重新注意到这个词的时候是在发给合伙人中秋茶话会的问卷时，标题后面“【复制】”两个字没有删掉，凤民学姐一句“要细心呐”让我突然楞了一下。上次听到这种提醒应该是在小学了。那个时候做错了自己本应该做对的题，会收到老师这样的提醒。 我突然意识到自己在浮躁地做很多事情，这种做事的状态应该调整过来。自己想要做的事情太多，但是行动力没有预期的那么高，所以很多事情都没有做到百分百的完美。对于一个思想活跃的大学生来说，产生新鲜的想法是一件最廉价的事情，真正重要的是做事的行动力。现在的自己应该是有“做减法”的需求，一些事情要么就不做，要么就做到自己的百分之百。尤其是无法逃避的课程作业和课程设计，这些事情理应做到自己的最完美。 在和李京老师的面谈中也提到了关于细节的一些问题。李京老师讲到的关于面试比赛的策划，项目组给出了106页的策划书——不管策划到底怎样，仅仅从策划书的量来看，就知道做这件事的人已经做到尽善尽美了。当我们在职场中或者在平时的学习生活中，我们不可能一上来就拥有很优越的机会，也不可能一下子就做出惊为天人的事情。那么我们的能力和出众点就体现在细节上，在细节上做到无可挑剔同样能给人留下很深的印象。“做好细节”能够让我们“被人注意到”。 认真雕刻细节能够让我们给人留下很好的第一印象。今天欧老师在上课的时候提到免试研究生的复试，单单从一个学生的简历就能发现很多事情——那些认认真真琢磨简历的人至少说明他们把这件事情“放在心上”，这说明他们愿意把之后的时间投入到实验室，愿意和身边的同学交流等等。一份认真的简历能够表达很多东西。老师提醒我们，一定要注意细节，特别是在第一印象中的细节十分重要。 今天在线上和一位快手的学长交流，他着重强调了“亮点”这个词，它可以是学历、专业、论文或者实践等等，重要的是我们要留意开始打造“个人品牌”。 大厂不缺好学校的学生，比如快手一度清北比例高达40%，组里一半以上的清北中科院，但是永远缺乏岗位极度匹配的人。原因并非是大学的专业和研究方向不对口，也并非是高校的教育和职场脱节，而是我们一直是从大学的培养方案出发，去适应不同公司的需求；而非从岗位需求出发，面向岗位技能在大学中学习。这种培养方法是一把双刃剑，它虽然保证了对岗位的高度适应，但是也削弱了人的全面的能力，在社会飞速发展中，可能会随着职业的没落，这种培训方式的偏颇也就显现出来。 我们也应该去尝试构建一种结果导向的培养方案，按照未来的需求在大学阶段集成能力，尤其是在大学专业划分模糊且行业发展迅速的时代。 今天：肝数据科学导论作业到3点，玩手机到4点。九点二十起床，马马虎虎听了课 （大数据技术基础），中午完了一会游戏，美美地吃了一顿，宿舍睡了一会儿，就去上课，没怎么认真听（数据科学导论）在研究博客地SEO。晚上看了好久的乐队的夏天。然后忙于各种琐事，一边学习一边聊天。 效率好低啊，明天还要写作业呢。]]></content>
      <categories>
        <category>参省乎己</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据库系统原理（3）]]></title>
    <url>%2F201909%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(3)%2F</url>
    <content type="text"><![CDATA[赋值操作 Assign关系代数表示的除法Outer joinaggregation function 聚集函数 chap3. introduction to SQLstructured query language 结构化的查询语言data def 3.2data query/retrieve 3.3-3.8data manipulation 3.9 对数据的操作和管理 3.1 overviewSQL基本结构和功能是基本一致的“Query”generalized defdefine, retrieve, modify, contro etc.Parts in SQL(SQL语句的部分功能) Data defination language Data-manipulation language Integrity Transaction management authorization embedded and dynamic SQL date.time.timestamp 时间戳Interval 时间点的间隔 Null 空值 表示未知的状态 开发大型数据库应用时，程序所访问的表中的属性的名字最好取为英文，便于应用程序的可移植性 创建表的完整性限制 schema definationinsert into branchvalues(&#39;Perryridge&#39;,&#39;Blooklyn&#39;,8000) drop table 删除表中的所有信息drop table r删掉r的定义delete from r把r中的某些元组删掉，r还是存在于其中的。 alter table 对表的内容进行修改 distinct 强制去除查询结果里的重复元组select distinct dept_namefrom instructor all 强制不能去重select all dept_namefrom instructor asterisk 星号 all attributesselect语句还可以接相应的运算符where语句]]></content>
      <categories>
        <category>数据库系统原理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[机器学习学习笔记（3）]]></title>
    <url>%2F201909%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%2F</url>
    <content type="text"><![CDATA[「机器学习」学习笔记（3）review 几何模型 设计基本线性分类器 continue今天的内容，介绍五个模型（除去感知机其实是四个）： Fisher：更好的策略，复杂的求解 SVM：更好的策略，复杂的求解 感知机（并非几何模型，而是基于神经元思想构建的模型）：简单的策略，迭代的求解（启发式搜索），得到的有可能仅仅是局部最优解 KNN 无监督聚类 Fisher线性分类器支持向量机在边上最容易被混淆的样本是最有价值的。我们希望间隔最大化。基本线性分类器中间隔是质心之间的举例；支持向量机中的间隔指的是最容易混淆的样本到分割线的距离。支持向量自己推导（至少能把二维的推导出来，能够清晰地理解这个问题） 机器学习地关键点 - 任务：二分类问题 - 模型：几何模型-线性模型 - 策略： 1. 基本线性分类器：直接优化两类之间地距离 2. Fisher：优化投影轴（两类的投影的类间距离和类内距离） 3. 支持向量机：优化间隔（两类之间的距离） - 算法 1. 都是最优化算法 2. 基本线性分类器，求均值 2. 1. 如果不是线性可分？（不考） 用核函数进行**升维** 如果不是线性可分，但是允许一些点不满足间隔最大化（无法去除的噪声点），甚至一些误分类。可以采用软间隔最大化的方法。（需要添加一些代价） 2. 还有没有其他的学习方法？ 感知器（启发式搜索） 二分类线性分类模型 严格意义上是感知机模型 输入加权值让正数据产生1的反应，让负数据产生-1的反应策略：优化绝对损失。当长时间得不到最优解的时候，可以调大学习速率或者更换初始值。 KNN—最近邻方法 背景：样本之间有很大的相似性的。 实现k邻近算法时，主要考虑的问题是如何对训练数据进行快速k近邻搜索算法。 “距离”的概念：闵科夫斯基距离——曼哈顿距离、欧式距离（在欧式距离里，大的值会有更多的影响）。距离的计算需要根据数据本省的特点进行定义。（余弦相似度衡量夹角（不考）） VDM 其他的问题：k值的选取 存储数据的时候能不能进行优化 k均值聚类（无监督的数据重在discover，有监督的数据重在学习）无监督类：任务：找到紧凑且独立的“簇”spyder/python3.7]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>几何模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据科学导论学习笔记（5）]]></title>
    <url>%2F201909%2F%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%2F</url>
    <content type="text"><![CDATA[第四章 数据预处理数据预处理概述 现实世界的数据是“脏”的：不完整、含有噪音、不一致。 没有质量保证的数据，就没有高质量的挖掘结果。 数据质量的多维测度：准确性（Accuracy）、完整性（Completeness）、一致性（Consistency）、时效性（Timeliness）、相关性（Relevance）、可信性（Believability）、可解释性（Interpretability） 🧜‍♂️课件中的代码都要亲自进行实验❗️ ❕ ### 背景知识 1. 数据对象与属性类型 数据集是由**数据对象**构成的，一个数据对象代表一个实体，通常数据对象用属性来描述。 **属性**是一个数据字段，表示数据对象的特征。 属性的分类： 标称属性：标称属性的值不具有有意义的序。 二元属性 序数属性： 有意义的先后次序 数据属性：定量的可度量的量 离散属性 连续属性 数据的基本统计描述的图形显示 分位数图 分位数-分位数图 直方图 散点图 数据清洗（4个主要任务）缺失值处理如何处理缺失数据： 忽略元组 手工填入缺失值 填充全局常数（Unknown）-尽管该方法简单，但是并不非常可靠 填充属性的中心度量（均值或中位数） 对于对称的数据分布而言，可以用均值来填充 当数据分布是倾斜的，则更应该使用中位数来填充缺失值。也可以使用与给定元组属同一类的所有样本的属性均值或中位数来填充。 填充最可能的值可以用回归、贝叶斯形式化方法的基于推理的工具或决策树归纳确定。 噪声光滑噪声：在可测度变量中的随机错误或偏差常用的噪声光滑技术： 分箱（Binning method）通过考察“邻居”来平滑存储数据的值 回归：通过让数据合适一个函数来平滑数据。 离群点分析：通过如聚类等方法来检测离群点。直观地，将落在簇集合之外的值视为离群点。 异常值的检测和处理异常值：与总体的行为特征、结构或相关性等不一样。检测异常值的方法： 简单统计（线性模型） 3$/sigma$原则 箱型图 基于模型检测 基于距离 基于密度 基于聚类 处理异常值的方法： 删除含有异常值的记录 将异常值视为缺失值 用平均值进行修正：可用前后两个观测值的平均值修正该异常值。 不处理：直接在具有异常值的数据集上进行挖掘建模 不一致数据的修正 对于有些事务，所记录的数据可能存在不一致。有些数据不一致可以使用其他材料人工地加以更正。 知识工程工具也可以用来检测违反限制的数据 数据集成数据集成的主要任务数据挖掘经常需要数据集成————合并来自多个数据源的数据。正确的集成过程有助于减少结果数据集的冗余与不一致，这有助于提高数据挖掘过程的准确性与速度 实体识别问题实体识别是指从不同数据源识别出现实世界的实体，它的任务是统一不同源数据的矛盾之处。常见形式：同名异义、异名同义、单位不统一对于上面这些矛盾一般用元数据解决。元数据是“描述数据的数据”。每个属性的元数据包括名字、含义、数据类型和属性的值的允许范围，以及处理空值的规则。 检测和解决数据值冲突 冗余数据与相关性分析 一个属性如果能由另一个或另一组属性“导出”，则这个属性可能是冗余的。同一属性多次出现，同一属性命名不一致等也可能导致结果数据集中的冗余。 对于属性间的冗余可以用相关性分析检测到，然后删除。 对于标称数据，我们使用卡方检测 对于数值属性，我们使用相关系数（correlation coefficient）和协方差（covariancce），他们都评估一个属性的值如何随另一个变化。 元组重复 除了检测属性间的冗余外，还应当在元组级检测重复。 去规范表（denormalized table）的使用（这样做通常是为了通过避免连接来改善性能）是数据冗余的另一个来源。 数据规约 数据仓库可能存储T数量级的数据，如果运行于完整的数据集，复杂数据分析或挖掘要花费非常长的时间。 数据规约（Data reduction）：获得数据集的一个简约表示，使得在容量上大大减小，但仍接近于保持原数据的完整性，并产生相同或基本相同的分析结果。 数据规约的策略： 维规约（Dimensionality reduction） 数量规约（Quantity specification） 数据规约（Data compression） 用于数据规约的时间不应当超过或“抵消”在规约后数据挖掘上挖掘节省的时间。 数据变换数据变换策略将数据转换成适合于挖掘的形式。涉及以下策略：平滑聚集属性构造规范化离散化由标称数据产生概念分层 规范化离散化标称数据的概念分层生成]]></content>
      <categories>
        <category>数据科学导论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「学生宿舍管理系统」实验报告]]></title>
    <url>%2F201909%2F%E5%91%A8%E5%AE%87%E6%B4%8B_%E3%80%8C%E5%AD%A6%E7%94%9F%E5%AE%BF%E8%88%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E3%80%8D%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[「学生宿舍管理系统」实验报告（第一次作业） 问题描述使用Python语言，设计一个小型的学生宿舍管理系统，系统用户为宿舍管理员。 功能要求 学生信息：学号、姓名、性别（男/女）、宿舍房间号、联系电话。 系统功能 可按学号查找某一位学生的具体信息 可以录入新的学生信息 可以显示现有的所有学生信息 程序要求 使用函数、列表、字典、字符串、条件循环等解决问题； 程序规模在80~200行左右。 任务分析实现宿舍管理程序的三个功能。添加的功能包括：可以利用学生的姓名进行查找。错误处理：在功能选择、输入学号、姓名、性别、宿舍房间号、联系电话时都有可能出现数据格式不正确的情况，需要请求用户重新输入。在查找失败时，需要向用户提供查找失败信息。 模块划分共有一个主函数和三个模块函数： search_stu可按照学号查找某一位学生的具体信息。（这里做了一个功能拓展，可以通过学生姓名来进行查找，如果有重名的同学都会查找出来） add_stu模块录入新的学生信息 show_all_students显示现有的所有学生信息 main函数进行功能选择 数据结构和关键算法 导入prettytable模块，使输出结果更为美观。 stu_info是一个$n * 5$ 的数组，其中$n$为学生数量 程序代码search_stu函数def search_stu(): "按照学号或姓名查找某一位学生的具体信息" find = -1 t = PrettyTable(["学号","姓名","性别","宿舍房间号","联系电话"]) sea = input("请输入要搜索的学号或姓名： ") if sea.isdigit() == True: for i in range(len(stu_info)): if stu_info[i][0] == sea: find = i t.add_row(stu_info[i]) if sea.isalpha() == True: count = 0 for i in range(len(stu_info)): if stu_info[i][1] == sea: find = i t.add_row(stu_info[i]) if find == -1: print("抱歉，未查找到该学生。") else: print(t) add_stu函数def add_stu(): "录入新的学生信息" print("-"*50) print("新增学生") num = input("请输入学号： ") while num.isdigit() != True: num = input("输入错误，请重新输入： ") name = input("请输入姓名： ") while name.isalpha() != True: name = input("输入错误，请重新输入： ") sex = input("请输入性别：（男/女） ") while sex != "男" and sex != "女": sex = input("输入错误，请重新输入： ") room_no = input("请输入房间号： ") while room_no.isdigit() != True: room_no = input("输入错误，请重新输入： ") tel = input("请输入电话：") while tel.isdigit() != True: tel = input("输入错误，请重新输入： ") stu = [num, name, sex, room_no, tel] stu_info.append(stu) print("添加"+num+"成功") show_all_students函数def show_all_students(): for i in range(len(stu_info)): table.add_row(stu_info[i]) print(table) 主函数def main(): while True: print("*"*50) print("欢迎使用【宿舍管理系统】") print("1.查找学生") print("2.新增学生") print("3.显示全部") print("0.退出系统") print("*"*50) print() instruct = input("请选择希望执行的操作：") if instruct == "1": search_stu() elif instruct == "2": add_stu() elif instruct == "3": show_all_students() elif instruct == "0": print("欢迎再次使用【宿舍管理系统】") break else: print("输入错误，请重新输入指令！") 执行结果功能2. 录入学生信息 功能3.显示所有学生信息 功能1. 根据学号或姓名进行查找 根据学号查找 根据姓名查找 可见，重名的学生被查找出来 功能0. 退出系统 错误处理]]></content>
      <categories>
        <category>数据科学导论</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[口译英语学习笔记（2）]]></title>
    <url>%2F201909%2F%E5%8F%A3%E8%AF%91%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[李平老师说，这门选修课即使选的人再少她也会坚持讲下去。因为组建口译班是她一直想做的事，现在她一定要实现自己的这个梦想。坚持做自己喜欢的事情是一定是有意义的，因为至少以后回想起来不会后悔。 Chap2. 关于记忆 -- Gains -- 记忆的分类 immidiate memory - 启动注意 short-term memory - 信息处理（对口译非常重要） long-term memory 后台处理 Technics Visualization Logical restructing Time Sequence Put yourself in Emotion -- Problems --对细节记忆不准确；在对较长的内容进行记忆时容易走神，后半段都会忘掉；对专业相关的内容记忆会更加准确；听力不好。 -- Solutions --训练长时间集中注意力；训练听力]]></content>
      <categories>
        <category>口译英语</category>
      </categories>
      <tags>
        <tag>口译</tag>
        <tag>记忆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux开发环境及其应用学习笔记（2）]]></title>
    <url>%2F201910%2FLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[（重点）中断在我们现在的Linux系统起到怎样的作用？open-系统调用fopen-被包装后的open越界-处理方法：中断，有页表。使用的地址不可以超过分配的地址。有MMD硬件进行监视。越权：在用户态进行内核态的操作。只读时进行写。copy-on-write。两个程序使用同一块内存地址，两个程序都只能设置能只读。当程序要求写的时候，将内存的东西进行复制。 串口卡：接口终端做的相同的事情抽出来构成行律行律的作用ascii码：回车13 换行10 scanf 进行阻塞态修改行律-比如输入密码的时候不回显，按Ctrl+C的时候不停止终端转义序列转义字符：Esc终端字符集也可以修改secureCRT终端类型 主机和终端之间的流量控制流控方法： 硬件方式：CTS-Clear to Send （可以发送） 软件方式：Xon, Xoff当终端接收不了时，向主机发送Xoff。Ctrl-S Ctrl-Q(next 主题的按键写法？） 虚拟终端数据压缩的基本算法 还是哈夫曼编码 难点在于编码对象——对频繁出现的码设置成一个编码对象。利用了程序的“局部性”买一个云端，想干嘛干嘛（在shell提示符下就可以键入UNIX命令大小写有区别查阅联机手册 常见的命令date：打印系统日期和时间ntpdate 计算机的时间是很不准确的，需要定时和时间服务器校准误差cal 10 2019日历bc计算器355/113password 更换口令不存储明码口令 who：确定有谁在系统linux：一切皆文件who am i和whoami是两个不同的命令uptimetopps -ef]]></content>
      <categories>
        <category>Linux开发环境及其应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记和李京老师的一次面谈]]></title>
    <url>%2F201909%2F%E8%AE%B0%E5%92%8C%E6%9D%8E%E4%BA%AC%E8%80%81%E5%B8%88%E7%9A%84%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%B0%88%2F</url>
    <content type="text"><![CDATA[内省不疚，夫何惧何忧？ ——《论语·颜渊》 针对今年微·职招新和“书与咖啡”项目的一系列问题，我们中午约了李京老师谈话。和李京老师的每次讲话我能收获到的信息量都是非常巨大的，这也让我意识到自己的一个很大的问题——思考深度不足。从大一开始，我们要求每日自省，完成感悟。可是我的感悟依然仅仅停留在“记录”和“摘抄”的层面，很多书评和影评的观点也都是受到了其他评论人的影响。自己产出新锐一手观点的能力非常差。我想这也是自己每次和老师以及学长学姐聊天时有醍醐灌顶的感觉的原因——自己思考深度不足，面对来自前辈们更加深刻的观点的时候，自己就会感觉他们的观点和想法很深刻。 下面对这次面谈做一个简单的记录。 关于招新的相关事宜 李老师跟上级报备，决定在信息门户发布通知或者是在2019级导员群中发布通知，我们向李老师提供官方报名通道之后，消息传达到同学们手中仅需要两三天。 招新时间为9月23日到10月23日，先让18级小伙伴们得到训练，再进行官方渠道的招新宣传。 关于场宣的问题，通过职协的名义招新，与其他社团一起。“枪打出头鸟”，我们只需要做好自己内部的氛围就可以了。 关于感悟Q：小伙伴们写感悟不积极，怎么办？A：通过观察，可以看出来18级以上的小伙伴们写感悟的质量还是很高的，但是对于18级的小伙伴，要么不写感悟、要么每天只是进行一个打卡。你们应该先在自己的身上找问题，问问自己是否已经做到完美。并非大家不配合，而是我们自己没有继续向18级的小伙伴们灌输感悟的意义了。Ponder：在与学长学姐们的交流中我们也可以感觉到，这一年我们和18级之间的交流太太少了。导致有特别多的想法和文化观念我们无法向18级传达，也就忽视了向他们传达感悟的意义。在此，我想自己先思考一下，每日感悟对我自己有什么意义。现在可能很多人都没法通过“失去感悟”这件事情来知晓感悟的价值，因为大家好像没有真正的“拥有过”感悟，所以觉得不写感悟好像从来没有影响过自己的生活。我们现在来仔细思考感悟的意义。从一个最功利的角度说起：李京老师接触过无数的本科毕业生，他问大家：“你的大学生涯有没有什么一件可以拿出来吹牛的事情？”基本所有人的回答都是“没有。”大家都没有做过什么“没有第二个人做过的事情。”而感悟就是这样一件让你可以吹牛的谈资，当HR听到你说你的大学四年完成了“40万字感悟”的时候，他们的眼睛都在发亮，他们都对此非常好奇。这是很多学长学姐屡试不爽的一个面试经验。 当然这个例子对我们的启发不仅仅是感悟，我们要仔细想想，当大学四年结束时，我能不能自豪地说出一件“值得吹牛”的事情。 再来，就是利用我前面所说的“失去感悟”的方法来探寻它的价值。我大一一年的感悟完成质量还是很高的，我的每天都记录下来了，我读过的书、去过的地方、学过的东西、看过的电影都存在于我的感悟里，我回去看的时候能够确定地告诉自己，我这一年一直没有过停止进步。但是现在的我回去看我的大二时光，我发现了自己的生活里有一大片空白，我根本想不起来我这些日子是怎样度过的。我会想，“多可惜啊，如果我那时候仅仅是记录自己一天都干了什么也好啊。”这个时候，我体会到了“失去感悟”带给我的影响，我发现我的一大段时间都是空白的，这让我非常可惜。 我们做任何事情的时候都喜欢去思考事情的意义，当然这不一定是正确的做法，有时候做没有意义的事情也是很好的事情。比如说，我去做志愿，我能获得什么意义呢？我可以拥有志愿时长、可以拥有德育分，我为了它们我去做志愿。有时候我去做了没有志愿时长的志愿活动，这时候我会发一条朋友圈“不为其他，只为世上的每个人都能得到温暖。”这时候我得到了虚荣心和满足感，得到了比那些“为了德育分去做志愿的同学”更多的优越感，得到了老师和同学们眼中的一个优秀人设。但是这些都太浅了，就像是我写感悟是为了积累字数、方便我去面试，为了我以后拥有更多的谈资。但这些并非是我们写感悟的最终意义，我们写感悟的最终意义，是养成“日参省乎己”的习惯。这是我眼中的感悟的最终的意义，——不仅仅是记录、不仅仅是摘抄、不仅仅是记录别人的观点，而是通过我们普通的生活去挖掘更深层的意义，学会深度思考。这和我们微·职“修炼内功”的思维是很类似的。为了达到这个目的，我还有很长的路要走。 关于“书与咖啡”合伙人参与不积极李京老师还是说，先找自身的问题。当我第一眼看到这次书与咖啡的通知时，没有想要参与的欲望。原因是什么？“港独”和我自己有什么关系？讨论政治我没兴趣啊。我为什么要花时间在与自己不相干的事情上？有这些时间为什么不去做一些更重要的事情？书与咖啡的宗旨是“务虚”，目标是让大家（合伙人）拥有更宏观的“格局”。我们不应该往下看，而是应该往上看。 这世界上我们看到的东西，都能够衍生成和我们自己有关的事情。 月亮和我们有什么关系？中秋节，吃月饼，月球的潮汐与女性生理期还有关系，等等。 9月14日，沙特石油巨头企业沙特阿拉伯国家石油公司（以下简称：沙特阿美）的两处石油设施（一家炼油厂和一座油田）在受到无人机攻击后起火。这和我们有什么关系？你爸妈不开车？油价受到怎样的影响？最终怎样影响到我们自己的生活？ 我们应该从这样的宏观纵向角度去思考问题。而现在的我们大多数情况下在面对新闻的时候，都仅仅是获得新闻信息，简单的评论新闻。比如这次的港独主题，我就只会感慨愤青的差劲，不会联想这些事情对于我自身会产生怎样的影响。这样的思考方式都是孤立事件。我们要学会把事情都联系起来。 对于香港问题，我们就可以从政府、社会、个体层面去思考问题。比如从香港大学生切入，这个角度就会让大家有身份认同感。 这样的宏观纵向思考方式还需要进一步的养成。 做事情先找内因，再找外因。]]></content>
      <categories>
        <category>参省乎己</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数据库系统原理学习笔记（2）]]></title>
    <url>%2F201909%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Chap2. Introduction to the Relational Model(关系模型介绍) 本章最好通过举例来理解定义。 Introduction to Chapter 2Relational data model relational data structure (syntax)语法 integrity constraints (semantic) 完整性约束（语义） constraints on attributes of schemas, e.g. value domain, type constraints on dependencies among attributes of a schema constraints on dependencies among attributes of different schemas operations on the model 2.1 Structure of Relational Databases（关系数据库）attributes(or columns)tuples(or rows) Basic structures关系（relation）定义为：一系列域上的笛卡尔积的子集。Attributes ：$A_1, A_2, … ,A_n$domain of relation’s attributes $D_1, D_2,…D_n$ 1. relation r in DBS is the limited set.&lt;br /&gt; 2. attributes are non-ordered.&lt;br /&gt; 3. tuples&#39; order is irrelevant.&lt;br /&gt; 4. `null` is a member of every domain. &lt;/div&gt; A domain is atomic if its elements are considered to be invisible. 2.2 Database schema(数据库模式)Relation schema 关系模式 For attributes $A_1, A_2, … , A_n, R=(A_1, A_2, …, A_n)$ is a relation schema.e.g. Instructor-schema = (ID, name, depart_name, salary) $r(R)$ is a relation on the relation schema $R$e.g. customer(customer-name, customer-street, customer-city) on Customer-schema relation instance与relation不作区分。 an element $t$ in set $r$ is a tuple, represented by a $row$ in a table. $t[A_i]$ = the value of $t$ on the attribute $A_i$. e.g. t2[customer-name] = Smith 2.3 Keys(键，码) super key - can be used to identify uniquely a tuple in the relation.能用来被区分不同的元组。 candidate key（候选码） 候选码是最小的超码。 Primary key: A relation may have several candidate keys. Primary key is chosen as principal means to identify tuples. Primary attributes //non-primary attributes foreign key&amp;referencing relation &amp; referenced relation这里比较容易混，注意看定义。Def. If X is one or more attributes in relation r1, and X is also the primary-key of another relation schema r2.X is called a foreign key from r1 referencing r2 X是由r1参照/关联r2的外键r1 is called the referencing relation of the foreign keyr2 is called the referenced relation of the foreign keye.g. dept_name in instructor-schema and department-schema, dept_name in instructor is a foreign key from instructor referencing department. schema diagram(模式图)、node、directed arc Referential integrity constraint(参照完整性约束)：在参照关系中，任意元组在特定关系中的取值必然等于被参照关系中某个元组在特定关系上的取值。 2.5 Query language(查询语言)procedural 过程化的：用户指导系统对数据库执行一系列操作以计算所需结果。non-procedural 非过程化的：用户只需描述所需信息，而不用给出获取该信息的具体过程。 2.6 basic relation algebra operations 基本关系运算 Select Operation - selection of rows(tuples)$\sigma_p(r)$ Project Operation将元组投影到某些属性上$\prod_{A_1, A_2, …A_k}(r)$筛选后还要去重 Union Operation$\bigcup$$r, s$ must have the same arity(元)compatible(相容的)多个操作的组合运算（查看例题） Set Difference Operation$r - s$ Set Intersection Operation$r \bigcap s$ Cartesian-Product Operation(笛卡儿积运算) Natural Join$\bowtie$自然连接运算首先形成它的两个参数的笛卡儿积，然后基于两个关系模式中都出现的属性上的相等性进行选择，最后还要去除重复属性。 Renaming Operation Compositon of OperationsChap.6 Formal Relational Query Language6.1 Relational AlgebraFundamental operations第二章都讲过了。详见下节课的笔记吧。]]></content>
      <categories>
        <category>数据库系统原理</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[机器学习课堂笔记（2）]]></title>
    <url>%2F201909%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[机器学习的第二次课程。感觉新专业课程安排的不够合理，有很多机器学习的先修课程都在和机器学习同时进行。🤦‍♂️ Anyway,努力学习吧。 在本次课程中还没有做到的事： 1. 多查看笔记里的概念类内容，作到掌握。 2. 近一步理解笔记里出现的公式。 3. 对机器学习历史里出现的算法做进一步了解。 4. 对笔记里提到的算法进行各种实践！只有理论不可以的。🙌 第二次上课复习 Def of Machine LearningA compute program is said to learn from experience E with respect to same task T and some performance measure P, if its performance on T, as measure by P, improves with experience E. 假设用$P$来评估计算机程序在某任务$T$上的性能，若一个程序通过利用经验$E$在$T$上获得性能改善，则我们就说该程序对$E$进行了学习。 机器学习的模型分类 归纳学习：从样例中学习。 机械学习：死记硬背式学习。 进化学习、强化学习：在问题求解和规划中学习。 类比学习（如迁移学习）：通过观察和发现学习。 示教学习（如机器人模仿人的动作）：从指令中学习。Tips:进化学习来源于达尔文的进化理论，遗传算法是进化学习的经典方法。 一个非常优秀的机器学习资源网址(还未仔细查看) 本节课的主要内容 以监督学习为例，谈一下学习的策略和学习的算法。 机器学习的发展史 几何模型 机器学习系统构成的要素 任务：可通过机器学习解决的问题。 特征：适用于样本集合中任意实例的度量方法。 模型：从数据中学习以便解决给定任务的系统方法。 学习算法的核心策略 + 求解算法一些基本概念： 损失函数 期望损失：损失函数的期望 （理论上存在，但是很难利用它） 打公式真的麻烦死了😡，公式都直接用图片好了 经验风险（又称“经验损失”） 模型关于训练样本的平均损失。根据大数定律，当样本的容量趋于无穷大时，经验损失无限趋近于期望损失。 策略1：经验风险最小化可以用此公式推导$f(x)$当样本小或者取样有问题的时候容易出现过拟合。 策略2：结构风险最小化加入正则化项，使模型不要太“特例”，避免过拟合。 求解算法：机器学习的学习算法本质上是一个优化问题求解算法。 至此，机器学习的概念已经全部结束。机器学习能干什么？列出四五个机器学习的分类，不同的分类下面能列出3.4个机器学习的算法，不同的模型怎样度量自己的风险。 机器学习的发展详见博客地址classic alg 黄色的点是基于神经网络 机器学习的历史：（上课随便记了一点，不重要的）详细资料：机器学习的历史 1949年，Hebb提出了神经心理学学习范式，这为以后的神经网络奠下基础。 1957年，Rosenblatt提出了感知器算法，是神经网络的基础。 1995年，Vapnik和Cortes提出的支持向量机（网络）（SVM） 不一定所有模型都套用深度学习，有很多其他解决问题的模型。 从样例中学习： 符号主意——“对智能行为的符号化建模”。概念学习的结果可以是显性的。 连接主意——基于神经网络。效果更好，但是知识是隐性的。 统计学习——基于数据构建概率统计模型并运用模型对数据进行预测分析。 深度学习——深度学习缺乏严格的理论基础，但是显著降低了应用者的门槛。学习深度学习的时候关心一下开源的软件。 第二章、几何模型任务、模型、策略、算法有一些数据的几何特征，如直线、曲线、平面、距离等，有助于我们区分样本的分布特征。利用几何特征构建的机器学习模型，我们称之为几何模型。几何模型主要包括线性分类器、支持向量机、最近邻算法以及K均值聚类等。 线性分类问题如果存在某个线性决策面能够将两类样本分离，则称所给数据集是线性可分的。 基本线性分类器体现了经验风险最小化。 Fisher线性分类器 基本原理：找到一个最合适的投影轴，使两类样本在该轴上的投影之间的举例尽可能远，而每一类样本的投影尽可能紧凑，从而使分类效果最佳。]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>几何模型</tag>
        <tag>线性分类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[口译英语学习笔记（1）]]></title>
    <url>%2F201909%2F%E5%8F%A3%E8%AF%91%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[口译英语课程，周四晚，李平老师。周四对我来说是另一种意义上的“辛苦”的一天。上午要上男神的Linux，下午网球、健身房，晚上还有口译训练。口译是非常辛苦的过程，老师说她原先翻译一天整个人神经紧张到无法松弛下来了，听到别人说话就想翻译。 比较幸运的是，选这门课的人还不到十个人，所以每个人训练的机会都很多，希望能通过这门课程提高自己的口语和听力能力吧。 Gains:Knowledge Points 大学四年学生说法：大一 freshman大二 sophomore大三 junior大四 senior 北京师范大学 Beijing Normal School中国政法大学 China University of Political Science and Law工商管理硕士 MBA Master of Business Administration 研究生 postgraduates本科生 undergraduates Give birth to 生了…Intensive reading 精读 Tips：翻译时如果不确定可以只翻译中心词 Archery 射箭场Oral English 口语爱情长跑 love marothon（马拉松）Middle schoolers 中学生大约400 400 about早产儿 premature有时我绘画。 Seldom I draw.硕士研究生 master candidate长足的进步 leap forward谢谢我的翻译者。 Thanks for my interpreter.摇滚乐 rock and roll电子乐 electronic music消除隔阂、缩短差距 Bridge the gap“联络口译” liason interpreting同传箱 boothCoordinate 使协调，使相配合These shade coordinates with a wide range of other colors. 这种深浅的颜色可以与很多其他颜色搭配。不管怎么说我饿了。 I’m hungry anyway.Give me a break. 别说了。 Tips: 翻译时候要有自信。 初级英语口译70%: Quizzes, presentation, assignment30%: 期末考察 Basic conceptTranslation. Written translation 笔译Oral translation 口译 交传 consecutive 同传 simultaneous 视阅口译 sightInterpretation 一般不用这个词做“口译”，因为它大多数代表“解释”的意思。Interpreting 翻译的方法Literal: word for word 直译纸老虎 paper tiger一国两制 one nation two systems君子协定 gentleman’s agreement武装到牙齿 armed to the teeth Free 意译我铁石心肠。 I’m so hard.我难以接近。 I’m so difficult.我还想问你呢？ You have stolen my questions.秃子头上的虱子——明摆着。 It’s as plain as your nose in your face.胳膊拧不过大腿。 Little fish does not eat big fish. 口译的原则准、顺、快 口译员的素质： 对语言熟练，口语熟练 知识 “百科全书” 思维 技能 Problems:词汇量差的太多，无论是中译英还是英译中脑子都会断片。很多词仅仅是认识，但是不会用起来。 Solutions：注意词汇学习的深度，学会运用。]]></content>
      <categories>
        <category>口译英语</category>
      </categories>
      <tags>
        <tag>口译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据科学导论学习笔记（1）]]></title>
    <url>%2F201909%2F%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[数据科学导论作为数据科学与大数据技术专业的导论课程具有相当重要的意义。每周4课时（提前结课），授课教师石川老师。 希望新学期的自己能够积极完成每一门课程的课后复习和拓展，认真写博客整理知识点。 Chap.1 数据科学概论课程性质:一门导论性质的课程；包含理论知识和案例分析先修课程:高等数学，线性代数，概率论，数据结构，算法导论，计算机组成原理等后继课程:数据挖掘，数据库，机器学习，深度学习，大数据分析等 1.1 数据和大数据1.1.1 数据数据的定义:从数据科学的角度，将数据定义为，在一定背景下 有意义的 对于现实世界中的事物定性或定量的记录。数据的类型: 依据结构分类 :结构化数据：如数字、字符、日期等等属于结构化数据类型；非结构化数据：文字、图片、视频、音频等； 依据形式分类 :文本、数字、声音、图片等 依据来源分类:观测数据和实验数据 数据的DIKW模型:DIKW模型通常也被称为知识金字塔，是一个金字塔状的层状模型。Data, Infomation, Knowledge, Wisdom 1.1.2 大数据大数据的定义:1998年的 USENIX 大会上，美国硅图公司的首席科学家 John R.Mashey 首次提出了“大数据”这一概念，发表了名为《大数据与下一次基础设施压力的浪潮》的报告。首先，大数据依旧是数据，或数据相关的过程；其次，大数据的规模并非一定要达到某一确切的数值，关键在于，是否超过了实际情况下的数据存储能力和数据计算能力。 大数据相关定理与模型:（1）5V模型多样性（ Variety ），大量性（ Volume ），高速性（Velocity），价值性（ Value ），真实性（Veracity） （2）5R模型从数据管理的角度认识从大数据中获取有用信息的过程。该模型包括大数据的相关特性（Relevant），实时特性（Realtime），真实特性（Realistic），可靠特性（Reliable），以及投资回报特性（Return on investment, ROI） 值得注意的是5R模型中的投资回报（`ROI`）。许多的大数据项目最初关注的重点只是数据本身的利用，而没有认识到对数据的利用怎么与整个商业计划相适应，忽略了数据之下的知识的价值。 （3）4P模型在医疗大数据的环境中产生了医学4P模型，包含预测性（Predictive），预防性（Preventive），个体化（Personalized），参与性（Participatory）。该医疗模型基于大数据，对疾病做出预测，并基于个人数据对病人做出个性化的服务，同时，诊疗过程中的数据将再次被记录到数据库中，从而为病人提供基于大数据的健康建议。 （4）HACE定理用于阐述大数据的定理HACE定理将大数据描述为，始于异构（Heterogeneous）,自治（Autonomous）的多源海量数据，旨在寻求探索复杂的（Complex）和演化的（Evolving）数据关联的方法和途径。基于HACE定理，文章还提出了大数据处理的三层框架。 框架的第一层是大数据的计算平台。 框架的第二层是大数据的语义和应用知识，包含数据共享与隐私、领域和应用知识的问题。 框架的第三层是大数据分析算法。 1.2 数据科学理论基础1.2.1 数据科学发展历程仅记录几个时间节点 1974年，图灵奖获得者 Peter Naur 首次提到了“数据科学”的概念。 2002年，CODATA创立了学术期刊&lt; Data Science Journal &gt;，这是首个关于数据科学的学术期刊。 2009年，谷歌首席经济学家Hal Ronald Varian发表意见称，未来十年最性感的工作是统计学家。 2010年，作家Kenneth Cukier 在《经济学人》中发表特别报告提出，“数据科学家作为一种新的职业出现，他们具备了软件程序员，统计学家和讲故事者的技能，用来提取大量数据背后隐藏的规律” 2010年，Drew Conway在文章中指出，“能够胜任工作的数据科学家需要学习很多方面东西”，并将其以韦恩图的形式总结为黑客技能、数学和统计学知识、以及专业领域知识。 1.2.2 数据科学的主要内容研究内容和研究对象:现实世界中来源不同类型不同的数据。 理论体系: Hacking skill：计算机科学、人工智能等方面的方法和技术。Math&amp;Statistics Knowledge：数学和统计学方法理论。Substantive Expertise：实质性领域知识。 数据科学与第四范式:2007年图灵奖得主 Jim Gray 在演讲中提出了“指数级增长的科学依据”背景下的数据密集型科学研究的第四范式。 几千年前，科学的星星之火刚刚点燃时的实验科学范式； 几百年前以牛顿的经典力学，麦克斯韦理论解释的电磁学，所代表的理论科学范式 几十年前的计算机科学范式 到信息爆炸的今天，我们需要从计算机科学中把数据密集型科学区分出来，作为一个新的、科学探索的第四种范式，这就是第四范式的由来。数据密集型范式 国际数据委员会（CODATA）原称国际科技数据委员会，是原国际科学联合会下属一级学术机构，其宗旨是推动科技数据应用，发展数据科学，促进科学研究，造福人类社会，成立于1966年，秘书处设在法国巴黎。国际科学联合会和国际社会科学联合会于2018年7月正式合并成为International Science Council (ISC)，国际科技数据委员会也相应更名为国际数据委员会，从ICSU下一个专门关注科学数据的跨学科的国际组织演变成ISC下推动大数据与数据科学发展的主要机构。 数据密集型科学由三个基本活动组成：数据采集、数据管理和数据分析。 数据科学与第四范式的联系在于，这两者是大数据研究的两大理论基础，前者是更广泛意义上的数据科学，后者是针对科学研究范式而言的。 1.3 数据科学应用实践1.3.1 数据科学家数据科学家的定义: 具有计算机科学技术，数学和统计学知识基础和实质性专业理论知识的人。 能够发现现实世界的问题，收集问题相关的数据，抽取数据中的信息，并解释数据背后的意义的人。 数据科学家的技能: 数据科学家的工作需要使用：Python, R, SQL, Hadoop, Spark, Java, SAS, C++, Tensorflow等语言、库或是工具。 1.3.2 数据科学工作流程 分析数据包括两步，第一步是探索性分析，第二步是通过机器学习算法和统计学模型对数据进行分析。探索性分析是指对已有的数据在尽量少的先验假定下进行探索，通过制图，制表，方程拟合等手段探索数据结构和规律的一种数据分析方法，适用于面对大量数据不知如何下手从何处分析的情况。 1.3.3 数据科学实践案例 医疗健康大数据 沃尔玛与社交大数据 大数据与智慧城市]]></content>
      <categories>
        <category>数据科学导论</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验室苦逼搬砖暑假生活纪实]]></title>
    <url>%2F201909%2F%E5%AE%9E%E9%AA%8C%E5%AE%A4%E8%8B%A6%E9%80%BC%E6%90%AC%E7%A0%96%E6%9A%91%E5%81%87%E7%94%9F%E6%B4%BB%E7%BA%AA%E5%AE%9E%2F</url>
    <content type="text"><![CDATA[记录一下自己暑假在实验室做的一些事情和收获吧。 虽然进步很小很缓慢，但总归是有的。 7月13日 关于论文的主要内容，学长进行了讲解： 任务目标：通过迁移学习实现用户对齐问题，并将对齐结果与其他的用户对其方法进行比较：其中的方法包括“监督类型的”和“非监督类型的”，最终论文里要将我们的方法与其他至少三四种方法进行比较。 下面的时间应该做到： 0）熟悉各数据集，每个数据集经过哪个函数变成什么样子？ myspace文件夹中，.node文件前一个数字表示结点标号，后面的表示用户名。 .edges文件每一行的两个数字表示边连接的两个节点。 aminer.tar.gz,flicker.tar.gz,lastfm.tar.gz,linkedin.tar,gz,livejournal.tar.gz这五个压缩包都是上面形式的点和边 aminer-linkedin.map.raw文件，将aminer.tar.gz文件中的结点映射到linkedin上 1）DRNE（将图表示矩阵转化成向量） 转化成的向量是什么格式？它是怎样表示矩阵的？它的输入和输出是怎样的？ 2）GAN的一个变种函数（生成相应的对齐结果） 它的输入和输出是怎样的？ 7月14日非常艰难的一天，DRNE作者的readme文档写错了，指令是错误的，我第一次接触这个看不懂debug信息，学长也没发现。最后发邮件问原作者才知道readme中把\打成了/🤬这一件事情花了我三天的时间，一开始以为自己的环境没搭建好，安装了各种库，利用anaconda创造了许多环境测试，我哭了。 关于安装tensorflow的方法： 莫凡Python ling’s bolg 安装时遇到的问题 上面这些乱七八糟的都不如直接pip install，觉得慢的话换成清华镜像资源清华大学开源软件镜像站 pypi镜像使用帮助 7月15日 学长又分配了两个任务，第一个是判断图是否为连通图。 其实要是只有几个点倒简单，但是仅仅接触了一点`Python`就要写个几千点判断连通图的程序，我想到的第一点是效率会非常低。。。最后这个代码学长亲自写了。 这里顺带复习了一下数据结构的东西 邻接矩阵与邻接表 邻接矩阵 边表 边集表，图的储存结构之一。边表由表头结点和表结点两部分组成，图中每个顶点均对应一个存储在数组中的表头结点。 边表存储了以点为起点的边的信息，邻接表存储了以点为出发点的点的信息。 edgelist边表中每行有两个数，表示这两个结点之间有边 python nx.has_path(G, source, target)用来判断是否为连通图 networkx库查阅资料：network资料NetworkX是一个用Python语言开发的图论与复杂网络建模工具，内置了常用的图与复杂网络分析算法，可以方便的进行复杂网络数据分析、仿真建模等工作。networkx支持创建简单无向图、有向图和多重图（multigraph）；内置许多标准的图论算法，节点可为任意数据；支持任意的边值维度，功能丰富，简单易用。network官方文档 发现文档里举的例子都是自己输入的个别的点，我可以先研究一下DRNE的代码，从里面得到一些有用的内容。 代码看不懂的地方，首先就是embedding：关于embedding 7月16日 CONSNET数据集： deepwalk-master先不用，做对比算法的 DRNE-master 用来做embedding的 GAN用来生成模型 关于anaconda的使用： Anaconda是一个方便的python包管理和环境管理软件，一般用来配置不同的项目环境。 我们常常会遇到这样的情况，正在做的项目A和项目B分别基于python2和python3，而第电脑只能安装一个环境，这个时候Anaconda就派上了用场，它可以创建多个互不干扰的环境，分别运行不同版本的软件包，以达到兼容的目的。 Anaconda通过管理工具包、开发环境、Python版本，大大简化了你的工作流程。不仅可以方便地安装、更新、卸载工具包，而且安装时能自动安装相应的依赖包，同时还能使用不同的虚拟环境隔离不同要求的项目。 Anaconda入门 7月17日 conda有一点好处是，如果你需要安装一个包，系统将自动检查这个包需要的前置包并且安装，比如你要安装TensorFlow，而TensorFlow会用到很多像前置包像pandas、matiplot等，如果你在单纯的python下没有安装pandas等包就直接安装TensorFlow，那么和有可能无法使用，而使用conda安装TensorFlow将会询问你并自动帮你把缺少的前置包安装好 使用anaconda先创建一个用于drne的环境 安装以上环境 其中添加的资源库都没有tensorflow == 1.2.0 按照提示 To search for alternate channels that may provide the conda package you’re looking for, navigate to https://anaconda.org and use the search bar at the top of the page. 去官网搜索资源即可下载 环境安装完成 anaconda跑不出来，先学习anaconda的使用方法： anaconda1 anaconda2 anaconda3 7月19日继续研究network库 7月21日研读networkx的文档，在后面处理相关问题的时候会简单很多。在学习图的过程中，遇到的问题： 最后一行输出，我记得莫凡python里有讲这个，关于迭代器的东西，然后搜索了一下，继续进行学习：Python迭代器 任务：写一个可以将ground truth抽样的函数，给定一个列表，例如[0.3， 0.5， 0.7]，0.3表示在groundtruth里面随机抽样30%，并生成名为new-gt-0.3.txt的文件，列表长度为多少，就生成多少个这样的文件。 7月22日readme文档中AcrossNetworkEmbeddingData文件夹里的文件和实际文件夹里的不一样，是否有问题？ anchor users 定位用户 7月23日读学长写的： 连通图代码numpy.zeroshttps://blog.csdn.net/qq_28618765/article/details/78085457 抽样代码自己完成：数据转换代码python open函数的参数https://www.runoob.com/python/python-func-open.html if __name__ == "__main__": main() https://blog.csdn.net/qq_33254870/article/details/81668297 https://cloud.tencent.com/developer/ask/172682 一定要系统地学一下python！要不然什么都不会，写起来效率太低了！！ 怎样用csvreader读入用tab分隔的文件——直接用\t https://www.runoob.com/python/att-list-len.html for while if后面都要有冒号 python的‘和’符号是 and 关于newline参数 7月24日 把trans_result打成了tranns_result，出现问题，，，，， python也没有报错，还好自己发现了 i = 0 while(i &lt; len(trans_result)): # print("Delete process...") if(trans_result[i][0] == 0 or trans_result[i][1] == 0): trans_result = np.delete(trans_result, i, axis = 0) else:#！！！！注意这里的else！！！否则会出错 i = i + 1 ❤️ 🧡 💛 💚 💙 💜 中间几天帮张老师查项目资料来着——关于“认知计算”和“意图推理” 7月31日如何调出eclipse左边文件栏 anaconda prompt 切换到e盘： drne配适自己的代码：activate for_drnee: 8月4日coursera视频无法播放https://blog.csdn.net/qq_39521554/article/details/79039548 欧式距离 https://www.cnblogs.com/kimkat/p/9938475.html 测试程序（把程序拆成几小部分） np.linalg.norm(vec1 - vec2) 读入部分，怎样读出来两个向量 python cookbook 真的能学到很多东西！！挺有用！ https://zhidao.baidu.com/question/115008008.html https://www.cnblogs.com/bakari/p/4807847.html 8月5日 查数据类型：https://www.cnblogs.com/carlber/p/9362584.html 列表最后有一个逗号，就会多出来一个空元素https://www.cnblogs.com/lostme/articles/8857083.html operands could not be broadcast together with shapes (2,) (250,)https://blog.csdn.net/Odyssues_lee/article/details/85244735 运行map（）后，报：map object at 0x02629E50解决方法与原因分析​​​​​​​https://blog.csdn.net/weixin_40807247/article/details/82797378 https://www.cnblogs.com/hwd9654/p/5707920.html 从字符串中提取数字：https://www.cnblogs.com/dancesir/p/11021829.html python中，“”是什么意思？怎么解决？https://zhidao.baidu.com/question/329317296.html 数据格式要求很严格：3 25 47 69 7tab和x个空格不一样 输出百分比：https://blog.csdn.net/u013553529/article/details/78567696 8月7日博客搭建https://blog.csdn.net/fangquan1980/article/details/80648171 https://blog.csdn.net/zyupupup/article/details/85098366 https://blog.csdn.net/weixin_42419856/article/details/81141546 https://blog.csdn.net/lvsehaiyang1993/article/details/80881433 http://zhangchunlei.com/blog/2014/12/01/modify-a-record-of-my-website-dns/ On a Windows machine, you&apos;ll want to run nslookup your-domain.com and ensure that the output does not include any of the deprecated IP addresses (207.97.227.XXX, 204.232.175.XX, or 199.27.73.XXX).If you&apos;re on a Mac or Linux machine, simply paste this command into a terminal window, replacing your-domain.com with, your site&apos;s domain. dig your-domain.com | grep -E &apos;(207.97.227.245|204.232.175.78|199.27.73.133)&apos; || echo &quot;OK&quot;. If you see the word &quot;OK&quot;, you&apos;re all set. https://blog.csdn.net/a1023182899/article/details/77461567 8月8日https://www.v2ex.com/amp/t/465570 LINE（PALE中）GAN画圈 8月11日xlrd模块：https://www.cnblogs.com/insane-Mr-Li/p/9092619.html 8月13日 random.choiceshttps://blog.csdn.net/lcqin111/article/details/83504029 Cannot feed value of shape (256, 255) for Tensor ‘Placeholder:0’, which has shape ‘(?, 256)’http://www.mamicode.com/info-detail-2346029.html for i in range(4000): print("--------------training---------DDDDDD----------EPOCH：" + str(i) + "-----------------------") for j in range(5): mm = np.reshape(random.choices(f_d, f_g, k=256)) nn = np.reshape(random.choices(t_d, t_g, k=256)) rms_train1, loss1 = sess.run([model.rms_train_op1, model.loss_d], feed_dict=&#123;model.s: np.array(random.choices(f_d, f_g, k=256)), model.t: np.array(random.choices(t_d, t_g, k=256))&#125;) for every in model.clip: sess.run(every) 总结7.13了解任务详情 7.14装相应的环境，跑DRNE，发现了文档的错误DRNE在命令行窗口运行。输入：edgelist输出：.npy（需要再写程序转换为embedding） 7.15想要完成任务：判断是否为连通图结果就是不行，， 7.16还在为DRNE的无脑错误 debug 7.17学习了anaconda的使用，还在跑DRNE，， 7.18DRNE，， 7.19完成一个可以将ground truth抽样的函数，例如[0.3, 0.5, 0.7] 7.21学习关于图的内容，不敢下手自己写代码 7.22开始跑IONE（java） 7.23数据转换代码，将cosnet数据集中的用户名转换成结点号 7.24删去edges里面没有在groundtruth中出现的记录，以此来缩小数据集 7.25用学长改过的代码跑ione 7.31用anaconda环境跑DRNE 8.4写计算距离，画圈的代码 8.5计算距离的代码，注意数据格式 8.7博客搭建 8.8跑PALE中的LINE，尝试WGAN 8.11跑学长改过的WGAN 8.11跑学长改过的WGAN完成，DRNE结果的npy转成txt]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>迁移学习</tag>
        <tag>Anaconda</tag>
        <tag>DRNE</tag>
        <tag>IONE</tag>
        <tag>WGAN</tag>
        <tag>PALE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-next主题写作尝试]]></title>
    <url>%2Fhexo-next%E4%B8%BB%E9%A2%98%E5%86%99%E4%BD%9C%E5%B0%9D%E8%AF%95%2F</url>
    <content type="text"><![CDATA[[x] links, formatting, and tags supported [x] list syntax required (any unordered or ordered list supported) [x] this is a complete item [ ] this is an incomplete item Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 这是文字 上面是分割线 上面是空行 文件位置：/images/tst.pyimport csv+ import numpy as np- import numpy Your browser does not support the audio tag. 欢迎 内容 内容 内容 已完成 未完成 primary, info, success, warning, danger, info 已完成 未完成 &lt;/i&gt; 普通 变大 33% 两倍大 warning 人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！ 首页]]></content>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（27）]]></title>
    <url>%2F201905%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8827%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY27_LDT与库1. 先来修复bugbug：用nsct命令运行的应用程序，无论是按Shift+F1还是点击窗口的”x”按钮狗没有反应。task_run(task, -1, 0); 2. 应用程序运行时关闭命令行窗口 目标：在应用程序运行的时候无法关闭所对应的命令行窗口。 修改：1.让系统在按下”x”按钮的时候暂且将命令行窗口从画面上隐藏起来。（因为关闭命令行窗口会有延迟） 当FIFO接收到从console.c发送的“关闭窗口”请求数据时所进行的处理，主要是释放指定的图层。 3. 保护应用程序(1)破坏程序：[FORMAT &quot;WCOFF&quot;] [INSTRSET &quot;i486p&quot;] [BITS 32] [FILE &quot;crack7.nas&quot;] GLOBAL _HariMain [SECTION .text] _HariMain: MOV AX,1005*8 MOV DS,AX CMP DWORD [DS:0x0004],&apos;Hari&apos; JNE fin ; 不是应用程序，因此不执行任何操作 MOV ECX,[DS:0x0000] ; 读取该应用程序数据段的大小 MOV AX,2005*8 MOV DS,AX crackloop: ; 整个用123填充 ADD ECX,-1 MOV BYTE [DS:ECX],123 CMP ECX,0 JNE crackloop fin: ; 结束 MOV EDX,4 INT 0x40 4. 保护应用程序(2)CPU为我们提供了解决方案，那就是LDT。GDT: global descriptor tableLDT: local descriptor table其中GDT中的段设置是供所有任务通用的，而LDT中的段设置只对某个应用程序有效。 5. 优化应用程序的大小那么我们该怎么办呢？我们可以将这些函数做成不同的.obj文件，将_api_putchar等需要用到的函数和_api_openwin等不需要用到的函数分离开。 6. 库如果像上一节那样，把函数拆分开来，并用连接器来进行连接的话，我们需要创建很多很多个.obj文件。当然，如果不拆分函数，而是做成一个大的.obj文件也可以（如同a_nask.obj），但这样的话应用程序没有引用的函数也会被包含进去，生成的应用程序文件就会像之前那样无端增大很多。库：将很多个.obj文件打包成一个文件。要创建一个库，我们首先需要.obj文件作为原材料，除此之外，我们还需要一个叫做库管理器的程序。GOLIB = $(TOOLPATH)golib00.exe apilib.lib : Makefile $(OBJS_API) $(GOLIB) $(OBJS_API) out:apilib.lib a.bim : a.obj apilib.lib Makefile $(OBJ2BIM) @$(RULEFILE) out:a.bim map:a.map a.obj apilib.lib void api_putchar(int c); void api_putstr0(char *s); void api_putstr1(char *s, int l); void api_end(void); int api_openwin(char *buf, int xsiz, int ysiz, int col_inv, char *title); void api_putstrwin(int win, int x, int y, int col, int len, char *str); void api_boxfilwin(int win, int x0, int y0, int x1, int y1, int col); void api_initmalloc(void); char *api_malloc(int size); void api_free(char *addr, int size); void api_point(int win, int x, int y, int col); void api_refreshwin(int win, int x0, int y0, int x1, int y1);void api_linewin(int win, int x0, int y0, int x1, int y1, int col); void api_closewin(int win); int api_getkey(int mode); int api_alloctimer(void); void api_inittimer(int timer, int data); void api_settimer(int timer, int time); void api_freetimer(int timer); void api_beep(int tone); #include &quot;apilib.h&quot; 7. 整理make环境整理操作系统、库、应用程序的文件和代码。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git教程——分布式版本控制系统]]></title>
    <url>%2F201908%2FGit%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[一、Git简介功能：备份历史版本，合并多人的修改。结束手动管理多个版本的时代。 1. Git的诞生（Linux公司NB就完事儿了）2. 集中式vs分布式 集中式版本控制系统版本库存放在==中央服务器==，要先从中央服务器获取最新版本，然后干活，干完活儿了再把自己的改动推送给中央服务器。缺点：必须联网才能工作。 分布式版本控制系统 没有“中央服务器”，每个人的电脑都是一个完整的版本库。两个用户都修改了文件，那么他们只需要把各自的修改推送给对方。 优点：安全性，因为版本库分布在多个电脑上。 分布式版本控制系统通常也有一台充当“中央服务器” 的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。 当然，Git的优势不单是不必联网这么简单，Git还有极其强大的分支管理。 3. 安装Git4. 创建版本库版本库又名仓库，英文名repository。这是一个目录，这个目录里多有的文件都可以被Git管理起来。每个文件的修改、删除，Git都能跟踪。 选择一个合适的地方创建一个空目录 $ mkdir /e/learngit$ cd learngit$ pwd/e/learngit mkdir 在指定目录创建文件 cd 定位 pwd 显示当前目录 通过git init命令把这个目录变成Git可以管理的仓库。 $ git init 发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事不要手动修改这个目录里的文件，不然会把Git仓库破坏了。 把文件添加到版本库所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT, 网页,所有的程序代码等等。 Word格式是二进制格式，因此版本控制系统是没法跟踪Word文件的改动的。想要使用版本控制系统，就要以纯文本方式编写文件。 请使用UTF-8编码。 千万不要用Windows自带的记事本编辑任何文本文件。请用Notepad++代替记事本。记得把Notepad++的默认编码设置为UTF-8 without BOM。 编写一个readme.txt文件 将readme.txt保存在learngit目录下 git add添加文件到仓库 $ git add readme.txt 用命令git commit告诉Git，把文件提交到仓库。 $ git commit -m &quot;write a readme file&quot; 为什么需要add,commit两步呢？因为commit可以一次提交很多文件，所以可以多次add不同的文件。 二、 时空穿梭机git status 掌握工作区的状态。 git diff 查看修改内容。 1. 版本回退 Head指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset —hard commit_id 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog 查看历史命令，以便确定要回到未来的哪个版本。 2. 工作区和暂存区 工作区(Workign Directory) 你在电脑里能看到的目录 版本库(Repository) 工作区的隐藏目录.git，这个不算工作区，而是Git的版本库。 Git的版本库里有很多东西，其中最重要的就是称为stage(或index)的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。 git add实际上就是把文件修改添加到暂存区。 git commit 就是把暂存区的所有内容提交到当前分支。 3. 管理修改Git跟踪并管理的是修改，而非文件。 git diff HEAD -- readme.txt 查看工作区和版本库里面最新版本的区别。 每次修改，如果不用git add到暂存区，那就不会加入到commit中。 4. 撤销修改 撤销工作区 $ git checkout -- readme.txt 把readme.txt文件在工作区的修改全部撤销（在没有add之前，在工作区。等效于手动删除。） 撤销暂存区 $ git reset HEAD readme.txt 然后再按情况1撤销工作区。 撤销分支 详见“版本退回”那一节 但是如果提交到远程版本库，就完了。。。 5. 删除文件 删除分支上的文件 $ git rm test.txt$ git commit 误删了，要恢复 $ git checkout -- test.txt]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（26）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8826%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY26_为窗口移动提速1. 提高窗口的移动速度(1)导致窗口移动速度慢的原因有很多，其中之一就是sheet_refreshmap的速度太慢。这个函数在sheet_slide中被调用了两次，如果能提高它的速度效果应该会很明显。 2. 提高窗口的移动速度(2) sheet_refreshmap中有这样一句map[vy * ctl-&gt;xsize + vx] = sid; 在汇编语言中，如果我们用16位寄存器代替8位寄存器来执行MOV指令的话，相邻的地址中也会同时写入数据，而如果用32位寄存器，仅1条指令就可以同时向相邻的4个地址写入值了。更重要的是，即便是同时写入4个字节的值，只要指定地址是4的整数倍，指令的执行速度就和1个字节的MOV是相同的。也就是说，速度说不定能提高到原来的4倍！ 3.提高窗口移动速度(3)于是我们首先想到了sheet_refreshsub，窗口移动的时候也调用了这个函数，因此通过修改它可以提高窗口移动的速度，此外其他一些地方也会调用这个函数。 4.提高窗口移动速度(4)为什么明明已经放开了鼠标键，窗口却还在挪动呢？这是因为伴随图层移动所进行的绘图操作非常消耗时间，导致系统来不及处理FIFO中的鼠标移动数据。那么我们可以在接收到鼠标移动数据后不立即进行绘图操作，但如果一直不绘图的话鼠标和窗口就静止不动了，那不就没意义了吗？我们可以等FIFO为空时再进行绘图操作嘛。 5.启动时只打开一个命令行窗口一般都是先打开一个命令行窗口，然后根据需要增加。下面我们就将启动时显示的命令行窗口数量改为一个，并且实现可以随意启动新命令行窗口的功能吧。 在Windows中，即便不在命令行中输入命令，只通过鼠标的操作也可以打开新的命令行窗口。不过鼠标点击开始菜单这种方式实现起来太难，我们还是做快捷键吧。 6.增加更多的命令行窗口7. 关闭命令行窗口(1)在Windows的命令行窗口中，输入“exit”命令就可以关闭当前窗口.在关闭一个命令行窗口时系统需要做些什么事呢？首先需要将创建该窗口时所占用的内存空间全部释放出来，然后还需要释放窗口的图层和任务结构。咦，问题来了，在创建任务时我们为命令行窗口准备了专用的栈，却没有将这个栈的地址保存起来，这样的话就无法执行释放操作了。怎么办呢？我们可以在TASK结构中添加一个cons_stack成员，用来保存栈的地址。 8. 关闭命令行窗口(2)实现用鼠标关闭命令行窗口的功能。当鼠标点击窗口上的“×”按钮时，向命令行窗口任务发送4这个数据，命令行窗口接收到这个数据后则开始执行exit命令的程序。 9.start命令Windows的命令行窗口里有一个start命令，它的功能是可以打开一个新的命令行窗口并运行指定的应用程序。void cmd_start(struct CONSOLE *cons, char *cmdline, int memtotal) &#123; struct SHTCTL *shtctl = (struct SHTCTL *) *((int *) 0x0fe4); struct SHEET *sht = open_console(shtctl, memtotal); struct FIFO32 *fifo = &amp;sht-&gt;task-&gt;fifo; int i; sheet_slide(sht, 32, 4); sheet_updown(sht, shtctl-&gt;top); /*将命令行输入的字符串逐字复制到新的命令行窗口中*/ for (i = 6; cmdline[i] != 0; i++) &#123; fifo32_put(fifo, cmdline[i] + 256); &#125; fifo32_put(fifo, 10 + 256); /*回车键*/ cons_newline(cons); return; &#125; 10. ncst命令用start命令启动应用程序看起来很不错，但如果运行color这样的程序的话，我们并不希望真的新开一个命令行窗口出来，反倒是没有这个多余的窗口比较好。那么下面我们就来做一个不打开新命令行窗口的start命令吧，给它起个名字，叫做“no console start”，简称ncst命令。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（25）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8825%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY25_增加命令行窗口1.蜂鸣器发声蜂鸣器发声EDX=20 EAX=声音频率（单位是mHz，即毫赫兹）例如当EAX=4400000时，则发出440Hz的声音频率设为0则表示停止发声 int *hrb_api(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax) &#123; （中略） &#125; else if (edx == 20) &#123; if (eax == 0) &#123; i = io_in8(0x61); io_out8(0x61, i &amp; 0x0d); &#125; else &#123; i = 1193180000 / eax; io_out8(0x43, 0xb6); io_out8(0x42, i &amp; 0xff); io_out8(0x42, i &gt;&gt; 8); i = io_in8(0x61); io_out8(0x61, (i | 0x03) &amp; 0x0f); &#125; &#125; return 0; &#125; 2.增加更多的颜色(1)修改graphic.cvoid init_palette(void) &#123; static unsigned char table_rgb[16 * 3] = &#123; （中略） &#125;; unsigned char table2[216 * 3]; int r, g, b; set_palette(0, 15, table_rgb); for (b = 0; b &lt; 6; b++) &#123; for (g = 0; g &lt; 6; g++) &#123; for (r = 0; r &lt; 6; r++) &#123; table2[(r + g * 6 + b * 36) * 3 + 0] = r * 51; table2[(r + g * 6 + b * 36) * 3 + 1] = g * 51; table2[(r + g * 6 + b * 36) * 3 + 2] = b * 51; &#125; &#125; &#125; set_palette(16, 231, table2); return; &#125; 3.增加更多的颜色(2)我们可以用两种颜色交替排列，看上去就像这两种颜色混合在一起一样，这就是要点。颜色的混合方式我们考虑了下面3种（算上完全不混合的情况，一共有5种）。 4. 窗口初始位置因此我们希望让窗口总是显示在画面的中央，而且显示窗口时的图层高度也不能总是固定为3，而是要判断当前画面中窗口的数量并自动显示在最上面。 5. 增加命令行窗口(1)于是，我们这次只修改bootpack.c，将命令行窗口的相关变量（buf_cons、sht_cons、task_cons和cons）各准备2个，分别分给命令行1和命令行2。 6.增加命令行窗口(2)struct CONSOLE *cons = (struct CONSOLE *) *((int *) 0x0fec); 这里的cons变量是用来判断“要向哪个命令行窗口输出字符”的关键。该变量的值是从内存地址0x0fec读取出来的，而无论从哪个任务读取这个内存地址中的值，得到的肯定都是同一个值，因此不管在哪个窗口中运行a.hrb，都只能在固定的其中一个窗口中显示字符。 7. 增加命令行窗口(3)问题出在cmd_app身上set_segmdesc(gdt + 1003, finfo-&gt;size - 1, (int) p, AR_CODE32_ER + 0x60); set_segmdesc(gdt + 1004, segsiz - 1, (int) q, AR_DATA32_RW + 0x60); （中略） start_app(0x1b, 1003 * 8, esp, 1004 * 8, &amp;(task-&gt;tss.esp0)); 首先，color.hrb在某个窗口中被运行，启动程序一切顺利，然后显示窗口并绘图，接下来等待键盘输入并进入休眠状态。到这里为止没有任何问题。然后我们在另外一个窗口中运行color.hrb，程序也顺利启动了，显示窗口并绘图，随后进入休眠状态。然而在这个时候，问题其实已经发生了。这是怎么回事呢？因为我们为color.hrb准备的1003号代码段和1004号数据段，被color2.hrb所用的段给覆盖掉了。因此，当按下回车键唤醒color.hrb时，就会发生异常情况——明明应该去运行color.hrb的，结果却错误地运行了color2.hrb，这样当然会出错了。 8.增加命令行窗口(4)这次的修改也很简单，首先将原来task_cons[0]的地方改为key_wintask和shttask，这样一来，用键盘强制结束时会以当前输入窗口为对象，而用鼠标点击“×”按钮时会以被点击的窗口为对象。 9.变得更像真正的操作系统(1)10.变得更像真正的操作系统(2)这样肯定不行，因为命令行窗口任务的优先级比较低，只有当bootpack.c的HariMain休眠之后才会运行命令行窗口任务，而如果不运行这个任务的话，FIFO缓冲区就不会被初始化，这就相当于我们在向一个还没初始化的FIFO强行发送数据，于是造成fifo32_put混乱而导致重启。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（24）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8824%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY24_窗口操作1.窗口切换(1) 目标：实现切换窗口顺序得功能。 先实现按下F11时，将最下面得那个窗口放到最上面。 修改bootpack.cif (i == 256 + 0x57 &amp;&amp; shtctl-&gt;top &gt; 2) &#123; /* F11 */ sheet_updown(shtctl-&gt;sheets[1], shtctl-&gt;top - 1); &#125; 2. 窗口切换(2)我们需要按照从上到下得顺序，判断鼠标得位置落在哪个图层得范围内，并且还需要确保该位置不是透明色区域。for (j = shtctl-&gt;top - 1; j &gt; 0; j--) &#123; sht = shtctl-&gt;sheets[j]; x = mx - sht-&gt;vx0; y = my - sht-&gt;vy0; if (0 &lt;= x &amp;&amp; x &lt; sht-&gt;bxsize &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; sht-&gt;bysize) &#123; if (sht-&gt;buf[y * sht-&gt;bxsize + x] != sht-&gt;col_inv) &#123; sheet_updown(sht, shtctl-&gt;top - 1); break; &#125; &#125; &#125; 3.移动窗口当鼠标左键点击窗口时，如果点击位置位于窗口的标题栏区域，则进入“窗口移动模式”，使窗口的位置追随鼠标指针的移动，当放开鼠标左键时，退出“窗口移动模式”，返回通常模式。if (mmx &lt; 0) &#123; /*如果处于通常模式*/ /*按照从上到下的顺序寻找鼠标所指向的图层*/ for (j = shtctl-&gt;top - 1; j &gt; 0; j--) &#123; sht = shtctl-&gt;sheets[j]; x = mx - sht-&gt;vx0; y = my - sht-&gt;vy0; if (0 &lt;= x &amp;&amp; x &lt; sht-&gt;bxsize &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; sht-&gt;bysize) &#123; if (sht-&gt;buf[y * sht-&gt;bxsize + x] != sht-&gt;col_inv) &#123; sheet_updown(sht, shtctl-&gt;top - 1); if (3 &lt;= x &amp;&amp; x &lt; sht-&gt;bxsize - 3 &amp;&amp; 3 &lt;= y &amp;&amp; y &lt; 21) &#123; mmx = mx; /*进入窗口移动模式*/ mmy = my; &#125; break; &#125; &#125; &#125; &#125; else &#123; /*如果处于窗口移动模式*/ x = mx - mmx; /*计算鼠标的移动距离*/ y = my - mmy; sheet_slide(sht, sht-&gt;vx0 + x, sht-&gt;vy0 + y); mmx = mx; /*更新为移动后的坐标*/ mmy = my; &#125; &#125; else &#123; /*没有按下左键*/ mmx = -1; /*返回通常模式*/&#125; 4.用鼠标关闭窗口5.将输入切换到应用程序窗口按下Tab键时将键盘输入切换到当前输入窗口下面一层的窗口中，若当前窗口为最下层，则切换到最上层窗口。 if (key_win == sht_win) &#123; /*发送至任务A */ if (cursor_x &lt; 128) &#123; /*显示一个字符并将光标后移一位*/ s[1] = 0; putfonts8_asc_sht(sht_win, cursor_x, 28, COL8_000000, COL8_FFFFFF, s, 1); cursor_x += 8; &#125; &#125; else &#123; /*发送至命令行窗口*/ fifo32_put(&amp;key_win-&gt;task-&gt;fifo, s[0] + 256); &#125; &#125; if (i == 256 + 0x0e) &#123; /*退格键*/ if (key_win == sht_win) &#123; /*发送至任务A */ if (cursor_x &gt; 8) &#123; /*用空格擦除光标后将光标前移一位*/ putfonts8_asc_sht(sht_win, cursor_x, 28, COL8_000000, COL8_FFFFFF, " ", 1); cursor_x -= 8; &#125; &#125; else &#123; /*发送至命令行窗口*/ fifo32_put(&amp;key_win-&gt;task-&gt;fifo, 8 + 256); &#125; &#125; if (i == 256 + 0x1c) &#123; /*回车键*/ if (key_win != sht_win) &#123; /*发送至命令行窗口*/ fifo32_put(&amp;key_win-&gt;task-&gt;fifo, 10 + 256); &#125; &#125; if (i == 256 + 0x0f) &#123; /* Tab键*/ cursor_c = keywin_off(key_win, sht_win, cursor_c, cursor_x); j = key_win-&gt;height - 1; if (j == 0) &#123; j = shtctl-&gt;top - 1; &#125; key_win = shtctl-&gt;sheets[j]; /*到此结束*/ cursor_c = keywin_on(key_win, sht_win, cursor_c); &#125; 6.用鼠标切换输入窗口目标：让操作系统可以通过简单的点击就能完成输入切换。 7.定时器API获取定时器（alloc）EDX=16 EAX=定时器句柄（由操作系统返回）设置定时器的发送数据（init）EDX=17 EBX=定时器句柄EAX=数据定时器时间设定（set）EDX=18 EBX=定时器句柄EAX=时间释放定时器（free）EDX=19 EBX=定时器句柄 8.取消定时器问题：应用程序设置了一个1秒的定时器，当定时器到达指定时间时会产生超时，并向任务发送事先设置的数据。问题是，如果这时应用程序已经结束了，定时器的数据就会被发送到命令行窗口，而命令行窗口肯定是一头雾水。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「迁移学习简明手册」学习笔记（1）]]></title>
    <url>%2F201908%2F%E3%80%8C%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E7%AE%80%E6%98%8E%E6%89%8B%E5%86%8C%E3%80%8D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.迁移学习的基本概念1.2 迁移学习基本概念 核心问题：找到新问题和原问题之间的相似性，才可以顺利地实现知识的迁移。 定义：迁移学习，是指利用数据、任务、或模型之间的相似性，将在旧领域学习过的模型，应用在新领域的一种学习过程。 1.3 为什么要迁移学习这个表格包括了1.3的所有内容，可以只看这个表格： 1.大数据与少标注之间的矛盾 2.大数据与弱计算之间的矛盾 3.普适化模型与个性化需求之间的矛盾机器学习的目标是构建一个尽可能通用的模型，而人们的个性化需求五花八门，短期内根本无法用一个通用的模型去满足。 4.特定应用的需求推荐系统的冷启动问题：一个新的推荐系统，没有足够的用户数据，如何进行精准的推荐；一个崭新的图片标注系统，没有足够的标签，如何进行精准的服务？ 针对以上问题，迁移学习是如何解决的呢？ 1.迁移数据标注 2.模型迁移（将那些大公司在大数据上训练好的模型，迁移到我们的任务中） 3.自适应学习（对普适化模型进行灵活的调整，以便完成我们的任务） 4.相似领域知识迁移 1.4 与已有概念的区别和联系1.迁移学习和机器学习迁移学习属于机器学习的一类 2.迁移学习和多任务学习多任务学习指多个相关的任务一起协同学习。 3.迁移学习和终身学习终身学习是在已经学习好若干个任务之后，面对新的任务可以继续学习而不遗忘之前学习的任务。 4.迁移学习和领域自适应5.迁移学习和增量学习增量学习侧重解决数据不断到来，模型不断更新的问题。 6.迁移学习和自我学习自我学习指的是模型不断地从自身处进行更新 7.迁移学习和协方差漂移协方差漂移指数据地边缘概率分布发生变化 1.5 负迁移（“东施效颦”）如果两个领域之间不存在相似性，或者基本不相似，那么就会大大损害迁移学习地效果。这时候，我们可以说出现了==负迁移(Negative Transfer)== 定义：在源域上学习到的知识，对于目标域上的学习产生负面作用。 产生负迁移的原因： 数据问题 方法问题：源域和目标域是相似的，但是迁移学习的方法不够好。 传递迁移学习：传统迁移学习好比是踩着一块石头过河，传递迁移学习就是踩着连续的两块石头。当两个领域不相似时，传递迁移学习却可以利用处于这两个领域之间的若干领域，将知识传递式的完成迁移。 2.迁移学习的研究领域机器学习可分为有监督、半监督和无监督的机器学习三大类。迁移学习也可以进行这样的分类。 分类的四个准则：按目标域有无标签分、按学习方法分、按特征分、按在线形式分 2.1 按目标域标签分 1.监督迁移学习 Supervised Transfer Learning 2.半监督迁移学习 Semi-Supervised Transfer Learning 3.无监督迁移学习 Unsupervised Transfer Learning 显然，少标签或无标签的问题（半监督和无监督迁移学习），是研究的热点和难点。 2.2 按学习方法分类 1.基于样本的迁移学习方法(Instance based Transfer Learning)通过权重重用，对源域和目标域的样例进行迁移 2.基于==特征==的迁移学习方法(Feature based Transfer Leaning)意思是说，假设源域和目标域的特征原来不在一个空间，或者说它们在原来那个空间上不相似，那我们就想办法把它们变换到一个空间里面，那这些特征不就相似了？ 3.基于==模型==的迁移学习方法(Model based Transfer Leaning)构建参数共享的模型 4.基于关系的迁移学习方法(Relation based Transfer Learning)挖掘和利用关系进行类比迁移 2.3 按特征分类 1.同构迁移学习(Homogeneous Transfer Learning) 2.异构迁移学习(Heterogeneous Transfer Learning)如果特征语义和维度都相同，那么就是同构；反之，如果特征完全不相同，那么就是异构。举个例子来说，不同图片的迁移，就可以认为是同构；而图片到文本的迁移，则是异构的。 2.4 按离线与在线形式分 1.离线迁移学习(Offline Transfer Learning) 2.在线迁移学习(Online Transfer Learning) 目前，绝大多数的迁移学习方法，都采用了离线方式。即，源域和目标域均是给定的，迁移一次即可。这种方式的缺点是显而易见的：算法无法对新加入的数据进行学习，模型也无法得到更新。与之相对的，是在线的方式。即随着数据的动态加入，迁移学习算法也可以不断地更新。 3.迁移学习的应用计算机视觉、文本分类、行为识别、自然语言处理、室内定位、视频监控、舆情分析、人机交互 3.1 计算机视觉同一类图片，不同的拍摄角度、不同光照、不同背景，都会造成特征分布发生改变。因此，使用迁移学习构建跨领域的鲁棒分类器是十分重要的。 3.2 文本分类由于文本数据有其领域特殊性，因此，在一个领域上训练的分类器，不能直接拿来作用到另一个领域上。这就需要用到迁移学习。例如，在电影评论文本数据集上训练好的分类器，不能直接用于图书评论的预测。这就需要进行迁移学习。 3.3 时间序列行为识别 (Activity Recognition) 主要通过佩戴在用户身体上的传感器，研究用户的行为。行为数据是一种时间序列数据。不同用户、不同环境、不同位置、不同设备，都会导致时间序列数据的分布发生变化。 3.4 医疗健康医疗领域研究的难点问题是，无法获取足够有效的医疗数据。 4.基础知识4.1迁移学习的问题形式化4.1.1 领域领域(Domain)是进行学习的主体。领域主要由两部分构成：数据和生成这些数据的概率分布。源领域：有知识、有大量数据标注的领域；目标域：我们最终要赋予知识、赋予标注的对象。 4.1.2 任务任务(Task)：学习的目标。由两部分组成：标签和标签对应的函数。 4.1.3 迁移学习领域自适应(Domain Adaptation) 4.2 总体思路开发算法来最大限度地利用有标注地领域地知识，来辅助目标领域的知识获取和学习。找到相似性 (不变量)，是进行迁移学习的核心。度量工作的目标有两点： 一是很好地度量两个领域的相似性，不仅定性地告诉我们它们是否相似，更定量地给出相似程度。 二是以度量为准则，通过我们所要采用的学习手段，增大两个领域之间的相似性，从而完成迁移学习。 一句话总结： ==相似性是核心，度量准则是重要手段。== 4.3 度量准则核心：衡量两个数据域的差异。 4.3.1 常见的几种距离 1.欧式距离 2.闵科夫斯基距离 3.马氏距离 4.3.2 相似度 1.余弦相似度 2.互信息 3.皮尔逊相关系数 4.Jaccard相关系数 4.3.3 KL散度与JS距离4.3.4 最大均值差异MMD(Maximun mean discrepancy)4.3.5 Principle Angle4.3.6 A-distance4.3.7 Hilbert-Schmidt Independence Criterion4.3.8 Wasserstein Distance4.4 迁移学习的理论保证这一部分有些难度。当自己提出的算法需要理论证明时，可以借鉴这一部分。 5.迁移学习的基本方法四种基本方法：基于样本的迁移，基于模型的迁移，基于特征的迁移，以及基于关系的迁移。 5.1 基于样本的迁移学习方法(Instance based Transfer Learning)如图，在迁移时，为了最大限度地和目标域相似，我们可以人为地提高源域中属于狗这个类别地样本权重。优缺点：虽然实例权重法具有较好的理论支撑、容易推导泛化误差上界，但这类方法通常只在领域间分布差异较小时有效，因此对自然语言处理、计算机视觉等任务效果并不理想。 5.2 基于特征迁移通过特征变换的方式互相迁移，来减少源域和目标域之间地差距；或者将源域和目标域的数据特征变换到统一特征空间中，然后利用传统的机器学习方法进行分类识别。根据特征的同构和异构性，又可以分为同构和异构迁移学习。这类方法通常假设源域和目标域间有一些交叉的特征。 5.3 基于模型学习基于模型的迁移方法 (Parameter/Model based Transfer Learning) 是指从源域和目标域中找到他们之间共享的参数信息，以实现迁移的方法。这种迁移方式要求的假设条件是：源域中的数据与目标域中的数据可以共享一些模型的参数。 5.4 基于关系迁移这种方法比较关注源域和目标域的样本之间的关系。这些文章都借助于马尔科夫逻辑网络 (Markov Logic Net)来挖掘不同领域之间的关系相似性。我们将重点讨论基于特征和基于模型的迁移学习方法，这也是目前绝大多数研究工作的热点。]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>迁移学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「第一行代码」学习笔记（2）]]></title>
    <url>%2F201904%2F%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Chap.2 先从看得到的入手——探究活动2.1 活动的定义活动是一种可以包含用户界面的组件，主要用于和用户交互。 2.2 活动的基本用法下面我们尝试自己创建一个项目。Android Studio在工作区间只允许打开一个项目。 2.2.1 手动创建活动在java-com.example.activitytest文件夹下创建FirstActivity活动 2.2.2 创建和加载布局Android的程序设计讲究逻辑和视图分离，最好每一个活动都能对应有一个布局。 创建布局 在活动中加载这个布局 2.2.3 在AndroidManifest文件中注册 （Android Studio已经帮我们注册好了） 配置主活动如果应用程序没有声明任何活动作为主活动，这个程序仍然可以正常安装，只是无法在启动器中看到或打开这个文件。这种程序一般都是作为第三方服务供其他应用程序在内部进行调用的，如支付宝快捷支付服务。 2.2.4 在活动中使用ToastToast是Android系统提供的一种非常好的提醒方式，在程序中可以使用它将一些短小的信息通知给用户，这些信息会在一段时间后自动消失，并且不会占用任何屏幕空间。 定义弹出Toast的触发点public class FirstActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.button_1); button1.setOnClickListener(new View.OnClickListener()&#123; @Override public void onClick(View v) &#123; Toast.makeText(FirstActivity.this,"You clicked Botton 1", Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125;&#125; 2.2.5 在活动中使用Menu2.2.6 销毁一个活动2.3 使用Intent在活动之间穿梭在启动器中点击应用的图标只会进入到该应用的主活动，怎么才能由主活动跳转到其他活动呢？ 2.3.1 使用显式IntentIntent的“意图”非常明显，因此我们称之为显式Intent。 2.3.2 使用隐式Intent不指明我们要启动哪个程序，而是指定了一系列更为抽象的action和category等信息，然后交由系统去分析这个Intent，并帮助我们找出合适的活动去启动。 只有和中的内容同时能够匹配上Intent中指定的action和category时，这个活动才能响应该Intent。 https://www.jianshu.com/p/5bf828806125下面会有一个链接，让你装缺少的包 Cannot resolve symbol ‘R’(XXX)代码有问题，相应的名称没有定义。 修改代码 或者Alt+Enter https://www.jianshu.com/p/93678f8b3421 Intent是程序各组件之间进行交互的一种重要方式，可以指明当前组件想要执行的动作，可以在不同的组件之间传递数据。Intent一般可用于启动活动、启动服务以及发送广播等场景。 4.2 2.2.3 更多隐式Intent的用法 使用隐式Intent可以启动其他程序的活动 intent.setData()，接收一个Uri对象，主要用于指定当前Intent正在操作的数据，而这些数据通常是以字符串的形式传入到Uri.parse()方法中解析产生的。 我们自己建立一个活动，让它也能响应网页的Intent。 AndroidMainfest.xml文件报Activity supporting ACTION_VIEW is not set as BROWSABLE的解决方案 https://blog.csdn.net/wqh0830/article/details/88528784 2.3.4 向下一个活动传递数据 intent提供了一系列putExtra()方法的重载，可以把我们想要传递的数据暂存在Intent中。启动另一个活动后，只需要再把数据从Intent取出来就可以了。 Activity中还有一个startActivityForResult()方法，在活动销毁时，能够返回结果给上一个活动 重写父类方法快捷键：CTRL+o 我们使用startActivityForResult()来启动SecondActivity的，在SecondActivity被销毁之后回回调上一个活动的onActivityResult()方法 2.4 活动的生命周期2.4.1 返回栈Android的活动是可以重叠的。Android是使用任务(Task)来管理活动的，一个任务就是一组存放在栈里的活动的集合，这个栈也被称作返回栈(Back Stsck) 2.4.2 活动状态每个活动在其生命周期最多可能会有4种状态。 01.运行状态位于返回栈栈顶，如果强行回收会影响用户体验 02.暂停状态仍然可见，但是不再处于栈顶的位置。（因为不是所有活动都会占满整个屏幕。） 03.停止状态 04.销毁状态 2.4.3 活动的生存期Activity类定义了7个回调方法，覆盖了生命活动的每一个周期。（**重要） onCreate()在活动第一次被创建时调用。在这里完成活动的初始化操作，比如加载布局、绑定事件。 onStart()由活动不可见变为可见的时候调用。 onResume()准备好和用户进行交互时进行调用。此时活动必须位于栈顶且处于运行状态。 onPause()系统准备去启动或者恢复另一个活动时进行调用。在这个方法中，我们将一些消耗CPU的资源释放掉，以及保存一些关键数据。 onStop()在活动完全不可见时进行调用 onDestroy()在活动被销毁之前调用，之后的活动状态变为销毁状态。 onRestart()在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。 ==以上的7个方法除了onRestart()之外，其他都是两两相对的，从而又可以将活动分为3中生存期。== 完整生存期活动在onCreate()方法和onDestroy()方法之间所经历的就是完整的生存期。 可见生存期活动在onStart()和onStop()之间经历的就是生存期。 前台生存期onResume()和onPause()方法之间所经历的就是前台生存期。 2.4.4 体验活动的生命周期2.4.5 活动被回收了怎么办如果系统内存不足，后台的程序就会关掉，这时会调用onCreate()而不再是onRestart()。但是存在一个问题：我们的应用程序可能会存在临时数据和状态。 2.5 活动的启动模式在活动中我们应该根据特定的需求为每个活动指定恰当的启动模式。启动模式一共有4种，分别是standard、singleTop、singleTask和singleInstance。 2.5.1 standardstandard每启动一个新的活动，就会在返回栈中入栈，系统不在乎它是否已经在返回栈中存在，每次启动都会创建一个新的实例。 2.5.2 singleTop当活动的启动模式指定为singleTop时，在启动活动时如果发现返回栈的栈顶已经是该活动，则可以直接使用它，不用创建新的活动实例。不过当它并未处于栈顶位置时，这时再启动，还是会创建新的实例。 2.5.3 singleTask每次启动该活动时系统会先在返回栈中检查是否存在该活动的实例，如果发现已经存在，则直接使用该实例，并把这个活动之上的活动全部出栈，如果没有发现就会创建一个新的活动实例。 2.5.4 singleInstance启动一个新的返回栈来管理这个活动。这样做有什么意义：前面三种活动的启动方式，都是把活动放在自己程序的返回栈里。如果有两个活动想要用同一个活动，那么必然要创建两个活动实例。而singleInstance解决了这个问题，用一个专门的返回栈管理这个活动。 2.6 活动的最佳实践2.6.1 知晓当前是在哪一个活动在AppCompatActivity下继承一个BaseActivity打印当前活动，然后让其他活动继承BaseActivity。 2.6.2 随时随地退出程序新建ActivityCollector类来作为活动管理器addActivity、removeActivity、finishAll修改BaseActivity，在其中添加ActivityCollector中的方法。 2.6.3 启动活动的最佳写法]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「第一行代码」学习笔记（1）]]></title>
    <url>%2F201904%2F%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Chap1 开始启程——你的第一行Android代码1.1了解全貌——Android王国简介1.1.3 Android开发应用特色01 四大组件Android系统四大组件分别是活动（’Activity’）、服务（’Service’）、广播接收器（’Broadcast Reciever’）和内容提供器（’Content Provider’）。 活动应用程序的门面，所有能看到的东西都放在活动中。 服务一直在后台默默运行。 广播接收器允许你的应用接受来自各处的广播消息，比如电话、短信等。 内容提供器则为应用程序之间共享数据提供了可能，比如可以通过内容提供器读取系统电话簿中的联系人。 02 丰富的系统控件03 SQLite数据库04 强大的多媒体05 地理位置定位1.3.4 分析你的第一个Android程序01 .gradle 和.idea AndroidStudio自动生成的一些文件 02 app 项目中代码、资源的存放03 build 存放编译时自动生成的文件04 .gitignore用来将制定的目录或文件排除在版本控制之外 05 build.gradle不需要修改、项目全局的gradle构建脚本 …… 除了app目录之外，大多数的文件和目录都是自动生成的，我们并不需要进行修改。 app目录下的结构 build包含编译时生成的文件 libs把第三方jar包放在libs目录下，放在这里的jar包都会被自动添加到构筑路径中去。 androidTest编写Android Test测试用例，可以对项目进行一些自动化测试 java存放所有java代码 res存放项目中使用到的所有图片、布局、字符串等资源。 图片放在drawable目录下 布局放在layout目录下 字符串放在values目录下 AndroidManifest.xml整个Android项目的配置文件，在程序中定义的四大组件都需要在这个文件里注册，可以给应用程序添加权限声明。 test编写Unit Test测试用例的，是对项目进行自动化测试的另一种方式 .gitignore将app模板内的指定的目录或文件排除在版本控制之外 ‘AndroidManifest.xml’文件&lt;activity android:name=".HelloWorldActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; //表示HelloWorldActivity是这个项目的主活动 &lt;category android:name="android.intent.category.LAUNCHER" /&gt; //点击图标，首先启动的就是这个活动 &lt;/intent-filter&gt;&lt;/activity&gt; ‘HelloWorldActivity.java’package com.example.helloworld;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;public class HelloWorldActivity extends AppCompatActivity &#123;//继承 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.hello_world_layout); Log.d("HelloWorldAcitivity","onCreate execute"); &#125;&#125; Android程序的设计讲究逻辑和视图分离，因此是不推荐在活动中直接编写界面的，更加通用的一种做法是，在布局文件中编写界面，然后在活动中引入进来。 &lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" tools:context=".HelloWorldActivity"&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="Hello World!" app:layout_constraintBottom_toBottomOf="parent" app:layout_constraintLeft_toLeftOf="parent" app:layout_constraintRight_toRightOf="parent" app:layout_constraintTop_toTopOf="parent" /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; 1.3.5详解项目中的资源 ‘res’目录下的结构‘drawable’开头的文件就是用来存放图片的。‘mipmap’开头的文件夹是用来存放应用图标的。‘values’用来存放字符串、样式、颜色等配置。‘layout’存放布局。 res/values/strings.xml&lt;resources&gt; &lt;string name="app_name"&gt;HelloWorld&lt;/string&gt;&lt;/resources&gt;``` 有两种方式来引用这个字符串- 在代码中： R.string.app_name- 在XML中：@string/app_name#### 1.3.6详解build.gradle文件最外层目录下的build.gradle文件部分代码 buildscript { repositories { google() jcenter() //jcenter代码托管仓库，可以在项目中轻松引用jcenter上的开源项目 } dependencies { classpath &#39;com.android.tools.build:gradle:3.1.4&#39; //声明用Gradle来构建Android项目 // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } app目录内的build.gradle文件apply plugin: ‘com.android.application’//应用了一个插件，一般有两种值可以选。//com.android.application 表示应用程序模块,可以直接运行//com.android.library 表示这是一个库模块，依附于别的应用程序模块来运行 android { compileSdkVersion 28 //指定项目的编译版本 defaultConfig {//更多细节配置 applicationId “com.example.helloworld”//指定项目包名 minSdkVersion 15//项目最低兼容的系统版本 targetSdkVersion 28 versionCode 1 versionName “1.0” testInstrumentationRunner “android.support.test.runner.AndroidJUnitRunner” } buildTypes {//指定生成安装文件的相关配置 //buildTypes通常有两个子包 debug（测试版的配置）和release（正式版的配置） release { minifyEnabled false //是否对项目的代码进行混淆 proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.pro’ } }} dependencies {//指定当前项目所有的依赖关系 //本地依赖 对本地的Jar包或目录添加依赖关系 //库依赖 对项目的库模块添加依赖关系 //远程依赖 对jcenter库上的开源项目添加依赖关系 implementation fileTree(dir: ‘libs’, include: [‘*.jar’])//本地依赖 implementation ‘com.android.support:appcompat-v7:28.0.0’//远程依赖 implementation ‘com.android.support.constraint:constraint-layout:1.1.3’ testImplementation ‘junit:junit:4.12’ androidTestImplementation ‘com.android.support.test:runner:1.0.2’ androidTestImplementation ‘com.android.support.test.espresso:espresso-core:3.0.2’}``` 1.4 前行必备——掌握日志工具的使用‘Log.v( )’ verbose‘Log.d( )’ debug‘Log.i( )’ info‘Log.w( )’ warn‘Log.e( )’ error Log.d(“HelloWorldAcitivity”,”onCreate execute”); “tag”:当前类名，对打印信息进行过滤“msg”:要打印的具体内容]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（23）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8823%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY23_图形处理相关1.编写malloc如果api_malloc只是调用操作系统中的memman_alloc，并将分配到的内存空间地址返回给应用程序的话，是行不通的，因为通过memman_alloc所获得的内存空间并不位于应用程序的数据段范围内，应用程序是无法进行读写操作的。如果应用程序在不知情的情况下执行了读写操作，将会产生异常并强制结束。 memman初始化EDX=8 EBX=memman的地址EAX=memman所管理的内存空间的起始地址ECX=memman所管理的内存空间的字节数mallocEDX=9 EBX=memman的地址ECX=需要请求的字节数EAX=分配到的内存空间地址freeEDX=10 EBX=memman的地址EAX=需要释放的内存空间地址ECX=需要释放的字节数 2.画点在窗口中画点EDX =11 EBX =窗口句柄ESI =显示位置的x坐标EDI =显示位置的y坐标EAX =色号 画星星int api_openwin(char *buf, int xsiz, int ysiz, int col_inv, char *title); void api_boxfilwin(int win, int x0, int y0, int x1, int y1, int col); void api_initmalloc(void); char *api_malloc(int size); void api_point(int win, int x, int y, int col); void api_end(void); int rand(void); /*产生0～32767之间的随机数*/ void HariMain(void) &#123; char *buf; int win, i, x, y; api_initmalloc(); buf = api_malloc(150 * 100); win = api_openwin(buf, 150, 100, -1, &quot;stars&quot;); api_boxfilwin(win, 6, 26, 143, 93, 0 /*黑色*/); for (i = 0; i &lt; 50; i++) &#123; x = (rand() % 137) + 6; y = (rand() % 67) + 26; api_point(win, x, y, 3 /*黄色*/); &#125; api_end(); &#125; 3.刷新窗口在所有的窗口绘图命令中设置一个“不自动刷新”的选项，然后再编写一个仅用来刷新的API刷新窗口EDX = 12 EBX = 窗口句柄EAX = x0 ECX = y0 ESI = x1 EDI = y1 4.画直线for (i = 0; i &lt; len; i++) &#123; api_point(win, x, y, col); x += dx; y += dy; &#125; 5.关闭窗口关闭窗口EDX=14 EBX=窗口句柄 6.键盘输入API键盘输入EDX = 15 EAX = 0……没有键盘输入时返回1，不休眠 = 1……休眠直到发生键盘输入EAX = 输入的字符编码 8.强制结束并关闭窗口问题：在运行walk.hrb和lines.hrb时，如果不按回车键结束，而是按Shift+F1强制结束程序的话，窗口就会残留在画面上。解决方法：在struct SHEET中添加一个用来存放task的成员，当应用程序结束时，查询所有的图层，如果图层的task为将要结束的应用程序任务，则关闭该图层。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（22）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8822%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY22_用C语言编写应用程序1.保护操作系统（5）问题：在定时器上做手脚，光标闪烁变得异常缓慢，任务切换的速度也会变得缓慢。[INSTRSET &quot;i486p&quot;] [BITS 32] MOV AL,0x34 OUT 0x43,AL MOV AL,0xff OUT 0x40,AL MOV AL,0xff OUT 0x40,AL ; 上述代码的功能与下面代码相当; io_out8(PIT_CTRL, 0x34); ; io_out8(PIT_CNT0, 0xff); ; io_out8(PIT_CNT0, 0xff); MOV EDX,4 INT 0x40 执行CLI然后再HLT。由于不再产生定时器中断，任务切换也会停止，键盘和鼠标中断也停止响应。 2.帮助发现bugCPU的异常处理功能，除了可以保护操作系统免遭应用程序的破坏，还可以帮助我们在编写应用程序时及早发现bug。 对栈异常的处理：要想让它发现bug，最好能知道引发异常的指令的地址。 int *inthandler0c(int *esp) &#123; struct CONSOLE *cons = (struct CONSOLE *) *((int *) 0x0fec); struct TASK *task = task_now(); char s[30]; /*这里！*/ cons_putstr0(cons, &quot;\nINT 0C :\n Stack Exception.\n&quot;); sprintf(s, &quot;EIP = %08X\n&quot;, esp[11]); /*这里！*/ cons_putstr0(cons, s); /*这里！*/ return &amp;(task-&gt;tss.esp0); /*强制结束程序*/ &#125; int *inthandler0d(int *esp) &#123; struct CONSOLE *cons = (struct CONSOLE *) *((int *) 0x0fec); struct TASK *task = task_now(); char s[30]; /*这里！*/ cons_putstr0(cons, &quot;\nINT 0D :\n General Protected Exception.\n&quot;); sprintf(s, &quot;EIP = %08X\n&quot;, esp[11]); /*这里！*/ cons_putstr0(cons, s); /*这里！*/ return &amp;(task-&gt;tss.esp0); /*强制结束程序*/ &#125; 3.强制结束应用程序 如何实现？将某一个键设定为强制结束键，按一下就可以结束程序。把强制结束处理写在其他的任务中，bootpack.c 4.用C语言显示字符串（1）已经做好了用来显示字符串的API，却没做可供C语言调用该API的函数。 5.用C语言显示字符串（2）连接了.obj文件的bim2hrb认为“hello, world”这个字符串就应该存放在0x400这个地址中。由bim2hrb生成的.hrb文件其实是由两个部分构成的。 代码部分 数据部分 修改console.c： 文件中找不到“Hari”标志则报错。 数据段的大小根据.hrb文件中指定的值进行分配。 将.hrb文件中的数据部分先复制到数据段后再启动程序。 6.显示窗口编写一个用来显示窗口的APIEDX = 5 EBX = 窗口缓冲区ESI = 窗口在x轴方向上的大小（即窗口宽度）EDI = 窗口在y轴方向上的大小（即窗口高度）EAX = 透明色ECX = 窗口名称 7.在窗口中描绘字符和方显示字符的API：EDX = 6 EBX = 窗口句柄ESI = 显示位置的x坐标EDI = 显示位置的y坐标EAX = 色号ECX = 字符串长度EBP = 字符串 描绘方块的API：EDX = 7 EBX = 窗口句柄EAX = x0 ECX = y0 ESI = x1 EDI = y1 EBP = 色号]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（21）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8821%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY21_保护操作系统1.攻克难题——字符串显示API 我们需要在API中做个改动，使其能够将应用程序传递的地址解释为代码段内地址。 2.用C语言编写应用程序要实现C语言编写应用程序，需要在应用程序方面创建一个api_putchar函数。注意，这个函数不是创建在操作系统中。api_putchar函数需要用C语言来调用，功能是向EDX和AL赋值，并调用INT 0x40。 [FORMAT &quot;WCOFF&quot;] ; 生成对象文件的模式[INSTRSET &quot;i486p&quot;] ; 表示使用486兼容指令集[BITS 32] ; 生成32位模式机器语言[FILE &quot;a_nask.nas&quot;] ; 源文件名信息 GLOBAL _api_putchar [SECTION .text] _api_putchar: ; void api_putchar(int c); MOV EDX,1 MOV AL,[ESP+4] ; c INT 0x40 RET 这里的api_putchar需要与a.c的编译结果进行连接，因此我们使用对象文件模式 3.保护操作系统（1）操作系统需要运行各种应用程序，而这些应用程序有可能是操作系统开发者编写的，也有可能是用户、别的软件开发商或者是某个自由软件作者出于善意编写的。所谓对操作系统的破坏，严重程度也不同，比如擅自删除重要文件、使其他任务的运行产生异常，或者造成操作系统死机而不得不重新启动等等。 4.保护操作系统（2）我们需要为应用程序提供专用的内存空间，并且禁止别的应用程序访问。要做到这一点，我们可以创建应用程序专用的数据段，并在应用程序运行期间，将DS和SS指向该段地址。这次我们还使用了以句点（.）开头的标签名，这是一种被称为本地标签的特殊标签。它基本上和普通的标签功能一样，区别在于即使标签名和其他函数中的标签重复，系统也能将它们区分开来。 5.对异常的支持接下来我们要实现强制结束程序的功能。要想强制结束程序，只要在中断号0x0d中注册一个函数即可。这是因为在x86架构规范中，当应用程序试图破坏操作系统，或者试图违背操作系统的设置时，就会自动产生0x0d中断，因此该中断也被称为“异常”。 6.保护操作系统（3）可能出现的问题：操作系统会指定应用程序的DS，因此破坏行为会发生异常，那么如果忽略操作系统指定的DS，而是用汇编语言直接将操作系统用的段地址存入DS的话，就又可以干坏事了。 7.保护操作系统（4） 想法：让应用程序无法使用操作系统的段地址。 具体做法：x86架构有这样的功能。在段定义的地方，如果将访问权限加上0x60的话，就可以将段设置为应用程序用。当CS中的段地址为应用程序用段地址时，CPU会认为“当前正在运行应用程序”，这时如果存入操作系统用的段地址就会产生异常。 在启动应用程序的时候我们需要让“操作系统向应用程序的段执行far-CALL”解决方案：可以使用RETF]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[基于链接内容的社区发现算法（二）]]></title>
    <url>%2F201904%2F%E5%9F%BA%E4%BA%8E%E9%93%BE%E6%8E%A5%E5%86%85%E5%AE%B9%E7%9A%84%E7%A4%BE%E5%8C%BA%E5%8F%91%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Robust Detection of Link Communities in Large Social Network by Exploiting Link SemanticsZHOU YUYANG 这一部分没什么难点，ppt里写的都很清楚了。。 三、试验1.数据集我们选择了两个数据集，包括美国安然能源公司内部的邮件内容（安然公司丑闻，加州能源危机）和Reddit新闻网站三天的的三个论坛的内容。如果用户A对用户B的帖子进行评论，就产生了一条从A到B的链接，链接内容为评论的内容。 那么如何判断我们社区发现的结果是正确的呢？对于第一个数据集，伯克利大学的学生已经将这些用户节点分成了11个用户社区，我们可以直接将社区发现的结果与这十一个社区比对。对于第二个数据集，我们可以直接将发现的社区和三个论坛内容相比较。 2.对比的方法我们采取了8种最先进的社区发现算法，包括利用拓扑结构的、利用结点内容的、利用链接内容的、可重叠的、不可重叠的（可重叠的意思就是可以将一个用户结点放进多个社区里）等，如图： 3.测评参数F-score和Jaccard similarity，用于测评相似度的两个参数，结果两个参数越大，说明社区发现的结果越好。 4.结果 5.个例研究我们选择了Reddit网站2012年8月27号的数据集进行分析，与我们的方法对比的是SCI SCI方法的结果如下： 我们的方法： 我们的方法还有一个好处，就是可以通过fai和Y找到社区的词云： 我们方法的应用建议： 四、结论 这是文章的标题，下面我们对标题的关键词进行讨论和总结。Robust:健壮性。在传统的方法中，当网络拓朴和话题群聚不重合的时候，方法的效率就会变得很低，而我们的方法将网络拓朴和话题群聚分开来讨论，具有一定的健壮性。 Detection of Link Communities：本论文的主要内容——社区发现。 Exploiting Link Semantics: 基于链接语义。]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>社区发现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于链接内容的社区发现算法（一）]]></title>
    <url>%2F201904%2F%E5%9F%BA%E4%BA%8E%E9%93%BE%E6%8E%A5%E5%86%85%E5%AE%B9%E7%9A%84%E7%A4%BE%E5%8C%BA%E5%8F%91%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Robust Detection of Link Communities in Large Social Network by Exploiting Link SemanticsZHOU YUYANG Robust Detection of Link Communities in Large Social Network by Exploiting Link Semantics 这篇论文是我加入张老师实验室读的第一篇论文，寒假里草草读了一遍，感叹了自己垃圾的英文水平，上周除了上课和作业基本没做什么，一直在研读这篇论文。很幸运的是上周关于这篇论文的汇报我做的非常精彩，也不枉自己上周那么辛苦的肝了。 这篇博客用来记录自己研读时候的思考和整理。 整个论文的整体内容我将从四个方面介绍。分别是社区发现算法的背景和现存的方法、论文提出的模型和方法、试验和结论与讨论。 1. Background 1.1 社交网络的发展 社交对于世界各地各领域的人们来讲都越来越重要。随着社交网络的发展，越来越多的信息开始在互联网中聚集。 对于这些大数据的分析能够让我们更加熟悉网络的深层结构、了解用户行为和未来趋势。 社交网络中的一个重要的问题便是社区发现，通过社区发现我们能够为用户提供个性化推荐和异常行为的识别。 所谓的“社区发现”，就是将出现在社交网络中的用户节点划分成不同的组别。每个组的用户结点都有着某些相同的特征。 1.2 现存的方法 我们通常用一个图来表示社交网络。其中的点表示用户结点，其中的边表示用户之间的联系。 最初人们社区发现的算法是根据网络的拓扑结构，即让我们划分后的各个社区间的边的数量最少，社区内部点之间的边尽可能的多 之后，社区发现的算法得到改进，我们通过节点内容进行社区划分，即使得同一个社区内的结点内容尽可能多的相似。通过结点内容进行社区发现能够大大提升我们社区发现的效率。 同时我们发现，用户之间的链接，即图中的边也含有大量的信息。 这张图形象的表示了我们的方法和其他方法的区别。其中右边的图是基于结点内容进行社区发现的算法示意图，左边的图是我们基于链接内容进行社区发现的图。我们可以看出现有的其他方法的问题： 1.只考虑了节点内容。考虑节点内容进行社区发现在有些时候有很高的效率。以微博用户的社区发现为例，当我们提供的内容是用户简介时，基于节点内容进行社区发现是很可以的。但是当我们提供的内容是用户之间发送的消息时，这其实是一种“链接内容”，我们需要将链接内容转换成节点内容，比如用户A发送的所有消息算成用户A的节点内容。这时候势必导致社区划分的不准确。 2.假设网络拓扑社区和结点内容社区的用户结点是一样的。两个用户间联系紧密，构成一个拓扑社区，但是他们聊天的内容可能是很五花八门的，两个人可能被分到不同的节点内容社区中去，这个时候现有的方法社区发现的效率就会下降。 3.每个社区仅仅有一个话题。比如右边的图把Music和Movies混在一起当作一个话题，而我们的方法（左边）含有两个话题。 4.仅仅用单个词汇进行社区标签。有时候我们可能会不知所云。而我们的方法用句子进行标签，便于理解。 2.The Model and Method2.1综述详见图片 2.2 详细分析我们先来看看我们进行社区发现需要考虑哪一些因素： 拓扑角度：结点、链接 内容角度：单词、句子、话题 社区和话题群聚(topic cluster) 变量介绍详见图片(难理解的内容都已经用中文进行注释) 所有变量的详细关系如下图所示 为了便于理解，我自己又画了一个图。 图左半部分就是根据拓扑结构进行社区发现，右半部分是根据节点内容进行社区发现。 现在，我们的模型已经建立起来了，我们的目标为以下三点： 具体算法我们算法的整体思想是这样的：首先我们根据某标准把网络中的所有节点划分到不同的社区中（E-step），然后我们将提取每个社区中的关键词，来进行社区标注。（M-step）我们再根据标注进行有监督的学习，对社区进行更精准的划分，以此来一遍遍迭代。 下面我们运用了极大似然的思想进行EM算法。E-step： 我们进行期望化的变量是p，p代表着链接被分配到哪个社区中。现在p的取值是Jensen不等式的取等条件。 M-step： 下面我们要求式(3)的最大值，tau、 omega_ri、 y_rj都是可以通过直接求导求出来的。剩下的psai和fai的最大值我们再一次通过EM算法来求。引入变量p和h，运用JENSEN公式，p和h在取等条件时式子取到最大值。 下面我们给出整个算法的伪代码，看懂这个图整个算法的思路就差不多了。]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>社区发现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「机票价格预测系统」需求分析]]></title>
    <url>%2F201904%2F%E6%9C%BA%E7%A5%A8%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[最终的调研结果——我们发现了一款名叫蜻蜓旅行的app，能够基本实现我们的机票价格预测要求，这个项目最终没有进行下去。 「机票价格预测系统」需求分析周宇洋、罗钟豪20190416一、项目概况1.背景随着现代交通工具的发展和进步，越来越多的人们选择飞机出行。飞机出行具有快速方便、轻松舒适、安全可靠等优势。市场现存的购票软件为人们购票提供了极大的便利。其中同程旅游、去哪儿旅行、携程旅行、途牛旅游、飞猪旅行等购票APP占有很大的用户市场。与此同时，我们发现机票票价的浮动十分剧烈，相同时间、相同起抵地点的航班，在一周内的票价浮动能达到几百甚至上千元，很多用户对于这样浮动剧烈的票价大惑不解。于是我们想要为出行的用户提供这样一个「机票价格预测系统」，能够告知用户在什么时间点能够以满意的价格买到自己需要的机票。 2.项目愿景我们希望通过我们的价格预测系统，用户能够了解到近期机票票价的浮动情况和票余量（暂定），成功以满意的价格买到自己所需的机票。 二、数据需求我们需要飞猪旅行和携程旅行（暂定）至少两个月的机票价格和票余量（暂定），并包含起抵地点、出行时间、起飞时段、航空公司（暂定）、舱位类型、起抵机场（暂定）、机型（大型机、中型机、小型机）、乘客人数的信息。[飞猪旅行的票价刷新时长为20分钟] 三、业务功能需求我们最终的系统将由网页或微信小程序（暂定）的形式展示给用户。用户输入出行时间、起抵地点，便能获得近期该航班票价的价格预测。]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[爬虫入门]]></title>
    <url>%2F201904%2F%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[助教说学习`Python`的最好方法是从爬虫下手🤠。正好现在导师把我分配给学姐，让我们完成一个机票价格预测系统。 但是这学期的课业太忙了😭，自己因为情感的事情状态也没有那么好，希望自己还能有足够的精力去做好这件事。💪 爬虫入门 0415一、网络爬虫概念 网络爬虫（英语：web crawler），也叫网络蜘蛛（spider），是一种用来自动浏览万维网的网络机器人。其目的一般为编纂网络索引。 网络爬虫可以将自己所访问的页面保存下来，以便搜索引擎事后生成索引供用户搜索。 来源Wikipedia 二、爬虫入门综述 “入门”是良好的动机，但是可能作用缓慢。如果你手里或者脑子里有一个项目，那么实践起来你会被目标驱动，而不会像学习模块一样慢慢学习。 另外如果说知识体系里的每一个知识点是图里的点，依赖关系是边的话，那么这个图一定不是一个有向无环图。因为学习A的经验可以帮助你学习B。因此，你不需要学习怎么样“入门”，因为这样的“入门”点根本不存在！你需要学习的是怎么样做一个比较大的东西，在这个过程中，你会很快地学会需要学会的东西的。当然，你可以争论说需要先懂python，不然怎么学会python做爬虫呢？但是事实上，你完全可以在做这个爬虫的过程中学习python :D 你需要学习 基本的爬虫工作原理 基本的http抓取工具，scrapy Bloom Filter: Bloom Filters by Example 如果需要大规模网页抓取，你需要学习分布式爬虫的概念。其实没那么玄乎，你只要学会怎样维护一个所有集群机器能够有效分享的分布式队列就好。最简单的实现是python-rq: https://github.com/nvie/rq rq和Scrapy的结合：darkrho/scrapy-redis · GitHub 后续处理，网页析取(grangier/python-goose · GitHub)，存储(Mongodb) 爬虫的原理想象你是一只蜘蛛，现在你被放到了互联“网”上。那么，你需要把所有的网页都看一遍。怎么办呢？没问题呀，你就随便从某个地方开始，比如说人民日报的首页，这个叫initial pages，用$表示吧。 在人民日报的首页，你看到那个页面引向的各种链接。于是你很开心地从爬到了“国内新闻”那个页面。太好了，这样你就已经爬完了俩页面（首页和国内新闻）！暂且不用管爬下来的页面怎么处理的，你就想象你把这个页面完完整整抄成了个html放到了你身上。突然你发现，在国内新闻这个页面上，有一个链接链回“首页”。作为一只聪明的蜘蛛，你肯定知道你不用爬回去的吧，因为你已经看过了啊。所以，你需要用你的脑子，存下你已经看过的页面地址。这样，每次看到一个可能需要爬的新链接，你就先查查你脑子里是不是已经去过这个页面地址。如果去过，那就别去了。好的，理论上如果所有的页面可以从initial page达到的话，那么可以证明你一定可以爬完所有的网页。 效率 通常的判重做法是怎样呢？Bloom Filter. 简单讲它仍然是一种hash的方法，但是它的特点是，它可以使用固定的内存（不随url的数量而增长）以O(1)的效率判定url是否已经在set中。 可惜天下没有白吃的午餐，它的唯一问题在于，如果这个url不在set中，BF可以100%确定这个url没有看过。但是如果这个url在set中，它会告诉你：这个url应该已经出现过，不过我有2%的不确定性。注意这里的不确定性在你分配的内存足够大的时候，可以变得很小很少。 进一步提高效率 另外一个瓶颈——你只有一台机器。不管你的带宽有多大，只要你的机器下载网页的速度是瓶颈的话，那么你只有加快这个速度。用一台机子不够的话——用很多台吧！当然，我们假设每台机子都已经进了最大的效率——使用多线程（python的话，多进程吧）。 我们把这100台中的99台运算能力较小的机器叫作slave，另外一台较大的机器叫作master，那么回顾上面代码中的url_queue，如果我们能把这个queue放到这台master机器上，所有的slave都可以通过网络跟master联通，每当一个slave完成下载一个网页，就向master请求一个新的网页来抓取。而每次slave新抓到一个网页，就把这个网页上所有的链接送到master的queue里去。同样，bloom filter也放到master上，但是现在master只发送确定没有被访问过的url给slave。Bloom Filter放到master的内存里，而被访问过的url放到运行在master上的Redis里，这样保证所有操作都是O(1)。 参考资料作者：谢科链接：https://www.zhihu.com/question/20899988/answer/24923424来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（20）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8820%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY20_API1.程序整理目标：实现由应用程序对操作系统功能的调用（即API，也叫系统调用）。 2.显示单个字符的API(1)目标：显示单个字符的API。 首先我们做一个测试用的应用程序，将要显示的字符编码存入AL寄存器，然后调用操作系统的函数，字符就显示出来了。[BITS 32] MOV AL,&apos;A&apos; CALL （cons_putchar的地址）fin: HLT JMP fin bootpack.map文件这是一个文本文件，用文本编辑器打开即可，其中应该可以找到这样一行：0x00000BE3 : _asm_cons_putchar 这就是_asm_cons_putchar的地址了，因此，我们将地址填在应用程序中. [BITS 32] MOV AL,&apos;A&apos; CALL 0xbe3 fin: HLT JMP fin 3.显示单个字符的API(2) 应用程序对API执行CALL的时候，千万不能忘记加上段号。 4.结束应用程序 C语言中没有用来执行far-CALL的命令，我们只好来创建一个farcall函数_farcall: ; void farcall(int eip, int cs); CALL FAR [ESP+4] ; eip, cs RET 5.不随操作系统版本而改变的 API6.为应用程序自由命名 目标：让系统支持其他应用程序名void cons_runcmd(char *cmdline, struct CONSOLE *cons, int *fat, unsigned int memtotal) &#123; if (strcmp(cmdline, "mem") == 0) &#123; cmd_mem(cons, memtotal); &#125; else if (strcmp(cmdline, "cls") == 0) &#123; cmd_cls(cons); &#125; else if (strcmp(cmdline, "dir") == 0) &#123; cmd_dir(cons); &#125; else if (strncmp(cmdline, "type ", 5) == 0) &#123; cmd_type(cons, fat, cmdline); &#125; else if (cmdline[0] != 0) &#123; /*从此开始*/ if (cmd_app(cons, fat, cmdline) == 0) &#123; /*不是命令，不是应用程序，也不是空行*/ putfonts8_asc_sht(cons-&gt;sht, 8, cons-&gt;cur_y, COL8_FFFFFF, COL8_000000, "Bad command.", 12); cons_newline(cons); cons_newline(cons); &#125; &#125; /*到此结束 */ return; &#125; 7.当心寄存器 命名只显示一个h 给_asm_cons_putchar添上2行代码，就是PUSHAD和POPAD。 8.用API显示字符 从实际的应用程序开发角度来说，能显示字符串的API远比只能显示单个字符的API要来的方便，因为一次显示一串字符的情况比一次只显示一个字符的情况多得多。 一般有两种方式： 种是显示一串字符，遇到字符编码0则结束； 先指定好要显示的字符串的长度再显示。 功能号 1……显示单个字符（AL = 字符编码）功能号 2……显示字符串 0（EBX = 字符串地址）功能号 3……显示字符串 1（EBX = 字符串地址，ECX = 字符串长度） 将_asm_cons_putchar改写成一个新的函数。_asm_hrb_api: STI PUSHAD; PUSHAD; CALL _hrb_api ADD ESP,32 POPAD IRETD]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（19）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8819%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY19_应用程序1.type命令 在Windows的命令行中，有一个叫做type的命令，输入“type 文件名”就会显示出文件的内容。 磁盘映像中的地址 = clustno * 512 + 0x003e00 将s[0～10]这11个字节用空格的字符编码填充，然后读取cmdline[5～]并复制到s[0～]，在复制的同时，将其中的小写字母转换为大写字母。随后，当遇到句点时，则可以断定接下来的部分为扩展名，于是将复制的目标改为s[8～]。经过这样的转换，我们就得到了和磁盘内格式相同的文件名。 “寻找文件”这一段中，我们在磁盘中寻找与所输入的文件名相符的文件。如果成功找到指定文件，则用break跳出for循环；如果找不到，则会在x到达224或者finfo[x].name[0]为0x00时结束循环。 /* type命令*/ /*准备文件名*/ for (y = 0; y &lt; 11; y++) &#123; s[y] = ' '; &#125; y = 0; for (x = 5; y &lt; 11 &amp;&amp; cmdline[x] != 0; x++) &#123; if (cmdline[x] == '.' &amp;&amp; y &lt;= 8) &#123; y = 8; &#125; else &#123; s[y] = cmdline[x]; if ('a' &lt;= s[y] &amp;&amp; s[y] &lt;= 'z') &#123; /*将小写字母转换成大写字母 */ s[y] -= 0x20; &#125; y++; &#125; &#125; /*寻找文件*/ for (x = 0; x &lt; 224; ) &#123; if (finfo[x].name[0] == 0x00) &#123; break; &#125; if ((finfo[x].type &amp; 0x18) == 0) &#123; for (y = 0; y &lt; 11; y++) &#123; if (finfo[x].name[y] != s[y]) &#123; goto type_next_file; &#125; &#125; break; /*找到文件*/ &#125; type_next_file: x++; &#125; if (x &lt; 224 &amp;&amp; finfo[x].name[0] != 0x00) &#123; /*找到文件的情况*/ y = finfo[x].size; p = (char *) (finfo[x].clustno * 512 + 0x003e00 + ADR_DISKIMG); cursor_x = 8; for (x = 0; x &lt; y; x++) &#123; /*逐字输出*/ s[0] = p[x]; s[1] = 0; putfonts8_asc_sht(sheet, cursor_x, cursor_y, COL8_FFFFFF, COL8_000000, s, 1); cursor_x += 8; if (cursor_x == 8 + 240) &#123; /*到达最右端后换行*/ cursor_x = 8; cursor_y = cons_newline(cursor_y, sheet); &#125; &#125; &#125; else &#123; /*没有找到文件的情况*/ putfonts8_asc_sht(sheet, 8, cursor_y, COL8_FFFFFF, COL8_000000, "File not found.", 15); cursor_y = cons_newline(cursor_y, sheet); &#125; 2.type命令改良 目标：实现对换行的支持。 0x09……制表符：显示空格直到 x 被 4 整除为止0x0a……换行符：换行0x0d……回车符：忽略 我们这里所说的制表符也称为水平制表符（horizonal tab），因为对齐字符位置是在水平方向上移动。相对的，还有一种垂直制表符（vertical tab） 在Windows中换行的字符编码为“0x0d 0x0a”两个字节，而Linux中只有“0x0a”一个字节。 字符编码0x0a原本代表折行（line feed）的意思，即只是移动到下一行。 0x0d，也就是回车符的文字编码，代表“让打印头（或者打字机的辊筒）回到行首”的意思，因此才被称为“回车”（carriage return）。 3.对FAT的支持 现在的type命令，肯定可以正确显示文件开头的512个字节的内容，但是如果遇到大于512个字节的文件，中间可能就会突然显示出其他文件的内容。 对于文件的下一段存放在哪里，在磁盘中是有记录的，我们只要分析这个记录，就可以正确读取文件内容了。 它位于从0柱面、0磁头、2扇区开始的9个扇区中，在磁盘映像中相当于0x000200～0x0013ff。这个记录被称为FAT，是“file allocation table”的缩写，翻译过来叫作“文件分配表”（即记录文件在磁盘中存放位置的表）。 4.代码整理 窗口相关函数 → window.c 命令行窗口相关函数 → console.c 文件相关函数 → file.c 5.第一个应用程序[BITS 32] fin: HLT JMP fin 像type命令一样，我们用file_loadfile将文件的内容读到内存中 应用程序不知道自己被读到哪个内存地址，这里暂且由ORG0来生成。因此，为了应用程序能够顺利运行，我们需要为其创建一个内存段。 段创建好之后，接下来只要goto到该段中的程序，程序应该就会开始运行了。要goto到其他的内存段，在汇编语言中用farjmp指令。for (y = 0; y &lt; 11; y++) &#123; s[y] = ' '; &#125; s[0] = 'H'; s[1] = 'L'; s[2] = 'T'; s[8] = 'H'; s[9] = 'R'; s[10] = 'B'; for (x = 0; x &lt; 224; ) &#123; if (finfo[x].name[0] == 0x00) &#123; break; &#125; if ((finfo[x].type &amp; 0x18) == 0) &#123; for (y = 0; y &lt; 11; y++) &#123; if (finfo[x].name[y] != s[y]) &#123; goto hlt_next_file; &#125; &#125; break; /*找到文件*/ &#125; hlt_next_file: x++; &#125; if (x &lt; 224 &amp;&amp; finfo[x].name[0] != 0x00) &#123; /*找到文件的情况*/ p = (char *) memman_alloc_4k(memman, finfo[x].size); file_loadfile(finfo[x].clustno, finfo[x].size, p, fat, (char *) (ADR_DISKIMG + 0x003e00)); set_segmdesc(gdt + 1003, finfo[x].size - 1, (int) p, AR_CODE32_ER); farjmp(0, 1003 * 8); memman_free_4k(memman, (int) p, finfo[x].size); &#125; else &#123; /*没有找到文件的情况*/ putfonts8_asc_sht(sheet, 8, cursor_y, COL8_FFFFFF, COL8_000000, "File not found.", 15); cursor_y = cons_newline(cursor_y, sheet); &#125; /*到此结束*/]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[循环赛赛程安排]]></title>
    <url>%2F201904%2F%E5%BE%AA%E7%8E%AF%E8%B5%9B%E8%B5%9B%E7%A8%8B%E5%AE%89%E6%8E%92%2F</url>
    <content type="text"><![CDATA[算法设计与分析实验报告 2019.4.13循环赛赛程安排一、问题重述设有n个运动员要进行网球循环赛。设计一个满足下列条件的比赛日程表： 每个选手必须与其他n-1个选手各赛一次； 每个选手一天只能赛一次； 当n是偶数时，循环赛进行n-1天。 当n是奇数时，循环赛进行n天。 二、问题分析1.当n是2的次幂时 $ n=2^k,k=1,2,3,4… $时，此时问题比较简单。按照==分治==的策略，可将所有参赛的选手分为两部分，$ n＝2k $个选手的比赛日程表可以通过为 $ n/2＝2k-1 $ 个选手设计的比赛日程表来决定。递归地执行这种分割，直到只剩下 2 个选手时，比赛日程表的制定就变得很简单：只要让这 2 个选手进行比赛就可以了。再逐步合并子问题的解即可得到原问题的解。 示意图如下： 此时的分治算法如下所示:void tourna(int n) //基本的分治算法&#123; if(n==1)&#123;a[0][0]=1;return;&#125; tourna(n/2); //分治 copy(n); //合并&#125;void copy(int n)&#123; int m=n/2; for(int i=0;i&lt;m;i++) for(int j=0;j&lt;m;j++)&#123; //由左上角小块的值算出对应的右上角小块的值 a[i][j+m]=a[i][j]+m; //由右上角小块的值算出对应的左下角小块的值 a[i+m][j]=a[i][j+m]; //由左上角小块的值算出对应的右下角小块的值 a[i+m][j+m]=a[i][j]; &#125;&#125; 我们用a[i][j]表示第i支队伍在第j天遇到的对手。 2.当n不是2的次幂时下面讨论当n不是2的次幂时的情况。我们发现当n为奇数时，每天必定有一支队伍轮空。此时我们==假定还有一只不存在的队伍与轮空的队伍比赛==，将我们的奇偶数情况的模型统一。此时n的赛程表与偶数n+1时的赛程表是相似的。比如，当n=4时| 0 | 1 | 2 | 3 ||—-|—-|—-|—-|| 1 | 0 | 3 | 2 || 2 | 3 | 0 | 1 || 3 | 2 | 1 | 0 | 当n=3时| 0 | 1 | 2 | / ||—-|—-|—-|—-|| 1 | 0 | / | 2 || 2 | / | 0 | 1 || / | 2 | 1 | 0 | (删去最后一行)其中“/”表示轮空。 综上，当遇到n为奇数的情况，我们便可以转化为偶数来考虑。 接下来我们遇到问题的难点==矩阵的合并==当n/2为偶数时，合并比较容易，就像$ n=2^k $那样。下面我们来考虑n/2为奇数的情况。此时合并的过程我参考了猪一戒的博客 我们考虑当n=6时的情况。我们先将6个人分成2组，每组3个人（[0，1,2],[3,4,5]），然后发现3是个奇数，然后在每组中+1个虚拟人：X和Y；这样，每组就变成了4个人，然后将这4个人在除以2，我们就得到了一个两两组合的小的组。 首先来看[0，1]; [2,x] 0 1 1 0 2 x x 2 将这两组合起来： 0 1 2 x 1 0 x 2 2 x 0 1 x 2 1 0 这里要得到3个选手的比赛安排，所以，我们将假想的X去掉，并将它的位置以/代替： 0 1 2 / 1 0 / 2 2 / 0 1 然后我们也按照这个规律，安排[3,4,5]的日程，得到表格| 3 | 4 | 5 | / ||—-|—-|—-|—-|| 4 | 3 | / | 5 || 5 | / | 3 | 4 | 我们得到了两个3x4的矩阵（其中第一列表示每个队伍，实际上只有三天），我们最终想得到6*6（其中第一列表示每个队伍，实际上只有五天）的矩阵。 我们先将上面两个矩阵合并 0 1 2 / 1 0 / 2 2 / 0 1 3 4 5 / 4 3 / 5 5 / 3 4 前三天的比赛已经基本排完了，我们只需要在斜杠/的地方填上相应的比赛。很显然可以让每天轮空的两支队伍比赛。（在程序中没有斜杠表示，还是假想的队伍，方便进行监测） 0 1 2 3 1 0 4 2 2 5 0 1 3 4 5 0 4 3 1 5 5 2 3 4 上面的矩阵中[0,1,2]和[3,4,5]组内已经比完了，组间比了一次，剩下的只需要轮换两次即可得到后两天的比赛情况。 0 1 2 3 4 5 1 0 4 2 5 3 2 5 0 1 3 4 3 4 5 0 2 1 4 3 1 5 0 2 5 2 3 4 1 0 于是我们便可以得到两个奇数矩阵的合并情况。 在程序中，我们的思路不是严格意义上的所谓的“合并”，而是“扩展”。比如对于“合并2个3x4的矩阵”，我们是“将1个3x4的矩阵扩展为6x6的矩阵”（因为这两个3x4的矩阵规格相同，排序顺序一样，所以只需要做一遍） 三、代码展示（代码里有一些打印行号的printf语句，不知道为啥一去掉就过不了编译，所以没有删掉。。）#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&quot;Check.cpp&quot;void copy(int n, int **a)//偶数情况&#123; //printf(&quot;当前行号%05d\n&quot;,__LINE__); int m=n/2; for(int i=0;i&lt;m;i++)&#123; for(int j=0;j&lt;m;j++)&#123; //由左上角小块的值算出对应的右上角小块的值 a[i][j+m]=a[i][j]+m; //由右上角小块的值算出对应的左下角小块的值 a[i+m][j]=a[i][j+m]; //由左上角小块的值算出对应的右下角小块的值 a[i+m][j+m]=a[i][j]; &#125; &#125;&#125;void copyodd(int n, int **a) // n/2 为奇数时的合并算法&#123; printf(&quot;当前行号%05d\n&quot;,__LINE__); int m=n/2; int b[m]; for(int i=0;i&lt;m;i++)&#123; b[i]=m+i; b[m+i]=b[i]; &#125; for(int i=0;i&lt;m;i++)&#123; //由左上角小块的值算出相应的左下角小块的值 for(int j=0;j&lt;m+1;j++)&#123; if(a[i][j]&gt;=m)&#123; a[i][j]=b[i]; a[m+i][j]=(b[i]+m)%n; &#125; else a[m+i][j]=a[i][j]+m; &#125; //由左上角小块的值算出相应的右上角和右下角小块的值 for(int j=1;j&lt;m;j++)&#123; a[i][m+j]=b[i+j]; a[b[i+j]][m+j]=i; &#125; &#125;&#125;void merge(int n, int **a) //合并算法&#123; if((n/2)&gt;1 &amp;&amp; (n/2)%2 == 1) copyodd(n,a); //n/2 为奇数时,注意是 (n/2)%2 == 1，n别忘了/2 else copy(n,a);&#125;void tournament(int n, int **a) //循环赛算法&#123; printf(&quot;当前行号%05d\n&quot;,__LINE__); if(n==1)&#123;a[0][0]=0;return;&#125; if(n%2 == 1) &#123;tournament(n+1,a);return;&#125; //n为奇数，分治 tournament(n/2,a); //n为偶数，分治 merge(n,a); //合并&#125;main()&#123; int n; scanf(&quot;%d&quot;,&amp;n); //创建数组 int **a; a = (int**)malloc(sizeof(int*)*n); if(n%2==1)&#123; for(int i=0; i&lt;n+1; i++) a[i] = (int*)malloc(sizeof(int)*(n+1)); &#125; else &#123; for(int i=0; i&lt;n; i++) a[i] = (int*)malloc(sizeof(int)*n); &#125; //生成循坏赛矩阵 tournament(n,a); //打印 printf(&quot;当前行号:%05d\n&quot;,__LINE__); for(int i=0; i&lt;n; i++)&#123; for(int j=1; j&lt;(n%2 == 1 ? n+1 : n); j++)&#123; if(a[i][j]&lt;n) printf(&quot;%d &quot;,a[i][j]); else printf(&quot;x &quot;); &#125; printf(&quot;\n&quot;); &#125; //检验程序 if(Check(a,n)==1) printf(&quot;This gametable is availuable.\n&quot;); else printf(&quot;This gametable is unavailuable.\n&quot;); if(n%2 ==1)&#123; for(int i=0; i&lt;n; i++) free(a[i]); &#125; else &#123; for(int i=0; i&lt;n+1; i++) free(a[i]); &#125; free(a);&#125; 四、测试程序测试程序对我们生成的矩阵进行检验。从两个角度进行。 每个队伍都要和其他队伍进行一场比赛 每个队伍每天仅进行一场比赛 测试程序代码如下int Check(int **a, int n)&#123; int column; if(n%2==1) column=n+1; else column=n; int flag=0; int check=1;//check为0说明不符合条件，停止检验。 //检验每个队伍都与其他队伍比赛 for(int i=0; i&lt;n&amp;&amp;check==1; i++)&#123; for(int k=0; k&lt;n&amp;&amp;check==1; k++)&#123; flag=0; for(int j=0;j&lt;column&amp;&amp;flag==0;j++)&#123; if(a[i][j] == k) flag=1; &#125; if(flag==0) check=0; &#125; &#125; //检验某天是否有队伍重复比赛 int times[n]; for(int j=1; j&lt;column&amp;&amp;check==1; j++)&#123; for(int w=0; w&lt;n; w++) times[w]=0; for(int i=0; i&lt;n&amp;&amp;check==1; i++)&#123; times[a[i][j]]++; if(times[a[i][j]]&gt;=2) check==0; &#125; &#125; if(check==1) return 1; else return 0;&#125; 五、实验结果 当n=6时 当n=9时 测试结果均正确。 参考文献[1]王民川,田永轩.分治法在循环赛日程表设计中的应用[J].光盘技术,2009(05):45-46.]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>分治法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（18）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8818%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY18_dir命令1.控制光标闪烁(1) 在Windows中，只有可以接受键盘输入的窗口有光标闪烁，而其他的窗口中是不显示光标的。 对HariMain进行改写 /*从此开始*/ if (cursor_c &gt;= 0) &#123; boxfill8(sht_win-&gt;buf, sht_win-&gt;bxsize, cursor_c, cursor_x, 28, cursor_x + 7, 43); /*到此结束*/ &#125; sheet_refresh(sht_win, cursor_x, 28, cursor_x + 8, 44); &#125; else if (512 &lt;= i &amp;&amp; i &lt;= 767) &#123; /*鼠标数据*/ （中略） &#125; else if (i &lt;= 1) &#123; /*光标用定时器*/ /*从此开始*/ if (i != 0) &#123; timer_init(timer, &amp;fifo, 0); /*下次置0 */ if (cursor_c &gt;= 0) &#123; cursor_c = COL8_000000; &#125; &#125; else &#123; timer_init(timer, &amp;fifo, 1); /*下次置1 */ if (cursor_c &gt;= 0) &#123; cursor_c = COL8_FFFFFF; &#125; &#125; timer_settime(timer, 50); if (cursor_c &gt;= 0) &#123; boxfill8(sht_win-&gt;buf, sht_win-&gt;bxsize, cursor_c, cursor_x, 28, cursor_x + 7, 43); sheet_refresh(sht_win, cursor_x, 28, cursor_x + 8, 44); /*到此结束*/ &#125; &#125; &#125; &#125; &#125; 2.控制光标闪烁(2) 实现命令行窗口中光标闪烁的控制。 像传递按键编码一样，我们可以使用FIFO来实现。 我们先将光标开始闪烁定义为2，停止闪烁定义为3。 3.对回车键的支持 应该对输入的字符进行判断，然后执行相应的命令 /*从此开始*/ if (i == 256 + 0x1c) &#123; /*回车键*/ if (key_to != 0) &#123; /*发送至命令行窗口*/ fifo32_put(&amp;task_cons-&gt;fifo, 10 + 256); &#125; /*到此结束*/ &#125; 4.对窗口滚动的支持void console_task(struct SHEET *sheet) &#123; （中略） int x, y; （中略） for (;;) &#123; io_cli(); if (fifo32_status(&amp;task-&gt;fifo) == 0) &#123; （中略） &#125; else &#123; （中略） if (256 &lt;= i &amp;&amp; i &lt;= 511) &#123; /*键盘数据（通过任务A） */ if (i == 8 + 256) &#123; /*退格键*/ （中略） &#125; else if (i == 10 + 256) &#123; /* Enter */ /*用空格将光标擦除*/ putfonts8_asc_sht(sheet, cursor_x, cursor_y, COL8_FFFFFF, COL8_000000, &quot; &quot;, 1); /*从此开始 */ if (cursor_y &lt; 28 + 112) &#123; cursor_y += 16; /*换行*/ &#125; else &#123; /*滚动*/ for (y = 28; y &lt; 28 + 112; y++) &#123; for (x = 8; x &lt; 8 + 240; x++) &#123; sheet-&gt;buf[x + y * sheet-&gt;bxsize] = sheet-&gt;buf[x + (y + 16) * sheet-&gt;bxsize]; &#125; &#125; for (y = 28 + 112; y &lt; 28 + 128; y++) &#123; for (x = 8; x &lt; 8 + 240; x++) &#123; sheet-&gt;buf[x + y * sheet-&gt;bxsize] = COL8_000000; &#125; &#125; sheet_refresh(sheet, 8, 28, 8 + 240, 28 + 128); &#125; /*显示提示符*/ putfonts8_asc_sht(sheet, 8, cursor_y, COL8_FFFFFF, COL8_000000, &quot;&gt;&quot;, 1); /*到此为止*/ cursor_x = 16; &#125; else &#123; /*一般字符*/ （中略） &#125; &#125; （中略） &#125; &#125; &#125; 5.mem命令我们已经实现了屏幕滚动，现在该是到了让它执行命令的时候了。mem命令就是memeory的缩写，也就是用来显示内存使用情况的命令。 介绍一下重点。首先我们添加了memtotal和memman两个变量，它们是执行mem命令所必需的。关于memtotal，我们采用和sheet相同的方法从HariMain传递过来，因此我们还要改写一下HariMain。 我们还添加了一个cmdline变量，也就是“命令行”（command line）的缩写。这个变量用来记录通过键盘输入的内容，在“键盘数据”处理的“一般字符”部分，将输入的内容顺次累积起来。 6.cls命令 这个命令的作用是清除屏幕上的内容，也就是“clear screen”（清屏）的缩写。顺便补充个小知识，在Linux中清屏命令是“clear”。代码精简：if (c[0] == &apos;m&apos; &amp;&amp; c[1] == &apos;e&apos; &amp;&amp; c[2] == &apos;m&apos; &amp;&amp; c[3] == 0) &#123; 改成：if (strcmp(cmdline, &quot;mem&quot;) == 0) &#123; strcmp这个函数，只要声明#include即可使用，因此在bootpack.c中我们也要用它。 7. dir命令 我们的目标是制作可执行文件（比如.exe）来让它运行。 过在此之前，我们先来制作一个显示磁盘内文件名称的命令吧。 dir指令除了会显示文件名，还会显示文件的日期和大小。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（17）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8817%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY17_命令行窗口1.闲置任务 即使不改写程序，也能自动在适当的LEVEL运行适当的任务，这样的操作系统才是优秀的操作系统 因此，一般情况下可以让任务休眠，但当所有LEVEL中都没有任务存在的时候，就需要HTL了。接下来我们就按照这个要求来改写mtask.c。 如果“所有LEVEL中都没有任务”就会出问题，那我们只要避免这种情况发生不就可以了吗？这类似于我们写定时器的时候所采用的“卫兵”的思路。 void task_idle(void) &#123; for (;;) &#123; io_hlt(); &#125; &#125; 综上所述，我们完全不需要对task_sleep等代码进行任何改动，只需在task_init中将这个闲置任务放在最下层LEVEL中就可以了。 2.创建命令行窗口3.切换输入窗口 目标：我们要让系统在按下“Tab”键的时候，将输入窗口切换到命令行窗口上去。 我们先改变窗口标题栏的颜色。 4.实现字符输入 要实现字符的输入，只要在键盘被按下的时候向console_task的FIFO发送数据即可。 我们还是把struct FIFO放到struct TASK里面去吧。基本上没有什么任务是完全用不到FIFO的，因此我们把它们绑定起来 在向命令行窗口发送键盘数据的时候，并不是直接发送从键盘接收到的原始数据，而是发送经过keytable[]转换后的值。究其原因，是由于这样做可以省去在命令行窗口任务中将按键编码转换成字符编码的步骤void console_task(struct SHEET *sheet) &#123; struct TIMER *timer; struct TASK *task = task_now(); int i, fifobuf[128], cursor_x = 16, cursor_c = COL8_000000; char s[2]; fifo32_init(&amp;task-&gt;fifo, 128, fifobuf, task); timer = timer_alloc(); timer_init(timer, &amp;task-&gt;fifo, 1); timer_settime(timer, 50); /*显示提示符*/ putfonts8_asc_sht(sheet, 8, 28, COL8_FFFFFF, COL8_000000, &quot;&gt;&quot;, 1); for (;;) &#123; io_cli(); if (fifo32_status(&amp;task-&gt;fifo) == 0) &#123; task_sleep(task); io_sti(); &#125; else &#123; i = fifo32_get(&amp;task-&gt;fifo); io_sti(); if (i &lt;= 1) &#123; /*光标用定时器*/ if (i != 0) &#123; timer_init(timer, &amp;task-&gt;fifo, 0); /*接下来置0 */ cursor_c = COL8_FFFFFF; &#125; else &#123; timer_init(timer, &amp;task-&gt;fifo, 1); /*接下来置1 */ cursor_c = COL8_000000; &#125; timer_settime(timer, 50); &#125; if (256 &lt;= i &amp;&amp; i &lt;= 511) &#123; /*键盘数据（通过任务A） */ if (i == 8 + 256) &#123; /*退格键*/ if (cursor_x &gt; 16) &#123; /*用空白擦除光标后将光标前移一位*/ putfonts8_asc_sht(sheet, cursor_x, 28, COL8_FFFFFF, COL8_000000, &quot; &quot;, 1); cursor_x -= 8; &#125; &#125; else &#123; /*一般字符*/ if (cursor_x &lt; 240) &#123; /*显示一个字符之后将光标后移一位 */ s[0] = i - 256; s[1] = 0; putfonts8_asc_sht(sheet, cursor_x, 28, COL8_FFFFFF, COL8_000000, s, 1); cursor_x += 8; &#125; &#125; &#125; /*重新显示光标*/ boxfill8(sheet-&gt;buf, sheet-&gt;bxsize, cursor_c, cursor_x, 28, cursor_x + 7, 43); sheet_refresh(sheet, cursor_x, 28, cursor_x + 8, 44); &#125; &#125; &#125; 5.符号的输入 目标：实现！和%的输入 我们必须要处理shift键 6.大写字母和小写字母 我们必须同时判断Shift键的状态和CapsLock的状态 CapsLock 为 OFF &amp; Shift 键为 OFF → 小写英文字母 CapsLock 为 OFF &amp; Shift 键为 ON → 大写英文字母 CapsLock 为 ON &amp; Shift 键为 OFF → 大写英文字母 CapsLock 为 ON &amp; Shift 键为 ON → 小写英文字母 7.对各种锁定键的支持 点亮/熄灭键盘上指示灯的方法 原理： 对于NumLock和CapsLock等LED的控制，可采用下面的方法向键盘发送指令和数据。 读取状态寄存器，等待 bit 1 的值变为 0。 向数据输出（0060）写入要发送的 1 个字节数据。 等待键盘返回 1 个字节的信息，这和等待键盘输入所采用的方法相同（用 IRQ等待或者用轮询状态寄存器 bit 1 的值直到其变为 0 都可以）。 返回的信息如果为 0xfa，表明 1 个字节的数据已成功发送给键盘。如为 0xfe则表明发送失败，需要返回第 1 步重新发送。 要控制LED的状态，需要按上述方法执行两次，向键盘发送EDxx数据。其中，xx的bit 0代表ScrollLock，bit 1代表NumLock，bit2代表CapsLock（0表示熄灭，1表示点亮）。bit 3～7为保留位，置0即可。 #define KEYCMD_LED 0xed void HariMain(void) &#123; （中略） struct FIFO32 fifo, keycmd; int fifobuf[128], keycmd_buf[32]; （中略） int key_to = 0, key_shift = 0, key_leds = (binfo-&gt;leds &gt;&gt; 4) &amp; 7, keycmd_wait = -1; （中略） fifo32_init(&amp;keycmd, 32, keycmd_buf, 0); （中略） /*为了避免和键盘当前状态冲突，在一开始先进行设置*/ fifo32_put(&amp;keycmd, KEYCMD_LED); fifo32_put(&amp;keycmd, key_leds); for (;;) &#123; if (fifo32_status(&amp;keycmd) &gt; 0 &amp;&amp; keycmd_wait &lt; 0) &#123; /*从此开始*/ /*如果存在向键盘控制器发送的数据，则发送它 */ keycmd_wait = fifo32_get(&amp;keycmd); wait_KBC_sendready(); io_out8(PORT_KEYDAT, keycmd_wait); &#125; /*到此结束*/ io_cli(); if (fifo32_status(&amp;fifo) == 0) &#123; task_sleep(task_a); io_sti(); &#125; else &#123; i = fifo32_get(&amp;fifo); io_sti(); if (256 &lt;= i &amp;&amp; i &lt;= 511) &#123; /* 键盘数据 */ （中略） /*从此开始*/ if (i == 256 + 0x3a) &#123; /* CapsLock */ key_leds ^= 4; fifo32_put(&amp;keycmd, KEYCMD_LED); fifo32_put(&amp;keycmd, key_leds); &#125; if (i == 256 + 0x45) &#123; /* NumLock */ key_leds ^= 2; fifo32_put(&amp;keycmd, KEYCMD_LED); fifo32_put(&amp;keycmd, key_leds); &#125; if (i == 256 + 0x46) &#123; /* ScrollLock */ key_leds ^= 1; fifo32_put(&amp;keycmd, KEYCMD_LED); fifo32_put(&amp;keycmd, key_leds); &#125; if (i == 256 + 0xfa) &#123; /*键盘成功接收到数据*/ keycmd_wait = -1; &#125; if (i == 256 + 0xfe) &#123; /*键盘没有成功接收到数据*/ wait_KBC_sendready(); io_out8(PORT_KEYDAT, keycmd_wait); /*到此结束*/ &#125; （中略） &#125; else if (512 &lt;= i &amp;&amp; i &lt;= 767) &#123; /*鼠标数据*/ （中略） &#125; else if (i &lt;= 1) &#123; /*光标用定时器*/ （中略） &#125; &#125; &#125; &#125; 实现方法： 创建了一个叫keycmd的FIFO缓冲区，它不是用来接收中断请求的，而是用来管理由任务A向键盘控制器发送数据的顺序的。如果有数据要发送到键盘控制器，首先会在这个keycmd中累积起来。 keycmd_wait变量，用来表示向键盘控制器发送数据的状态。当keycmd_wait的值为-1时，表示键盘控制器处于通常状态，可以发送指令；当值不为-1时，表示键盘控制器正在等待发送的数据，这时要发送的数据被保存在keycmd_wait变量中。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（16）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8816%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY16_多任务（2）1.任务管理自动化 充分做好多任务机制的基础上，再利用多任务逐步完善操作系统本身。 如果我们想要运行三个任务的话，就必须改写mt_taskswitch的代码。如果能像当初定时器和窗口背景的做法一样更好。 struct TASKCTL *taskctl; struct TIMER *task_timer; struct TASK *task_init(struct MEMMAN *memman) &#123; int i; struct TASK *task; struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT; taskctl = (struct TASKCTL *) memman_alloc_4k(memman, sizeof (struct TASKCTL)); for (i = 0; i &lt; MAX_TASKS; i++) &#123; taskctl-&gt;tasks0[i].flags = 0; taskctl-&gt;tasks0[i].sel = (TASK_GDT0 + i) * 8; set_segmdesc(gdt + TASK_GDT0 + i, 103, (int) &amp;taskctl-&gt;tasks0[i].tss, AR_TSS32); &#125; task = task_alloc(); task-&gt;flags = 2; /*活动中标志*/ taskctl-&gt;running = 1; taskctl-&gt;now = 0; taskctl-&gt;tasks[0] = task; load_tr(task-&gt;sel); task_timer = timer_alloc(); timer_settime(task_timer, 2); return task; &#125; 调用task_init，会返回一个内存地址，意思是==现在正在运行的这个程序，已经变成一个任务了==。可能大家不是很能理解这个说法，在调用init之后，所有程序的运行都会被当成任务来进行管理，而调用init的这个程序，我们也要让它所属于某个任务，这样一来，通过调用任务的设置函数，就可以对任务进行各种控制，比如说修改优先级等。 2.让任务休眠 给每个任务==分配不同的时间==——休眠+唤醒 休眠： void task_sleep(struct TASK *task) &#123; int i; char ts = 0; if (task-&gt;flags == 2) &#123; /*如果指定任务处于唤醒状态*/ if (task == taskctl-&gt;tasks[taskctl-&gt;now]) &#123; ts = 1; /*让自己休眠的话，稍后需要进行任务切换*/ &#125; /*寻找task所在的位置*/ for (i = 0; i &lt; taskctl-&gt;running; i++) &#123; if (taskctl-&gt;tasks[i] == task) &#123; /*在这里*/ break; &#125; &#125; taskctl-&gt;running--; if (i &lt; taskctl-&gt;now) &#123; taskctl-&gt;now--; /*需要移动成员，要相应地处理*/ &#125; /*移动成员*/ for (; i &lt; taskctl-&gt;running; i++) &#123; taskctl-&gt;tasks[i] = taskctl-&gt;tasks[i + 1]; &#125; task-&gt;flags = 1; /*不工作的状态*/ if (ts != 0) &#123; /*任务切换*/ if (taskctl-&gt;now &gt;= taskctl-&gt;running) &#123; /*如果now的值出现异常，则进行修正*/ taskctl-&gt;now = 0; &#125; farjmp(0, taskctl-&gt;tasks[taskctl-&gt;now]-&gt;sel); &#125; &#125; return; &#125; 唤醒： 在FIFO中添加用于记录要唤醒任务的信息的成员。struct FIFO32 &#123; int *buf; int p, q, size, free, flags; struct TASK *task; &#125;; 3.增加窗口数量 形成任务A、任务B0、任务B1和任务B2的格局。 任务B0～B2各自拥有自己的窗口，它们的功能都一样，即进行计数，这有点像在Windows中启动了一个应用程序及其2个副本的感觉。 4.设定任务优先级（1） 改写mtask.c、task_switchvoid task_switch(void) &#123; struct TASK *task; taskctl-&gt;now++; if (taskctl-&gt;now == taskctl-&gt;running) &#123; taskctl-&gt;now = 0; &#125; task = taskctl-&gt;tasks[taskctl-&gt;now]; timer_settime(task_timer, task-&gt;priority); if (taskctl-&gt;running &gt;= 2) &#123; farjmp(0, task-&gt;sel); &#125; return; &#125; 5.设定任务优先级（2） 在操作系统中有一些处理，即使牺牲其他任务的性能也必须要尽快完成，否则会引起用户的不满，就比如这次对鼠标的处理。对于这类任务，我们可以让它在处理结束后马上休眠，而优先级则可以设置得非常高。 我们需要设计一种架构，使得即便高优先级的任务同时运行，也能够区分哪个更加优先。 这种架构的工作原理是，最上层的LEVEL 0中只要存在哪怕一个任务，则完全忽略LEVEL 1和LEVEL 2中的任务，只在LEVEL 0的任务中进行任务切换。当LEVEL 0中的任务全部休眠，或者全部降到下层LEVEL，也就是当LEVEL 0中没有任何任务的时候，接下来开始轮到LEVEL 1中的任务进行任务切换。当LEVEL 0和LEVEL 1中都没有任务时，那就该轮到LEVEL2 出场了。在这种架构下，只要把音乐播放任务设置在LEVEL 0中，就可以保证获得比鼠标更高的优先级。 task_now 用于返回现在活动中的struct TASK的内存地址 struct TASK *task_now(void) &#123; struct TASKLEVEL *tl = &amp;taskctl-&gt;level[taskctl-&gt;now_lv]; return tl-&gt;tasks[tl-&gt;now]; &#125; task_add，用来向struct TASKLEVEL中添加一个任务 void task_add(struct TASK *task) &#123; struct TASKLEVEL *tl = &amp;taskctl-&gt;level[task-&gt;level]; tl-&gt;tasks[tl-&gt;running] = task; tl-&gt;running++; task-&gt;flags = 2; /*活动中*/ return; &#125; task_remove void task_remove(struct TASK *task) &#123; int i; struct TASKLEVEL *tl = &amp;taskctl-&gt;level[task-&gt;level]; /*寻找task所在的位置*/ for (i = 0; i &lt; tl-&gt;running; i++) &#123; if (tl-&gt;tasks[i] == task) &#123; /*在这里 */ break; &#125; &#125; tl-&gt;running--; if (i &lt; tl-&gt;now) &#123; tl-&gt;now--; /*需要移动成员，要相应地处理 */ &#125; if (tl-&gt;now &gt;= tl-&gt;running) &#123; /*如果now的值出现异常，则进行修正*/ tl-&gt;now = 0; &#125; task-&gt;flags = 1; /* 休眠中 */ /* 移动 */ for (; i &lt; tl-&gt;running; i++) &#123; tl-&gt;tasks[i] = tl-&gt;tasks[i + 1]; &#125; return; &#125; task_switchsub,用来在任务切换时决定接下来切换到哪个LEVEL void task_switchsub(void) &#123; int i; /*寻找最上层的LEVEL */ for (i = 0; i &lt; MAX_TASKLEVELS; i++) &#123; if (taskctl-&gt;level[i].running &gt; 0) &#123; break; /*找到了*/ &#125; &#125; taskctl-&gt;now_lv = i; taskctl-&gt;lv_change = 0; return; &#125;]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（15）]]></title>
    <url>%2F201904%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8815%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY15_多任务（1）1.挑战任务切换 多任务：多个应用程序同时运行的状态（也就是同时打开好几个窗口的状态）。 实际上这些程序==并没有在同时运行==，只是看上去好像是在同时运行一样。 在一般的操作系统中，这个切换的动作每0.01～0.03秒就会进行一次。当然，切换的速度越快，让人觉得程序是在同时运行的效果也就越好。不过，CPU进行程序切换（我们称为“任务切换”）这个动作本身就需要消耗一定的时间，这个时间大约为0.0001秒左右，不同的CPU及操作系统所需的时间也有所不同。 CPU处理方式：当你向CPU发出任务切换的指令时，CPU会先把寄存器中的值全部写入内存中，这样做是为了当以后切换回这个程序的时候，可以从中断的地方继续运行。接下来，为了运行下一个程序，CPU会把所有寄存器中的值从内存中读取出来（当然，这个读取的地址和刚刚写入的地址一定是不同的，不然就相当于什么都没变嘛），这样就完成了一次切换。我们前面所说的任务切换所需要的时间，正是对内存进行写入和读取操作所消耗的时间。 TSS 任务状态段 task status segment EIP 扩展指令指针寄存器 extended instruction pointer：CPU用来记录下一条需要执行的指令位于内存中哪个地址的寄存器，因此它才被称为“指令指针”。如果没有这个寄存器，记性不好的CPU就会忘记自己正在运行哪里的程序，于是程序就没办法正常运行了。每执行一条指令，EIP寄存器中的值就会自动累加，从而保证一直指向下一条指令所在的内存地址。 实际任务切换 创建两个TSS struct TSS32 tss_a, tss_b; 向它们的Idtr和iomap分别存入合适的值 tss_a.ldtr = 0; tss_a.iomap = 0x40000000; tss_b.ldtr = 0; tss_b.iomap = 0x40000000; 将它们两个在GDT中进行定义 struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT; set_segmdesc(gdt + 3, 103, (int) &amp;tss_a, AR_TSS32); set_segmdesc(gdt + 4, 103, (int) &amp;tss_b, AR_TSS32); 我们向TR寄存器存入3 * 8这个值，这是因为我们刚才把当前运行的任务定义为GDT的3号。 要进行任务切换，我们必须执行far模式的跳转指令 在eip中，我们需要定义在切换到这个任务的时候，要从哪里开始运行。 2.任务切换进阶 目标：从任务A切换到任务B，再切换回任务A 3.做个简单的多任务（1） 目标：实现更快速的，来回交替的任务切换。这样我们就可以告别光标停住、鼠标卡死、键盘打不了字的情况，让两个任务看上去好像在同时运行一样。 把taskswitch写成一个函数_farjmp: ; void farjmp(int eip, int cs); JMP FAR [ESP+4] ; eip, cs RET 4.做个简单的多任务（2）5.提高运行速度 因为我们的程序每计1个数就在画面上显示一次，但1秒钟之内刷新100次以上的话，人眼根本就分辨不出来，所以我们不需要计1个数就刷新一次，只要每隔0.01秒刷新一次就足够了。 6.测试运行速度向task_b_main添加代码测试运行速度void task_b_main(struct SHEET *sht_back) &#123; struct FIFO32 fifo; struct TIMER *timer_ts, *timer_put, *timer_1s; int i, fifobuf[128], count = 0, count0 = 0; char s[12]; （中略） timer_1s = timer_alloc(); timer_init(timer_1s, &amp;fifo, 100); timer_settime(timer_1s, 100); for (;;) &#123; count++; io_cli(); if (fifo32_status(&amp;fifo) == 0) &#123; io_sti(); &#125; else &#123; i = fifo32_get(&amp;fifo); io_sti(); if (i == 1) &#123; （中略） &#125; else if (i == 2) &#123; （中略） &#125; else if (i == 100) &#123; sprintf(s, &quot;%11d&quot;, count - count0); putfonts8_asc_sht(sht_back, 0, 128, COL8_FFFFFF, COL8_008484, s, 11); count0 = count; timer_settime(timer_1s, 100); &#125; &#125; &#125; &#125; 7.多任务进阶 真正的多任务，是要做到在程序本身不知道的情况下进行任务切换。 果使用这样的设计，即便在程序中不进行任务切换的处理（比如忘记写了，或者因为bug没能正常切换之类的），也一定会正常完成切换。之前那种多任务的话，如果任务B因为发生bug而无法进行切换，那么当切换到任务B以后，其他的任务就再也无法运行了，这样会造成无论是按键盘还是动鼠标都毫无反应的悲剧。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[插入排序（Insert Sort）、归并排序（Merge Sort）和快速排序（Quick Sort）]]></title>
    <url>%2F201904%2F%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[算法设计与分析实验报告 2019.4.4插入排序（Insert Sort）、归并排序（Merge Sort）和快速排序（Quick Sort）一、算法简介1.插入排序算法（Insert Sort Algorithm） 直接插入排序(Straight Insertion Sort)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次==从无序表中取==出第一个元素，将它==插入到有序表中==的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。 我们需要做的工作只有两个： 取出无序区中的第1个数，并找出它在有序区对应的位置。 将无序区的数据插入到有序区；若有必要的话，则对有序区中的相关数据进行移位。 2.归并排序算法（Merge Sort Algorithm） 归并排序的操作：将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。 归并排序的应用场景：速度仅次于快速排序，为稳定排序算法，一般用于==对总体无序，但是各子项相对有序的数列==3.快速排序算法（Quick Sort Algorithm） 快速排序的思想：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 适用场景：快速排序是==不稳定的==。它不需要额外的存储空间。它的应用场景是大规模的数据排序，并且实际性能要好于归并排序。 二、程序Ⅰ、算法程序1.插入排序算法（Insert Sort Algorithm）/*Insertion Sorting*//*每次从无序的队列中选择一个插入， *直到所有元素都排序完成。*/void InsertSortUp(int A[], int n)&#123; for (int i = 1; i &lt; n; i++) &#123; int swap = A[i]; int j; for (j = i-1 ; A[j] &gt; swap &amp;&amp; j &gt;= 0; j--) A[j+1] = A[j]; A[j+1] = swap; &#125;&#125; 2.归并排序算法（Merge Sort Algorithm）/*MergeSort*/void Merge(int A[], int p, int q, int r)&#123; //创造左右两个数组L、R，将已经排好的两部分放进去 int n1 = q - p + 1, n2 = r - q; int L[n1], R[n2]; int i,j; for (i = 0; i &lt; n1; i++) L[i] = A[p + i]; for (j = 0; j &lt; n2; j++) R[j] = A[q + 1 + j]; //开始对两个数组进行归并 i = 0; j = 0; for (int k = p; k &lt;= r; k++) &#123; if(i == n1)&#123;//如果左边数组已经全放进去 while(j &lt; n2) A[k++] = R[j++]; &#125; else if ( j == n2)&#123;//如果右边数组已经全放进去 while(i &lt; n1) A[k++] = L[i++]; &#125; else&#123;//比较两个数组，把小的数放进A数组，指针后移 if (L[i] &lt;= R[j]) &#123; A[k] = L[i]; i++; &#125; else &#123; A[k] = R[j]; j++; &#125; &#125; &#125;&#125; void MergeSortUp(int A[], int p,int r)&#123; if (p &lt; r) &#123; int q = (p + r) / 2; MergeSortUp(A, p, q); MergeSortUp(A, q + 1, r); Merge(A, p, q, r); &#125;&#125; 3.快速排序算法（Quick Sort Algorithm）/*QuickSort*/void swap(int A[], int i, int j)&#123; int x = A[i]; A[i] = A[j]; A[j] = x;&#125;int partition(int A[], int p, int r)&#123; int x = A[p]; int i = p; for (int j = p + 1; j &lt;= r; j++) &#123; if (A[j] &lt; x) &#123; i = i + 1; swap(A, i, j); &#125; &#125; swap(A, p, i); return i;&#125; void QuickSortUp(int A[], int p, int r)&#123; if (p &lt; r) &#123; int q = partition(A, p, r); QuickSortUp(A, p, q - 1); QuickSortUp(A, q + 1, r); &#125;&#125; Ⅱ、测试程序/*Test*/#include&lt;ctime&gt;#include&lt;stdlib.h&gt;#include&lt;stdio.h&gt;#define size 10000 //size为数据规模#include"InsertSort.cpp"#include"MergeSort.cpp"#include"QuickSort.cpp"int A[size];clock_t start,finish;double runtime_insert,runtime_merge,runtime_quick; /*Generating test data set*/void tstdata(int n)&#123; FILE *fp; if((fp = fopen(&quot;tstdata.txt&quot;,&quot;w+&quot;))== NULL) printf(&quot;cant open the file.\n&quot;); else&#123; srand(time(NULL)); for (int i = 1; i &lt;= n; i++) &#123; if(i!=n) fprintf(fp,&quot;%d &quot;,rand()); else fprintf(fp,&quot;%d\n&quot;,rand()); &#125; fclose(fp); &#125; &#125; /*output function*/int output(char *filename,int A[])&#123; FILE * fp; if((fp = fopen(filename,&quot;w+&quot;))==NULL)&#123; printf(&quot;cant open the file.\n&quot;); &#125; else&#123; for(int i=0;i&lt;size;i++)&#123; if(i!=size-1) fprintf(fp,&quot;%d &quot;,A[i]); else fprintf(fp,&quot;%d\n&quot;,A[i]); &#125; fclose(fp); &#125; return 0;&#125; main()&#123; int i=0; /*generating test data*/ /*tstdata(size); printf(&quot;Data set has been created.\n&quot;);*/ /*get the test data*/ FILE *fp; if((fp = fopen(&quot;tstdata.txt&quot;,&quot;r&quot;))==NULL)&#123; printf(&quot;cant open the file.\n&quot;); &#125; while(fscanf(fp, &quot;%d&quot;, &amp;A[i]) != EOF) i++; fclose(fp); for(i=0;i&lt;size;i++)&#123; printf(&quot;%d &quot;,A[i]); &#125; printf(&quot;\n&quot;); printf(&quot;Array has been created.\n&quot;); /*copy the test data set*/ int A1[size],A2[size],A3[size]; for(int i=0;i&lt;size;i++)&#123; A1[i]=A[i]; A2[i]=A[i]; A3[i]=A[i]; &#125; /*Insert Sorting*/ printf(&quot;Insert Sorting...\n&quot;); start = clock(); InsertSortUp(A1,size); finish = clock(); output(&quot;InsertSortUp.txt&quot;,A1); runtime_insert = (double)(finish - start)/CLOCKS_PER_SEC; printf(&quot;Insert Sort has been finished.\nTime Cost:%lf\n&quot;,runtime_insert); /*Merge Sorting*/ printf(&quot;Merge Sorting...\n&quot;); start = clock(); MergeSortUp(A2,0,size-1); finish = clock(); output(&quot;MergeSortUp.txt&quot;,A2); runtime_merge = (double)(finish-start)/CLOCKS_PER_SEC; printf(&quot;Merge Sort has been finished.\nTime Cost:%lf\n&quot;,runtime_merge); /*Quick Sorting*/ printf(&quot;Quick Sorting...\n&quot;); start = clock(); QuickSortUp(A3,0,size-1); finish = clock(); output(&quot;QuickSortUp.txt&quot;,A3); runtime_quick = (double)(finish-start)/CLOCKS_PER_SEC; printf(&quot;Quick Sort has been finished.\nTime Cost:%lf\n&quot;,runtime_quick); &#125; 三、测试数据集生成及测试 我为算法的测试准备了12个测试数据集，其中数据量分别为10,000\50,000\100,000 每个数据量下有==随机生成数据集（用于测试平均复杂度）==和==逆序数据集（用于测试最坏情况）== 为了减小误差，每个类型的数据集都准备了两个，这样便生成了3x2x2=12个数据集 算法的正确性测试在数据量很小的时候进行了手动验证，所以这里我们仅着重比较时间复杂度 Ⅰ、测试数据集生成通过main函数中的/generating test data/部分生成“随机生成测试集”，详细测试数据见附件。通过快速排序算法生成相应的“逆序数据集”进行排序算法的时间复杂度测试，详细数据见附件。 Ⅱ、测试过程测试结果如下表：（详见附件） data set Insert Sort(s) Merge Sort(s) Quick Sort(s) S1:10,000\rand array(average condition) 0.082 0.001 0.002 S2:10,000\rand array(average condition) 0.069 0.002 0.001 S3:10,000\reserve array(worst condition) 0.469 0.003 0.554 S4:10,000\reserve array(worst condition) 0.463 0.003 0.546 S5:50,000\rand array(average condition) 1.718 0.009 0.009 S6:50,000\rand array(average condition) 1.881 0.01 0.009 S7:50,000\reserve array(worst condition) 8.54 0.015 / S8:50,000\reserve array(worst condition) 7.956 0.015 / S9:100,000\rand array(average condition) 7.023 0.022 0.017 S10:100,000\rand array(average condition) 6.86 0.02 0.018 S11:100,000\reserve array(worst condition) 31.549 0.027 / S12:100,000\reserve array(worst condition) 30.989 0.029 / 注：50,000和100,000数据量下，最坏情况下快速排序算法程序没法完成排序 四、算法复杂度分析1.插入排序算法（Insert Sort Algorithm） 最优情况：最少比较一次，移动两次。Cmin = n-1；Mmin=（n-1）×2； 最坏情况：最多比较i次，移动i＋2次（逆序）（i=1，2，…，n-1）Cmax=1+2+…+（n-1）=（n2-n）/2M max=3+4+…+（n+1）=（n2+3n-4）/2Cave=（n2+n-2）/4M ave=（n2+7n-8）/4 故直接插入排序的时间复杂度为O（n2），它的时间复杂度和待排序列的顺序有关。 2.归并排序算法（Merge Sort Algorithm）通过迭代作图法可知，归并算法的算法复杂度为O(nlogn)，它的时间复杂度和待排序列的顺序无关。 3.快速排序算法（Quick Sort Algorithm） 最坏情况：顺序或逆序时，一次partition只能解决一个元素的位置 排列，所以最坏情况下的时间复杂度为O(n^2) 平均情况：O(logn),枢轴元素两边的待排序列分的越平均，时间复杂度越小。 五、算法优化1.归并排序的“哨兵”在归并排序中，将两个已经排号的序列整合在一起时，之前我们是这样做的：if(i == n1)&#123;//如果左边数组已经全放进去 while(j &lt; n2) A[k++] = R[j++]; &#125; else if ( j == n2)&#123;//如果右边数组已经全放进去 while(i &lt; n1) A[k++] = L[i++]; &#125; 如果在待排的两个序列的最右端添加一个==哨兵==，即最大值MAX，就不用判断有序列已经选完了的问题，能够有效的减少判断的次数。 2.快速排序枢轴元素pivot的选取pivot的选择对于快速排序时间复杂度的影响十分的大。从上面的“逆序测试数据”可知，如果每次选择的pivot都是最大/最小值，快速排序的复杂度可能会达到O(n^2)。每次运行过程中，随机选取pivot, 通常能得到比较好的结果。我采用了一种==三者取中==的方法，即选取第一个、最后一个以及中间的元素的中位数作为pivot，这样能够有效的避免“worst condition”的出现。代码如下：(摘自csdn博客)//median-of-three pivot ruleprivate static int choosePivotMedianOfThree(int[] a, int l, int r) &#123; int mid = 0; if ((r-l+1) % 2 == 0) &#123; mid = l + (r-l+1)/2 - 1; &#125; else &#123; mid = l + (r-l+1)/2; &#125; //只需要找出中位数即可，不需要交换 //有的版本也可以进行交换 if (((a[l]-a[mid]) * (a[l]-a[r])) &lt;= 0) &#123; return l; &#125; else if (((a[mid]-a[l]) * (a[mid]-a[r])) &lt;= 0) &#123; return mid; &#125; else &#123; return r; &#125;&#125;--------------------- /*作者：xinyuexy *来源：CSDN *原文：https://blog.csdn.net/qq_31903733/article/details/82945605 *版权声明：本文为博主原创文章，转载请附上博文链接！*/ 再将选取的pivot与队列第一个元素交换即可。 3.快速排序稳定性的改善快速排序是“不稳定”的原因在于，partition的最后一步，pivot和指针i位置的元素交换。举例： 3 1 3’ 5 2 6 1’(大小相同的元素用’区分) 3 1 2 5 3’ 6 1’ 3 1 2 1’ 3’ 6 5(这时候还没问题) 1’ 1 2 3 3’ 6 5(最后一步1’和1的顺序发生变化) 解决方法：每次partition的最后一步时，遍历待排数组A[i]之前的部分，将与A[i]大小相同的元素整体后移。 六、实验心得 本次实验我学习了三种重要算法：插入排序算法、归并排序算法和快速排序算法，了解了它们的原理和适用的情景。 我认为相对于快速排序，归并排序更具有健壮性，它不会因为序列的顺序影响时间复杂度，而且它是一个稳定的排序。可能由于数据集不够大，我还没能充分体会到快速排序在时间上的优势。 最坏情况下的时间复杂度和平均时间复杂度相差非常大，在以后分析算法时要兼顾两者。 七、附录大纲 Test.cpp测试程序，包括数据集生成，待排序列输出等等。 InsertSort.cpp插入排序算法 MergeSort.cpp归并排序算法 QuickSort.cpp快速排序算法 12个测试数据集txt 12个测试结果的截图]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>插入排序</tag>
        <tag>归并排序</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法作业笔记0404]]></title>
    <url>%2F201904%2F%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B00404%2F</url>
    <content type="text"><![CDATA[0404算法作业测试程序时间#include&lt;ctime&gt;clock_t start,finish;double runtime;start = clock();//......finish = clock();runtime = (double)(finish - start)/CLOCKS_PER_SECOND; 归并排序Debug/*MergeSort*/void Merge(int A[], int p, int q, int r)&#123; //创造左右两个数组L、R，将已经排好的两部分放进去 int n1 = q - p + 1, n2 = r - q; int L[n1], R[n2]; int i,j; for (i = 0; i &lt; n1; i++) L[i] = A[p + i]; for (j = 0; j &lt; n2; j++) R[j] = A[q + 1 + j]; //开始对两个数组进行归并 i = 0; j = 0; for (int k = p; k &lt;= r; k++) &#123; if(i == n1)&#123;//如果左边数组已经全放进去 while(j &lt; n2) A[k++] = R[j++];//这里j&lt;n2,而不是j&lt;n2-1! &#125; else if ( j == n2)&#123;//如果右边数组已经全放进去 while(i &lt; n1) A[k++] = L[i++]; &#125; else&#123;//比较两个数组，把小的数放进A数组，指针后移 if (L[i] &lt;= R[j]) &#123; A[k] = L[i]; i++; &#125; else &#123; A[k] = R[j]; j++; &#125; &#125; &#125;&#125;void MergeSortUp(int A[], int p,int r)&#123; if (p &lt; r) &#123; int q = (p + r) / 2; MergeSortUp(A, p, q); MergeSortUp(A, q + 1, r); Merge(A, p, q, r); &#125;&#125; double类型的占位符在C语言中： 1）用 scanf() 函数输入 double 类型的变量时，转换说明中的转换字符(占位符)只能用 lf，即%lf，写成 %f 无法正确输入double型数据； 2）用 printf() 函数输出 double 类型的变量时，转换说明中的转换字符(占位符)可用 %lf 或%f，皆能正确输出，且输出结果一致。 为简单与一致性起见，在对 double 类型的变量输入输出时，建议都用 %lf 占位符。]]></content>
      <categories>
        <category>C</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[算法作业笔记0403]]></title>
    <url>%2F201904%2F%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B00403%2F</url>
    <content type="text"><![CDATA[4月3日作业插入算法、归并排序、快速排序fscanf函数 函数名:fscanf 功 能:从一个流中执行格式化输入,fscanf遇到空格和换行时结束，注意空格时也结束。这与fgets有区别，fgets遇到空格不结束。 返回值：整型，成功返回读入的参数的个数，失败返回EOF(-1)。 用法： FILE *stream：文件指针char *format：格式字符串[argument...]：输入列表 #include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;int main(void)&#123; int i; printf(&quot;Input an integer:&quot;); /*从标准输入中读取一个整数*/ if(fscanf(stdin, &quot;%d&quot;,&amp;i)) printf(&quot;The integer read was:%d\n&quot;, i); else &#123; fprintf(stderr, &quot;Error reading an integer from stdin.\n&quot;); exit(1); &#125; return 0;&#125; int的最大值 int占32位的时候，最大可以赋值为：2147483647。也就是0x7fffffff。 在计算机里我们的规定最高位是符号位。为0是正，为1负。所以最高位是不可以参加计算的。 比如二进制数1000最高位是符号位的话，转十进制不是8，而是-0，对就是负0（正0的二进制形式是0000）。 所以，k位的二进制整数可以表示的状态共2^k种，所以，有2^(k-1)个，而int型占4个字节，有32位，所以有2^31-1个，即2147483647。 字符指针的定义 C生成随机数&lt;一&gt;C/C++怎样产生随机数：这里要用到的是rand()函数, srand()函数，C语言/C++里没有自带的random(int number)函数。 (1) 如果你只要产生随机数而不需要设定范围的话，你只要用rand()就可以了：rand()会返回一随机数值, 范围在0至RAND_MAX 间。RAND_MAX定义在stdlib.h, 其值为2147483647。 (2) 如果你要随机生成一个在一定范围的数，你可以在宏定义中定义一个random(int number)函数，然后在main()里面直接调用random()函数： 例如：随机生成10个0~100的数：#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#define random(x) (rand()%x)void main()&#123; for(int x=0;x&lt;10;x++) printf(&quot;%d/n&quot;,random(100));&#125; (3)但是上面两个例子所生成的随机数都只能是一次性的，如果你第二次运行的时候输出结果仍和第一次一样。这与srand()函数有关。srand()用来设置rand()产生随机数时的随机数种子。在调用rand()函数产生随机数前，必须先利用srand()设好随机数种子（seed）, 如果未设随机数种子, rand()在调用时会自动设随机数种子为1。上面的两个例子就是因为没有设置随机数种子，每次随机数种子都自动设成相同值1 ，进而导致rand()所产生的随机数值都一样。 srand()函数定义 ： void srand (unsigned int seed);通常可以利用geypid()或time(0)的返回值来当做seed如果你用time(0)的话，要加入头文件#include #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;#define random(x) (rand()%x)void main()&#123; srand((int)time(0)); for(int x=0;x&lt;10;x++) printf(&quot;%d/n&quot;,random(100));&#125; fprintf函数#int fprintf (FILE* stream, const char*format, [argument]) FILEstream：文件指针const char format：输出格式[argument]：附加参数列表 示例：//...#include &lt;cstdio&gt;int main(void) &#123; FILE *FSPOINTER; char STRBUFF[16] = &quot;Hello World.&quot;; //... FSPOINTER = fopen(&quot;HELLO.TXT&quot;, &quot;w+&quot;); //... fprintf(FSPOINTER, &quot;%s&quot;, STRBUFF); //... return 0;&#125;输出至文件HELLO.TXT：Hello World]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>fscanf</tag>
        <tag>fprint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（14）]]></title>
    <url>%2F201903%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8814%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY14_高分辨率及键盘输入1. 继续测试性能 之前我们通过“消除位移处理”缩短时间，对于很多“位移”情况，改进才能看到效果。所以我们使用大量的定时器，然后对性能进行比较。 2.提高分辨率（1） 由于画面切换中我们要使用BIOS，所以就需要改写asmhead.nas的“画面模式设定”部分了。 ; 设定画面模式 MOV BX,0x4101 ; VBE的640x480x8bi彩色 MOV AX,0x4f02 INT 0x10 MOV BYTE [VMODE],8 ; 记下画面模式（参考C语言） MOV WORD [SCRNX],640 MOV WORD [SCRNY],480 MOV DWORD [VRAM],0xe0000000 3.提高分辨率（2） 将程序改写，使在真机上运行 4.键盘输入（1） 按照下表，在键盘按键的基础上加上0x80就可以得到键弹起时的数值 5.键盘输入（2） 问题：每一个按键都需要一个if，程序会变长，我们进行修改： static char keytable[0x54] = &#123; 0, 0, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;0&apos;, &apos;-&apos;, &apos;^&apos;, 0, 0, &apos;Q&apos;, &apos;W&apos;, &apos;E&apos;, &apos;R&apos;, &apos;T&apos;, &apos;Y&apos;, &apos;U&apos;, &apos;I&apos;, &apos;O&apos;, &apos;P&apos;, &apos;@&apos;, &apos;[&apos;, 0, 0, &apos;A&apos;, &apos;S&apos;, &apos;D&apos;, &apos;F&apos;, &apos;G&apos;, &apos;H&apos;, &apos;J&apos;, &apos;K&apos;, &apos;L&apos;, &apos;;&apos;, &apos;:&apos;, 0, 0, &apos;]&apos;, &apos;Z&apos;, &apos;X&apos;, &apos;C&apos;, &apos;V&apos;, &apos;B&apos;, &apos;N&apos;, &apos;M&apos;, &apos;,&apos;, &apos;.&apos;, &apos;/&apos;, 0, &apos;*&apos;, 0, &apos; &apos;, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;-&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;+&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;0&apos;, &apos;.&apos; &#125;; if (256 &lt;= i &amp;&amp; i &lt;= 511) &#123; /* 键盘数据 */ sprintf(s, &quot;%02X&quot;, i - 256); putfonts8_asc_sht(sht_back, 0, 16, COL8_FFFFFF, COL8_008484, s, 2); if (i &lt; 256 + 0x54) &#123; if (keytable[i - 256] != 0) &#123; s[0] = keytable[i - 256]; s[1] = 0; putfonts8_asc_sht(sht_win, 40, 28, COL8_000000, COL8_C6C6C6, s, 1); &#125; &#125; &#125; else if (512 &lt;= i &amp;&amp; i &lt;= 767) &#123; /* 鼠标数据 */ 6.追记内容（1）==在窗口中添加一些画，改变鼠标和字符的显示位置以及颜色。按下BackSpace，还可以改写已经输入的字符== 7.追记内容（2）==使用鼠标移动窗口==添加的程序if ((mdec.btn &amp; 0x01) != 0) &#123; /* 按下左键、移动sht_win */ sheet_slide(sht_win, mx - 80, my - 8); /* 到这里结束！ */ &#125; 即使窗口跑到了画面外，也没有问题。因为我们已经针对鼠标指针提前采取了对策，这就如同图层跑到了画面外面也可以动起来一样。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（13）]]></title>
    <url>%2F201903%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8813%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY13_定时器（2）1. 简化字符串显示 将“涂背景色、写字符、完成刷新”写进一个函数，更方便使用void putfonts8_asc_sht(struct SHEET *sht, int x, int y, int c, int b, char *s, int l) &#123; boxfill8(sht-&gt;buf, sht-&gt;bxsize, b, x, y, x + l * 8 - 1, y + 15); putfonts8_asc(sht-&gt;buf, sht-&gt;bxsize, x, y, c, s); sheet_refresh(sht, x, y, x + l * 8, y + 16); return; &#125; x, y ...... 显示位置的坐标c ...... 字符颜色（color）b ...... 背景颜色（back color）s ...... 字符串（string）l ...... 字符串长度（length） 2.重新调整FIFO缓冲区（1） 将定时器用的多个FIFO缓冲区都集中成一个，往FIFO写入不同的数据，就能够正常地分辨出是哪个寄存器超时了。 3.测试性能 我们专注于定时器地改良，是因为在今后地开发中会经常使用定时器。 测试性能地方法：先对HariMain略加修改，恢复变量count，然后完全不显示计数，全力执行“count++；”语句。当到了10秒后超时的时候，再显示这个count值。 4.重新调整FIFO缓冲区（2） 把3个定时器全部归纳到一个FIFO缓冲区中，就可以把键盘和鼠标归纳起来，只用1个FIFO缓冲区。 0～ 1…………………光标闪烁用定时器3…………………3秒定时器10…………………10秒定时器256～ 511…………………键盘输入（从键盘控制器读入的值再加上256）512～ 767……鼠标输入（从键盘控制器读入的值再加上512） 此次我们改写最多的是HariMain。在HariMain里，执行“count++;”语句和查询FIFO缓冲区中是否有数据这两个操作，是多次交互进行的。这次修改以后，程序只需要看1个FIFO缓冲区就行了，而以前要看3个。也就是说，FIFO缓冲区的查询能够更快完成，从而使得“count++;”语句执行的次数更多。 5.加快中断处理（4） 在FIFO里有一个取代移位处理的方法：读取一个数据以后不是让后面的数据向前靠齐，而是改变下一次的数据读取地址。这是一个很巧妙的方法，但不适用于定时器。因为从timers[ ]中去除超时的中断时，这个方法虽然不错，但问题在于，用timer_settime登录中断时，后面的中断必须后移，在这一点上，以上方法不太好。 更好的方法：我们在结构体struct TIMER中加入next变量。这是个地址变量，用来存放下一个即将超时的定时器的地址。 判断一下顺序，如果我们知道了插入的位置（即知道了在s和t中间插入的话），就可以像下图那样把数据重新连接起来。也就是仅仅改变s-&gt;next和timer-&gt;next的值就可以了。 6.使用“哨兵”简化程序 我们来看看具体的做法。在进行初始化的时候，将时刻0xffffffff的定时器连到最后一个定时器上。虽然我们偷了点懒没有设定fifo等，但不必担心。反正无论如何都不可能到达这个时刻（在到达之前会修改时刻），所以不可能发生超时问题。它一直处于后面，只是个附带物，是个留下来看家的留守者。这个留守者正是“哨兵“。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（12）]]></title>
    <url>%2F201903%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8812%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY12_定时器（1）1.使用定时器介绍定时器的作用，添加定时器实现中断。 定时器（Timer）对于操作系统十分重要，每隔一段时间就发送一个中断信号给CPU。有了定时器，CPU就不用辛苦地计量时间。 没有定时器，我们就没法使用HLT指令，意味着要浪费很多电能。 有了定时器中断，程序只需要以自己的步调处理自己的问题就可以了。至于到底经过了多少时间，只要在中断处理程序中数一数定时器中断发生的次数就可以了。 要在电脑中管理定时器，只需要对PIT（Programmable Interval Timer可编程的间隔型定时器）进行设定就可以了。通过设定PIT，让定时器每隔多少秒就产生一次中断。 在电脑中PIT连接着IRQ（interrupt request）的0号，所以只要设定了PIT就可以设定IRQ0的中断间隔。 我们不清楚其中的详细原理，只知道只要执行3次OUT指令设定就完成了。将中断周期设定为11932的话，中断频率好像就是100Hz，也就是说1秒钟会发生100次中断。 IRQ0发生时所调用的中断处理程序几乎和键盘的中断处理程序一样。 2.计量时间==加入计时器显示时间== 让中断执行下面的程序 struct TIMERCTL &#123; unsigned int count; &#125;; 实现方法 定义struct TIMERCTL结构体，在结构体内定义一个计数变量。 初始化PIT时，计数变量为0，每次发生定时器中断时，计数变量就以1递增。 即计数变量在HariMain中不进行加算，每1s也会增加100. 3.超时功能==超时功能的定义，添加超时功能== 我们可以计量处理所花费的时间。具体做法：处理前看一下时间并把它存放到一个变量变量里，处理结束后再看一下时间，做差即可。根据这个可以编制==基准测试程序== 超时（timeout）：过了一段时间，定时器提示操作系统。 struct TIMERCTL &#123; unsigned int count; unsigned int timeout; struct FIFO8 *fifo; unsigned char data; &#125;; timeout用于记录离超时还有多长时间，当剩余时间到达0时，程序就往IFIFO缓冲区里发送数据。 4.设定多个定时器 在上一节做的超时功能，超时结束后如果再设定1000的话，那我们就可以让它每10秒显示一次，或是让它一闪一灭地显示。 开发操作系统时，超时功能非常方便，所以在很多地方都可以使用它。比如可以让电子时钟每隔1秒重新显示一次；演奏音乐时，可以用它计量音符的长短；也可以让它以0.1秒1次的频率来监视没有中断功能的装置；另外，还可以用它实现光标的闪烁功能。为了简单地实现这些功能，我们要准备很多能够设定超时的定时器。 5.加快中断处理（1） 问题：inthandler20中断花费了很长的时间 优化部分：现每次进行定时器中断处理的时候，都会对所有活动中的定时器进行“timerctl.timer[i].timeout—;”处理。也就是说，CPU要完成从内存中读取变量值，减去1，然后又往内存中写入的操作。 time[i].timeout不再是“所剩时间”而是“予定时刻”，将timerctl.count和timer[i].timeout进行比较，不用再经过内存计算。 问题：count设定成最大值，一段时间后需要重新启动操作系统。 6.加快中断处理（2）==优化if语句==解决方案：添加timerctl.next，让它记住下一个时刻 7.加快中断处理（3） 问题：到达next时刻和没到next时刻的定时器中断，它们的处理时间差别很大。这样的程序结构不好。因为平常运行一直都很快的程序，会偶尔由于中断处理拖得太长，而搞得像是主程序要停了似的。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（11）]]></title>
    <url>%2F201903%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8811%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY11_制作窗口1.鼠标显示问题 我们系统的鼠标不能够向右或向下移动到画面之外隐藏起来。为此我们修改HariMain 将if (mx &gt; binfo-&gt;scrnx - 16) &#123; mx = binfo-&gt;scrnx - 16; &#125; if (my &gt; binfo-&gt;scrny - 16) &#123; my = binfo-&gt;scrny - 16; &#125; 修改为if (mx &gt; binfo-&gt;scrnx - 1) &#123; mx = binfo-&gt;scrnx - 1; &#125; if (my &gt; binfo-&gt;scrny - 1) &#123; my = binfo-&gt;scrny - 1; &#125; 2.实现画面外的支持3.shtctl的指定省略仅仅是上下移动图层就必须指定ctl太麻烦了。修改将sheet_refresh、sheet_slide、sheet_free等函数，让它们不再指定ctl void sheet_refresh(struct SHEET *sht, int bx0, int by0, int bx1, int by1) &#123; if (sht-&gt;height &gt;= 0) &#123; /* 如果正在显示，则按新图层的信息进行刷新*/ sheet_refreshsub(sht-&gt;ctl, sht-&gt;vx0 + bx0, sht-&gt;vy0 + by0, sht-&gt;vx0 + bx1, sht-&gt;vy0 + by1); &#125; return; &#125; void sheet_slide(struct SHEET *sht, int vx0, int vy0) &#123; int old_vx0 = sht-&gt;vx0, old_vy0 = sht-&gt;vy0; sht-&gt;vx0 = vx0; sht-&gt;vy0 = vy0; if (sht-&gt;height &gt;= 0) &#123; /* 如果正在显示，则按新图层的信息进行刷新 */ sheet_refreshsub(sht-&gt;ctl, old_vx0, old_vy0, old_vx0 + sht-&gt;bxsize, old_vy0 + sht-&gt;bysize); sheet_refreshsub(sht-&gt;ctl, vx0, vy0, vx0 + sht-&gt;bxsize, vy0 + sht-&gt;bysize); &#125; return; &#125; void sheet_free(struct SHEET *sht) &#123; if (sht-&gt;height &gt;= 0) &#123; sheet_updown(sht, -1); /* 如果正在显示，则先设置为隐藏 */ &#125; sht-&gt;flags = 0; /* 未使用标记 */ return; &#125; 4.显示窗口 先准备一张图层，然后在图层缓冲区内描绘一个貌似窗口的图就可以了。 只是对graph.c的init_screen8函数稍微进行修改。void make_window8(unsigned char *buf, int xsize, int ysize, char *title) &#123; static char closebtn[14][16] = &#123; &quot;OOOOOOOOOOOOOOO@&quot;, &quot;OQQQQQQQQQQQQQ$@&quot;, &quot;OQQQQQQQQQQQQQ$@&quot;, &quot;OQQQ@@QQQQ@@QQ$@&quot;, &quot;OQQQQ@@QQ@@QQQ$@&quot;, &quot;OQQQQQ@@@@QQQQ$@&quot;, &quot;OQQQQQQ@@QQQQQ$@&quot;, &quot;OQQQQQ@@@@QQQQ$@&quot;, &quot;OQQQQ@@QQ@@QQQ$@&quot;, &quot;OQQQ@@QQQQ@@QQ$@&quot;, &quot;OQQQQQQQQQQQQQ$@&quot;, &quot;OQQQQQQQQQQQQQ$@&quot;, &quot;O$$$$$$$$$$$$$$@&quot;, &quot;@@@@@@@@@@@@@@@@&quot; &#125;; int x, y; char c; boxfill8(buf, xsize, COL8_C6C6C6, 0, 0, xsize - 1, 0 ); boxfill8(buf, xsize, COL8_FFFFFF, 1, 1, xsize - 2, 1 ); boxfill8(buf, xsize, COL8_C6C6C6, 0, 0, 0, ysize - 1); boxfill8(buf, xsize, COL8_FFFFFF, 1, 1, 1, ysize - 2); boxfill8(buf, xsize, COL8_848484, xsize - 2, 1, xsize - 2, ysize - 2); boxfill8(buf, xsize, COL8_000000, xsize - 1, 0, xsize - 1, ysize - 1); boxfill8(buf, xsize, COL8_C6C6C6, 2, 2, xsize - 3, ysize - 3); boxfill8(buf, xsize, COL8_000084, 3, 3, xsize - 4, 20 ); boxfill8(buf, xsize, COL8_848484, 1, ysize - 2, xsize - 2, ysize - 2); boxfill8(buf, xsize, COL8_000000, 0, ysize - 1, xsize - 1, ysize - 1); putfonts8_asc(buf, xsize, 24, 4, COL8_FFFFFF, title); for (y = 0; y &lt; 14; y++) &#123; for (x = 0; x &lt; 16; x++) &#123; c = closebtn[y][x]; if (c == &apos;@&apos;) &#123; c = COL8_000000; &#125; else if (c == &apos;$&apos;) &#123; c = COL8_848484; &#125; else if (c == &apos;Q&apos;) &#123; c = COL8_C6C6C6; &#125; else &#123; c = COL8_FFFFFF; &#125; buf[(5 + y) * xsize + (xsize - 21 + x)] = c; &#125; &#125; return; &#125; 5.小实验HariMain中有设置图层高度的地方，如果像下面这样，把窗口图层放在最上面，光标图层放在其次，会变成什么样呢？sheet_updown(sht_back, 0); sheet_updown(sht_mouse, 1); sheet_updown(sht_win, 2); 鼠标会跑到窗口图层的下面。 6.高速计数器 我们要做一个能够计数，并且能够把计数结果显示出来的窗口。 但是在刷新的时候，总是先刷新refresh范围内的背景图层，然后再刷新窗口图层，导致数字闪烁。 7.消除闪烁（1） 窗口图层刷新是因为窗口的内容有变化，所以要在画面上显示变化后的新内容。基本上来讲，可以认为其他图层的内容没有变化（如果其他图层的内容也变了，那么应该会随后执行该图层的刷新）。既然如此，图层内容没有变化也进行刷新的话就太浪费了。如果只是窗口变了，那背景就不用刷新了。假如上面有鼠标，但鼠标的图层没有变化，我们也必须要刷新。窗口的刷新，可能会覆盖鼠标的一部分显示区域。 在sheet_slide函数里，图层的移动有时会导致下面的图层露出，所以要从最下面开始刷新。另一方面，在移动目标处，比新移来的图层位置还要低的图层没有什么变化，而且只是隐藏起来了，所以只要刷新移动的图层和它上面的图层就可以了。 但是修改代码后，鼠标放在数字区的时候，鼠标又开始闪烁。 8.消除闪烁（2） 闪烁现象是由于一会儿描绘一会儿消除造成的。所以说要想消除闪烁，就要在刷新窗口时避开鼠标所在的地方对VRAM进行写入处理。 方法：先开辟一块儿内存，大小和VRAM一样，这块内存用来表示画面上的点是哪个图层的像素，相当于图层的地图。 今后程序会对照map内容来向VRAM中写入，所以有时没必要从下面开始一直刷新到最上面一层。 在sheet_slide函数里，首先重写map，分别对应移动前后的图层，然后调用sheet_refreshsub函数。在移动前的地方，只针对上层图层移走之后而露出的下层图层进行重绘就可以了。在移动目的地处仅重绘了一张移动过去的图层。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（10）]]></title>
    <url>%2F201903%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%8810%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY10_叠加处理1.内存管理（续） memory.c中增加了“向上舍入”的部分，即我们要编写一些总是以0x1000字节为单位进行内存分配和释放的函数，它们会把指定的内存大小按0x1000字节为单位向上舍入（ roundup）。 从向下舍入开始要想把十六进制的某一位设置为0，同样只进行“与运算”就可以。 向上舍入：先向下舍入，再在它的结果上做个加法运算就可以了。（要先判断后几位是不是0） 更好的向上舍入的方法：i = (i + 0xfff) &amp; 0xfffff000; 2.叠加处理 寻找一种方法，不仅适用于鼠标的叠加，还适用于窗口的叠加。 在程序中创建管理多重图层信息的结构SHTCTL sheet_refresh函数：这个函数会从下到上描绘所有的图层。refresh是“刷新”的意思。电视屏幕就是在1秒内完成多帧的描绘才做出动画效果的，这个动作就被称为刷新。而这种对图层的刷新动作，与电视屏幕的动作有些相似，所以我们也给它起名字叫做刷新。 sheet_slide：不改变图层的高度而只上下左右移动图层的函数。 sheet_free释放已使用图层的内存的函数。 struct SHTCTL *shtctl_init(struct MEMMAN *memman, unsigned char *vram, int xsize, int ysize) &#123; struct SHTCTL *ctl; int i; ctl = (struct SHTCTL *) memman_alloc_4k(memman, sizeof (struct SHTCTL)); if (ctl == 0) &#123; goto err; &#125; ctl-&gt;vram = vram; ctl-&gt;xsize = xsize; ctl-&gt;ysize = ysize; ctl-&gt;top = -1; /*一个SHEET没都有 */ for (i = 0; i &lt; MAX_SHEETS; i++) &#123; ctl-&gt;sheets0[i].flags = 0; /* 标记为未使用 */ &#125; err: return ctl; &#125; 首先使用memman_alloc_4k来分配用于记忆图层控制变量的内存空间，这时必须指定该变量所占空间的大小，不过我们可以使用sizeof（struct SHTCTL）这种写法，让C编译器自动计算。只要写sizeof（变量型），C编译器就会计算出该变量型所需的字节数。接着，我们给控制变量赋值，给其下的所有图层变量都加上“未使用”标签。 3.提高叠加处理速度（1） 只需要重新描绘鼠标移动相关的部分，也就是移动前后的部分就可以了，即256×2=512个像素。这只是64 000像素的0.8%而已，所以有望提速很多。现在我们根据这个思路写一下程序。 要在画面上显示坐标等信息，结果又执行了sheet_refresh程序。所以我们要解决图层内文字显示的问题。 4.提高叠加处理速度（2） 使不写入像素内容，也要多次执行if语句。我们最初就应该把for语句的范围限定在刷新范围之内。void sheet_refreshsub(struct SHTCTL *ctl, int vx0, int vy0, int vx1, int vy1) &#123; int h, bx, by, vx, vy, bx0, by0, bx1, by1; unsigned char *buf, c, *vram = ctl-&gt;vram; struct SHEET *sht; for (h = 0; h &lt;= ctl-&gt;top; h++) &#123; sht = ctl-&gt;sheets[h]; buf = sht-&gt;buf; /* 使用vx0～vy1，对bx0～by1进行倒推 */ bx0 = vx0 - sht-&gt;vx0; by0 = vy0 - sht-&gt;vy0; bx1 = vx1 - sht-&gt;vx0; by1 = vy1 - sht-&gt;vy0; if (bx0 &lt; 0) &#123; bx0 = 0; &#125; /* 说明(1) */ if (by0 &lt; 0) &#123; by0 = 0; &#125; if (bx1 &gt; sht-&gt;bxsize) &#123; bx1 = sht-&gt;bxsize; &#125; /* 说明(2) */ if (by1 &gt; sht-&gt;bysize) &#123; by1 = sht-&gt;bysize; &#125; for (by = by0; by &lt; by1; by++) &#123; vy = sht-&gt;vy0 + by; for (bx = bx0; bx &lt; bx1; bx++) &#123; vx = sht-&gt;vx0 + bx; c = buf[by * sht-&gt;bxsize + bx]; if (c != sht-&gt;col_inv) &#123; vram[vy * ctl-&gt;xsize + vx] = c; &#125; &#125; &#125; &#125; return; &#125;]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[30天自制操作系统（9）]]></title>
    <url>%2F201903%2F30%E5%A4%A9%E8%87%AA%E5%88%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%889%EF%BC%89%2F</url>
    <content type="text"><![CDATA[DAY9_内存管理1.整理源文件 2.内存容量检查 在最初启动时，BIOS肯定要检查内存容量，所以只要我们问一问BIOS，就能知道内存容量有多大。但是会很麻烦，我们选择自己动手检查内存。 做法： 首先，暂时让486以后的CPU的高速缓存（cache）功能无效。原理：内存检查时，要往内存里随便写入一个值，然后马上读取，来检查读取的值与写入的值是否相等。如果内存连接正常，则写入的值能够记在内存里。如果没连接上，则读出的值肯定是乱七八糟的。如果CPU里加上了缓存，写入和读出的不是内存，而是缓存。结果，所有的内存都“正常”，检查处理不能完成。 通过HariMain识别3GB范围的内存 3.内存容量检查（2） 编译器对程序进行了优化，无法识别内存，于是我们选择用汇编来写。 4.挑战内存管理内存管理是什么，为什么要进行内存管理？操作系统在工作中，有时需要分配一定大小的内存，用完以后又不再需要，这种事会频繁发生。为了应付这些需求，必须恰当管理好哪些内存可以使用（哪些内存空闲），哪些内存不可以使用（正在使用），这就是内存管理。如果不进行管理，系统会变得一塌糊涂，要么知道哪里可用，要么多个应用程序使用同一地址的内存。 内存管理的方法 创建相应数量的区域，用1和0表示该区域是否被使用。但是这种方法的缺点就是，在内存区域很多的情况下，管理表很大。 列表管理的方法：从xxx号开始，yyy字节的空间是空着的。优点：占用内存小。大块内存的分配和释放都非常迅速。缺点：程序管理变复杂了；当可用空间零散的时候，空间管理信息可能会被用完。 我们的操作系统使用的方法是，当MEMMAN用完的时候，将小的内存区域舍弃，先不去管它。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统课程笔记（7）]]></title>
    <url>%2F201903%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统课程笔记（七） 3月19日Chap.5 CPU调度（简单的一章） 一、基本概念1. 概念调度对象都是由CPU-burst和I/O-burst组成的，CPU-burst占用的时间很短。 2.调度程序（短期） 分为==抢占式==和==非抢占式==，两者的区别是调用调度时，CPU上是否有东西。 运行-&gt;等待：非抢占 运行-&gt;就绪：抢占 等待-&gt;就绪：抢占 终结：非抢占 （有人进入就绪状态调度就被激活——抢占！） 3.Dispatcher 分派（上下文切换） 减少延时 二、准则（判断CPU调度的好坏） 1.CPU使用率 2.吞吐量 3.周转时间（到达-执行结束的时间） 4.等待时间（进程在就绪队列中等待的所有时间之和） 5.响应时间==要找例题学会算这些准则==三、调度算法Ⅰ、单队列（把所有就绪进程排进一个队列） 1.FCFS先到先服务 2.最短作业优先 非抢占 抢占preemitive（最短剩余作业优先）从平均时间来讲效果最好。最短剩余作业的意义：相当于“基准”，其他调度算法越接近越好 优先级（调度时准入时有大概的时间，操作系统给任务赋优先级） 抢占 非抢占缺点：可能会把某些进程饿死（优先级太低了）解决办法：老化（可以通过升降规则解决） 4.RR Round Robin时间片转换 运行结束或时间片到就选下一个 与时间片大小的选取有很大关系，至少要大于切换代价响应时间很迅速，跟之前讲的OS分时一个道理。 Ⅱ、多队列 1.普通队列不够灵活（没有考虑系统运用期间去调整） 2.多级反馈队列进程在队列间变换（比如太慢的进程扔到后台队列）队列的优先级可以有升级、降级 调度算法的评估 确定性模型——静态的计算 分布模型——动态分布，到达时间满足某种分布 模拟——；对进程进行调度；得到某种参数 真实实现 多级反馈队列的定义？（设计多级反馈队列，需要考虑什么参数？） 1.几个队列 2.每个队列的调度算法 3.队列间调度（优先级升降？分时间片？） 4.初始队列（当进程需要服务时进入哪个队列？） 四、实时调度 real-time scheduling 硬实时有准入，不能满足你就不接待你 软实时TCP/IP尽力服务你 给高优先级 不降级 别人不能升级 分派代价降低 五、调度距离Unix Solaris]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[操作系统课程笔记（6）]]></title>
    <url>%2F201903%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统课程笔记（六）3月15日Chap.4 线程 Thread一、多进程 原始进程只有一个可执行序列。 上图右边-不同的进程寄存器、栈都要区分。进程间需要通信，但通信的成本很高。 于是我们将协作/并发的任务用线程实现 每个进程有一个可执行序列，多个CPU无意义每个进程有多个可执行序列，可分配到不同的CPU（多处理器）——即可以实现资源共享、经济性（不用切换上方的资源） Q1：多线程和多进程的优缺点 A： 响应速度多线程较快 资源占用，多线程共享资源 协作，进程间协作的成本更高。 CPU直接对应进程，进程集成度更强，结束更简单。 二、多线程==（将线程和进程对比学习，从结构和功能入手）== TCB线程控制块 用户线程、内核线程 1.线程的实现（结构）graph TBA(用户程序)---B(TCB)B---C(线程库)C---D(OS-&gt;PCB) 多对一用户态频繁地使用系统调用，下面被阻塞时，上面的用户态线程也无法使用。 一对一 内核能看到用户态线程，每个用户态对应一个内核线程。 线程间并发互不影响 CPU提供给用户调用，用户可通过调用创建线程 graph TBA(user thread)---B(kernel thread)B---C(CPU) 多对多 线程库提供创建和删除LWP（light weight thread轻量级进程）的功能。 即内核线程调度LWP，LWP调度TCB 对于重要的用户线程可以分配一个专门的内核线程 2.线程的调度全局调度和局部调度 对所有进程中的线程进行调度就是全局调度 对一个进程中的线程进行调度就是局部调度 一次调度和二次调度 一对一是一次调度 多对一和多对多是二次调度 3.线程上下文切换（进程间/进程内）4.线程的功能 创建 fork(),esec() 取消 异步取消 在线程未完成之前终止它，可能会导致系统不稳定。 延迟取消 给线程信号，让它自己把占用的资源清理掉。清理进程时占用的资源比较好清理。线程取消进程不一定取消，垃圾不方便清理。所以延迟取消有很大作用。 线程池线程已经创建好了，可以直接拿去服务。便于系统资源的控制 线程特定数据允许每个线程有自己数据的复制（当没有线程创建权的时候十分有用）]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[操作系统课程笔记（4）]]></title>
    <url>%2F201903%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统课程笔记（四）3月8日Chap.2 操作系统的结构二、服务的组织结构 简单结构 如MS-DOS和Linux，服务简单的组合，没有结构可言。 分层 内层为外层的服务提供服务。然而有时候的场景决定难以分层。比如“CPU调度”和“辅助存储驱动”两个服务，两者可能会互相调用，难以区分。 微内核 只保留最小的功能集合，其余的扔到外面 内核中应该留什么？ 进程管理（创建、销毁进程），内存管理，服务间的沟通（通信） 优点：内核的代码量小，便于维护、便于移植。 缺点：服务间通信的代价太大（外层服务之间通信还要经过内层服务） 模块化 将内核态中的服务模块化，这些模块类似于积木块，可以进行“拆”、“装”，即添加或删除相应的模块。 服务间沟通可以用核内接口（把接口开放给其他对象，直接通过调用的方式） 混合 三、操作系统的生成 比如傻瓜生成法——调整代码。 计算机用在不同的场所，并具有不同外设配置。对某个特定场所，必须要配置和生成系统。SYSGNEN 操作系统的生成是“操作系统”和“硬件”的磨合。 bootstrap loader 定位核，装载进内存，开启。 操作系统在硬件上，需加载到内存。 Chap.3 进程管理意义：用有限的资源实现大量的任务。 “数据结构”1.一个任务graph LRA[sort.c]--&gt;B[sort.exe]B--&gt;C[内存] 内存：堆+栈、参数等。 2.多个任务2.1 PCB需要添加一些结构才能管理了。引入==进程控制块==PCB（process control block）。进程控制块的内容包括： 进程描述信息 比如标识符、属于哪个用户 进程控制信息 目前运行的状态、优先级 资源占用信息 处理器现场保护 当有任务被打断时保护现场 我们用PCB代替了原任务的代码和数据库。为了把这些杂乱无章的各种PCB组织起来，引入各种队列。 作业队列（running） 就绪队列（ready） 设备队列（wait） 在队列中我们能看到PCB的生命周期：在不同队列间转换。 2.2 调度Schedulers（控制PCB换队） 长期调度 相当于“看门的”，PCB准入。特性：执行频率不高.放准入进来要严格：使得CPU中使用I/O和使用CPU的PCB达到平衡。（the balance of I/O-bound process and CPU-bound process） 短期调度 从就绪队列中选人。 特性：执行频率高，所以速度应该很快，尽量不占用时间片。 中期调度 把PCB扔出去，有资源了再进来。 2.3 到CPU中执行2.4 上下文切换（context switch）（保护、恢复现场）多任务、多用户时，这样的“代价”一定要减小。有的OS有多组寄存器，便于上下文切换。（便于保存现场）]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[操作系统课程笔记（5）]]></title>
    <url>%2F201903%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统课程笔记（五）3月12日Chap.3 进程管理进程的“操作功能”==(这一部分都要好好联系PPT仔细看)== 一、创建 graph LRA(父进程)--&gt;B(子进程)B--&gt;C(子子进程) 子进程复制父进程，但fork的返回值不同。父进程返回子进程的id，子进程返回0。我们创造操作系统就是为了给用户提供fork，esec这样的函数。 fork 函数创建新的进程 esec 在fork系统调用之后用，用新进程代替原存储空间的进程。 二、终止 正常终止 任务完成，进程终止。 非正常终止 父进程把子进程终止掉两种非正常终止的原因： 无用的子进程 子进程占用太多的资源 父进程死 级联终止（子进程全部结束） 在挂到上级节点 三、挂起“ready”状态没有进入到“running”状态，就去睡觉了。 四、唤醒五、进程协作IPC：Inter-process communication进程间通信广义IPC的分类 OS只提供内存，A和B自己干 消息机制（Kernel参与） 若两进程在网络上，socket，RPC（remote procedure calls远程进程调用），RMI（remote method interaction远程方法调用） 1.内存共享当buffer存在时（查看PPT，理解程序） 2.消息机制在OS内核里提供调用。 分类 直接通信 间接通信（通过邮箱） 逻辑特性（同步） 阻塞 我发送信息，要等到对方接受才好 非阻塞 只发送，然后去做别的事情Buffer： 没有buffer时，消息机制只能阻塞。 有限缓存 都可以 无限缓存 必然非阻塞 3.网络上 socket IP+端口（IP定位到一个主机，端口（port）定位到程序）socket用来传输最底层的二进制刘，起到连接的作用 RPC（remote procedure calls远程进程调用） RMI（remote method interaction远程方法调用） 进程间通信，协作的两个进程必须自己做的事（o），需要OS做的事（x） / 传数据 控制 解释数据 给出反应 共享内存 o o o o 消息机制 x o o o socket x o o o RMI x x x o RPC x x x o]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[操作系统课程笔记（3）]]></title>
    <url>%2F201903%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统课程笔记（三）3月5日Chap.2 操作系统的结构一、操作系统的结构上一章我们说到了操作系统为我们提供服务，使我们能够更好地使用硬件。那么用户如何使用服务呢？ 命令接口：提供给最终用户，提供“统一”的接口 命令行（如cmd） 图形界面（如图形操作界面） 系统调用接口：提供给程序员统一的接口。 服务可以通过各种方式使用硬件，只要使用的够好。 系统/应用程序通过==API或直接使用==系统调用接口。为什么更多时候是用API而不是直接调用呢？答：使用API便于跨平台和移植。比如通过C库，在Windows平台和Unix平台上C语言都能编译和运行。 从系统/用户程序到硬件，我们分为三大块来讲解： 调用 参数 返回值 1.调用以输出字符串的C程序“a.c”为例。“a.c”不可以调用“显示a”的服务，因为用户态和内核态的区分。 程序通过系统调用接口查找需要的服务的功能号和中断号（只用一个中断号多个功能号，是因为中断号数量不够） 形成软中断，陷入内核态 保护现场 压栈（传参） 调用 去参 恢复现场 调用服务 注：系统调用接口解决了用户态和内核态分离的效果。 2.传参 寄存器 寄存器容量太小了，存不了多少 堆栈 可能是一个栈，也有可能是内核栈+用户栈，需要栈之间数据的拷贝和同步。 内存块]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[操作系统课程笔记（2）]]></title>
    <url>%2F201903%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统课程笔记（二）3月1日一、操作系统的定义 使用硬件是有过程的，硬件的使用十分困难，于是我们开发了操作系统，来帮助我们更好地使用硬件。 从操作系统向下看是硬件，硬件的资源是有限的，操作系统是==资源分配器== 从操作系统往上看，任务是无限的，操作系统是==控制程序==。负责各个任务的调度，使任务之间相互不影响。（如果没有“控制程序”，一个应用程序出现的BUG，可能会导致电脑的蓝屏） 二、从硬件的功能出发1. 完成计算（通用计算）的功能 找到高效的运算机制 CPU和各个部分配合工作的方式有两种： 轮询的工作方式； 中断的工作方式（Interrupt Handling） 中断的过程 保存现场 响应 恢复现场 为了提升效率，我们要==考虑降低中断的频率==。相比于“单字符”处理，“块”处理效率更高。（对于慢速设备，用==单字符中断==，对于快速设备，用==块中断==） 比如DMA通道，就是囤一组磁盘的信息再进行传递，降低了中断的频率。 中断产生的原因包括： I/O设备中断 计时器（系统保护里用到，产生中断，防止错误程序一直占用CPU） 软件出错 Trap 软件主动产生中断 I/O 的工作方式包括同步和异步。 同步即CPU等待I/O设备，如此循环。 异步可能有多个I/O，CPU和I/O设备之间，I/O设备和I/O设备之间都可以并行。工作过程即“睡眠”、“唤醒” 。异步工作机制有设备状态表。同步工作机制下CPU一直在监视数据寄存器，没办法干别的。 性价比 从速度、价格、易失性三个角度考虑，形成存储层次：即计算时够快，存储时够大。 存储层次最大的问题是一致性问题。（速度不匹配） 操作系统的保护机制包括双重模式和计时器。 双重模式把指令分为特权指令和普通指令，让操作系统执行在特权模式（可以执行所有指令的“内核态”）。 用户程序的执行需要调用操作系统执行特权指令。（“用户态”） 计时器即形成中断。 三、OS需要提供什么功能（五大功能） 进程管理——管理CPU 创建、删除进程 挂起和唤醒进程 两进程间通信、防止“死锁” 内存管理——管理内存 文件管理——管理外存 以文件的形式对外存进行管理。 I/O设备管理 保护和安全 保护：用户之间的隐私、用户的权限等 安全：外来因素，比如病毒等]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[操作系统课程笔记（1）]]></title>
    <url>%2F201903%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统课程笔记（一）2月26日一、从硬件出发操作系统作为硬件和系统/应用程序之间的桥梁，让我们无穷的应用程序能够在有限的硬件资源上运行。graph TD A(系统/应用程序)---B(操作系统) B(操作系统)---C(硬件) 硬件的分类 机械 手动比如算盘 自动比如加法器 电子 非通用ENIC 每次计算硬件结构都要改变 通用 graph LR A(表示//编码)-- 执行//编程 --&gt;B(解释//解码)``` 我们对硬件的追求从“稳定”到“加速”硬件发生变化，支撑它的体系也会发生变化，我们需要一个通用的体系结构冯诺依曼结构具有“通用性”,它把变动的东西放到了存储器里。---### 二、OS的进化历程 ##### 我们的追求：尽可能压榨CPU与更好的用户体验 graph TB A(无OS)—&gt;B(批处理)B—&gt;C(多道)C—&gt;D(分时)``` 无OS“既需要编程，又需要操作”这样子对人类的要求非常高，昂贵且效率低下。工作衔接很差。 批处理“角色”（把编程和操作分开，串行的方式是绝对不行的，串行的效率太低）和“工作衔接”得到强化。其中工作衔接分为两种情况 联机 脱机 两者的最主要区别区别在于CPU是否参与到输入和输出的工作。所谓的“脱机”即将CPU脱出“输入”和“输出”的范畴，使得CPU的使用效率再次提升。（I/O部分被分给了设备控制器） 多道单道时，一个应用程序的执行过程：CPU,I/O,CPU,I/O……多道时，一个程序在I/O的过程中可以引用其他程序占用CPU。 分时分时是在多道的基础上让CPU能够更好的响应用户。“多道”对于用户体验不友好，而“分时”让CPU在时间单位内都能轮到一次。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>硬件</tag>
        <tag>OS的发展</tag>
      </tags>
  </entry>
</search>
