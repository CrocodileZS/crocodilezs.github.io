<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mdtst]]></title>
    <url>%2Fmdtst%2F</url>
    <content type="text"><![CDATA[这是文字 上面是分割线 上面是空行 欢迎 内容 内容 内容 已完成 未完成 已完成 未完成 普通 变大 33% 两倍大 warning 选项卡 1选项卡 2选项卡 3这是选项卡 1 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……这是选项卡 2这是选项卡 3 哇，你找到我了！φ(≧ω≦*)♪～ 人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！ 首页]]></content>
  </entry>
  <entry>
    <title><![CDATA[《第一行代码》Chap1.开始启程]]></title>
    <url>%2F%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8BChap1-%E5%BC%80%E5%A7%8B%E5%90%AF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Chap1 开始启程——你的第一行Android代码1.1了解全貌——Android王国简介1.1.3 Android开发应用特色01 四大组件Android系统四大组件分别是活动（Activity）、服务（Service）、广播接收器（Broadcast Reciever）和内容提供器（Content Provider）。 活动应用程序的门面，所有能看到的东西都放在活动中。 服务一直在后台默默运行。 广播接收器允许你的应用接受来自各处的广播消息，比如电话、短信等。 内容提供器则为应用程序之间共享数据提供了可能，比如可以通过内容提供器读取系统电话簿中的联系人。 02 丰富的系统控件03 SQLite数据库04 强大的多媒体05 地理位置定位 1.3.4 分析你的第一个Android程序01 .gradle 和.idea AndroidStudio自动生成的一些文件 02 app 项目中代码、资源的存放03 build 存放编译时自动生成的文件04 .gitignore用来将制定的目录或文件排除在版本控制之外 05 build.gradle不需要修改、项目全局的gradle构建脚本 …… 除了app目录之外，大多数的文件和目录都是自动生成的，我们并不需要进行修改。 app目录下的结构 build包含编译时生成的文件 libs把第三方jar包放在libs目录下，放在这里的jar包都会被自动添加到构筑路径中去。 androidTest编写Android Test测试用例，可以对项目进行一些自动化测试 java存放所有java代码 res存放项目中使用到的所有图片、布局、字符串等资源。 图片放在drawable目录下 布局放在layout目录下 字符串放在values目录下 AndroidManifest.xml整个Android项目的配置文件，在程序中定义的四大组件都需要在这个文件里注册，可以给应用程序添加权限声明。 test编写Unit Test测试用例的，是对项目进行自动化测试的另一种方式 .gitignore将app模板内的指定的目录或文件排除在版本控制之外 AndroidManifest.xml文件 &lt;activity android:name=".HelloWorldActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; //表示HelloWorldActivity是这个项目的主活动 &lt;category android:name="android.intent.category.LAUNCHER" /&gt; //点击图标，首先启动的就是这个活动 &lt;/intent-filter&gt;&lt;/activity&gt; HelloWorldActivity.java package com.example.helloworld;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;public class HelloWorldActivity extends AppCompatActivity &#123;//继承 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.hello_world_layout); Log.d("HelloWorldAcitivity","onCreate execute"); &#125;&#125; Android程序的设计讲究逻辑和视图分离，因此是不推荐在活动中直接编写界面的，更加通用的一种做法是，在布局文件中编写界面，然后在活动中引入进来。 &lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" tools:context=".HelloWorldActivity"&gt; &lt;TextView android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="Hello World!" app:layout_constraintBottom_toBottomOf="parent" app:layout_constraintLeft_toLeftOf="parent" app:layout_constraintRight_toRightOf="parent" app:layout_constraintTop_toTopOf="parent" /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; 1.3.5详解项目中的资源 res目录下的结构drawable开头的文件就是用来存放图片的。mipmap开头的文件夹是用来存放应用图标的。values用来存放字符串、样式、颜色等配置。layout存放布局。 res/values/strings.xml &lt;resources&gt; &lt;string name="app_name"&gt;HelloWorld&lt;/string&gt;&lt;/resources&gt; 有两种方式来引用这个字符串 在代码中： R.string.app_name 在XML中：@string/app_name 1.3.6详解build.gradle文件最外层目录下的build.gradle文件部分代码 buildscript &#123; repositories &#123; google() jcenter() //jcenter代码托管仓库，可以在项目中轻松引用jcenter上的开源项目 &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:3.1.4&apos; //声明用Gradle来构建Android项目 // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;app目录内的build.gradle文件apply plugin: &apos;com.android.application&apos;//应用了一个插件，一般有两种值可以选。//com.android.application 表示应用程序模块,可以直接运行//com.android.library 表示这是一个库模块，依附于别的应用程序模块来运行android &#123; compileSdkVersion 28 //指定项目的编译版本 defaultConfig &#123;//更多细节配置 applicationId &quot;com.example.helloworld&quot;//指定项目包名 minSdkVersion 15//项目最低兼容的系统版本 targetSdkVersion 28 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; &#125; buildTypes &#123;//指定生成安装文件的相关配置 //buildTypes通常有两个子包 debug（测试版的配置）和release（正式版的配置） release &#123; minifyEnabled false //是否对项目的代码进行混淆 proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125;&#125;dependencies &#123;//指定当前项目所有的依赖关系 //本地依赖 对本地的Jar包或目录添加依赖关系 //库依赖 对项目的库模块添加依赖关系 //远程依赖 对jcenter库上的开源项目添加依赖关系 implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])//本地依赖 implementation &apos;com.android.support:appcompat-v7:28.0.0&apos;//远程依赖 implementation &apos;com.android.support.constraint:constraint-layout:1.1.3&apos; testImplementation &apos;junit:junit:4.12&apos; androidTestImplementation &apos;com.android.support.test:runner:1.0.2&apos; androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos;&#125; 1.4 前行必备——掌握日志工具的使用Log.v( ) verboseLog.d( ) debugLog.i( ) infoLog.w( ) warnLog.e( ) error Log.d(“HelloWorldAcitivity”,”onCreate execute”); “tag”:当前类名，对打印信息进行过滤“msg”:要打印的具体内容]]></content>
      <tags>
        <tag>Android开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新博客的第一篇文章]]></title>
    <url>%2Fnewpapername%2F</url>
    <content type="text"><![CDATA[欢迎]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
