<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鳄鱼的博客</title>
  
  <subtitle>一只野生鳄鱼的互联网自留地</subtitle>
  <link href="https://blog.crocodilezs.top/atom.xml" rel="self"/>
  
  <link href="https://blog.crocodilezs.top/"/>
  <updated>2023-05-12T18:54:26.131Z</updated>
  <id>https://blog.crocodilezs.top/</id>
  
  <author>
    <name>CrocodileZS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>零经验 转sde 找日常实习总结</title>
    <link href="https://blog.crocodilezs.top/202305/%E9%9B%B6%E7%BB%8F%E9%AA%8C%E8%BD%ACSDE%E6%89%BE%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86/"/>
    <id>https://blog.crocodilezs.top/202305/%E9%9B%B6%E7%BB%8F%E9%AA%8C%E8%BD%ACSDE%E6%89%BE%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86/</id>
    <published>2023-05-12T16:57:00.000Z</published>
    <updated>2023-05-12T18:54:26.131Z</updated>
    
    <content type="html"><![CDATA[<p>今年年初收到欧洲和澳洲一些学校cs的offer, 加上套词SMU的结果不太好 (老板信誓旦旦地给你画饼, 跟着做了一个月项目, 各种看论文做Pre复现代码, 等到申请的时候又说自己没法决定, 要看comittee. 没法决定你这样白嫖? <span class="tag-plugin emoji"><img no-lazy="" class="inline" src="https://gcore.jsdelivr.net/gh/cdn-x/emoji/aru-l/4220.gif" style="height:2em"/></span> 老师主页我放网页源码了, 需要避雷的盆友自己看. ) 最后决定接TU/e的cs offer转sde.</p><span id="more"></span><div style="display:none"> Liao Lizi: "https://liziliao.github.io/"</div><p>因为8月要出国了, 本想着四月入职实习/工作三个月之后回家陪陪父母, 没想到日常实习都这么难找, 找实习都被扒了一层皮.</p><p>BG: 零开发经验, Java语法还算熟悉. 有NLP算法的经验, 很久之前用Python刷过一阵子力扣.</p><p>1月2月, 出去旅游并且随缘学了学前端, 进展不是很大.</p><p>3月开学之后, 和朋友们吃饭觉得自己后端也没问题的, 于是开始刷力扣, 准备找Java岗.</p><p>力扣把<a href="http://www.cyc2018.xyz/%E7%AE%97%E6%B3%95/Leetcode%20%E9%A2%98%E8%A7%A3/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.html">CS-Note</a>的题目刷完了, 差不多有100道吧.</p><p>面经看的<a href="https://javaguide.cn/">JavaGuide</a>, 把主要知识点都过了一遍.</p><p>4月6日投出第一份简历, 5月10日收到快手offer就准备去了, 实习和正式岗都有找. 时间线如下(只记录了简历过筛的公司):</p><ul><li>4月6日, 阿里大淘宝投简历, 快手商业化投简历;</li><li>4月14日, 阿里大淘宝一面;</li><li>4月17日, 微筑科技投简历, 快手商业化一面;</li><li>4月19日, 快手商业化二面, 微筑科技一面, 阿里达摩院捞起;</li><li>4月21日, 华为OD一面;</li><li>4月24日, 快手商业化hr面, 阿里达摩院一面, 阿里FC技术部捞起;</li><li>4月25日, 华为OD二面;</li><li>4月30日, 华为OD三面;(五一假期还面试, 很敬业了)</li><li>5月9日, 快手商业化oc, 阿里钉钉捞起, 微筑科技, 阿里和华为OD的面试就主动终止了;</li></ul><p>最后决定去快手商业化, 希望实习的这段时间能有所收获, 积累更多经验.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年年初收到欧洲和澳洲一些学校cs的offer, 加上套词SMU的结果不太好 (老板信誓旦旦地给你画饼, 跟着做了一个月项目, 各种看论文做Pre复现代码, 等到申请的时候又说自己没法决定, 要看comittee. 没法决定你这样白嫖? &lt;span class=&quot;tag-plugin emoji&quot;&gt;&lt;img no-lazy=&quot;&quot; class=&quot;inline&quot; src=&quot;https://gcore.jsdelivr.net/gh/cdn-x/emoji/aru-l/4220.gif&quot; style=&quot;height:2em&quot;/&gt;&lt;/span&gt; 老师主页我放网页源码了, 需要避雷的盆友自己看. ) 最后决定接TU/e的cs offer转sde.&lt;/p&gt;</summary>
    
    
    
    <category term="后端开发" scheme="https://blog.crocodilezs.top/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://blog.crocodilezs.top/tags/Java/"/>
    
    <category term="后端开发" scheme="https://blog.crocodilezs.top/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>数据库常见面试题汇总</title>
    <link href="https://blog.crocodilezs.top/202304/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E7%BB%8F/"/>
    <id>https://blog.crocodilezs.top/202304/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E7%BB%8F/</id>
    <published>2023-05-12T16:00:00.000Z</published>
    <updated>2023-05-12T16:45:32.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库基础知识"><a href="#数据库基础知识" class="headerlink" title="数据库基础知识"></a>数据库基础知识</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ol><li>数据库范式了解吗?</li><li>主键和外键有什么区别?</li><li>为什么不推荐使用外键和级联?</li><li><code>drop</code>, <code>truncate</code> 和 <code>delete</code> 的区别?</li></ol><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ol><li>非关系型数据库是什么?</li><li>SQL和NoSQL有什么区别?</li><li>NoSQL数据库有什么优势?</li><li>常见的NoSQL有哪些?</li></ol><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ol><li>关系型数据库是什么?</li></ol><h3 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h3><ol><li>Mysql支持哪些存储引擎? 默认使用哪个?</li><li>MySQL存储引擎架构了解吗?</li></ol><h3 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h3><ol><li>索引底层的数据结构有哪些?</li><li>为什么MySQL不适用Hash表作为索引结构?</li><li>B树和B+树有什么异同? InnoDB为什么用B+树作为底层索引而不是B树?</li></ol><h3 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h3><ol><li>并发事务带来了哪些问题?</li></ol><ul><li>脏读</li><li>丢失修改</li><li>不可重复读</li><li>幻读</li></ul><ol><li>不可重复读和幻读有什么区别?</li><li>并发事务的控制方法有哪些? 锁 + MVCC</li><li>SQL标准定义了哪些事务隔离级别?</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库基础知识&quot;&gt;&lt;a href=&quot;#数据库基础知识&quot; class=&quot;headerlink&quot; title=&quot;数据库基础知识&quot;&gt;&lt;/a&gt;数据库基础知识&lt;/h2&gt;&lt;h3 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="数据库" scheme="https://blog.crocodilezs.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>阿里达摩院面经</title>
    <link href="https://blog.crocodilezs.top/202304/%E9%98%BF%E9%87%8C%E8%BE%BE%E6%91%A9%E9%99%A2%E9%9D%A2%E8%AF%950424/"/>
    <id>https://blog.crocodilezs.top/202304/%E9%98%BF%E9%87%8C%E8%BE%BE%E6%91%A9%E9%99%A2%E9%9D%A2%E8%AF%950424/</id>
    <published>2023-04-24T16:00:00.000Z</published>
    <updated>2023-05-12T16:42:30.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><ol><li>多态是什么? 优点?<br>多态是指允许不同类对同一函数调用做出反应. 即同一函数可以根据对象的不同而采用多种不同的行为方式.<br>实现多态的技术: 动态绑定, 是指在<strong>执行期间</strong>判断所引用对象的实际类型, 根据其实际的类型调用其相应的方法.<br>Java中多态的实现方式: 接口实现, 继承父类方法进行重写, 同一个类中进行方法重载.</li></ol><p>多态的好处: 代码更容易扩展和维护, 更加灵活. 比如<br><a href="https://cloud.tencent.com/developer/article/1404810">举例</a><br>因为可以通过调用接口的引用来调用各种不同的接口实现类, 扩展的时候不用修改接口, 十分灵活.</p><ol><li>Java <code>equals()</code> 和 <code>==</code> 有什么区别?<br><code>==</code>对于基本类型来说比较的是值是否相同, 对于引用类型来说是比较地址是否相同.<br>而<code>equals()</code>方法是比较地址值. 不过一般会重写<code>equals</code>让它来比较变量值.</li></ol><p>比如String的<code>equals()</code>方法, 就是比较两个字符串的值是否相等.</p><ol><li><code>hashcode</code>和<code>equals</code>有什么区别? <code>hashcode</code>是怎么实现的?<br>两者都是用来比较对象是否相等. 但是使用<code>hashcode</code>的效率会更高. 比如把对象加入hashset时, hashset会先计算对象的hashcode, 如果hashcode和现有的元素相同再用equals比较地址.<br>总结下来就是:</li></ol><ul><li>如果两个对象的 hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。</li><li>如果两个对象的 hashCode 值相等并且equals()方法也返回 true，我们才认为这两个对象相等。</li><li>如果两个对象的 hashCode 值不相等，我们就可以直接认为这两个对象不相等。</li></ul><ol><li><p>你知道的其他解决碰撞的方法吗?<br><a href="https://segmentfault.com/a/1190000041421664">参考</a><br>链地址法, 再哈希法, 公共溢出区, 开放地址法</p></li><li><p>如果链表太长该怎么办?<br>转化成红黑树或B+树.</p></li><li><p>为什么不用平衡二叉树, 而是B+树, 红黑树?<br>B+树的高度更矮, 查找路径更短且更稳定. 红黑树不同于二叉平衡树的是平衡性更弱, 对于插入和删除操作更加友好.</p></li><li><p>hashmap是否线程安全?<br>否. concurrentHashmap是线程安全的.</p></li><li><p>concurrentHashmap底层怎么实现的? 和hashmap有什么区别?</p></li></ol><ul><li>concurrentHashmap直接用Node数组+链表+红黑树来实现, 并发控制使用<code>synchronized</code>和CAS来操作.<br><a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#concurrenthashmap-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F-%E5%BA%95%E5%B1%82%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">参考</a></li><li>hashtable底层是数组+链表+红黑树, 仅使用<code>synchronized</code>来保证线程安全, 效率低下. 当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。</li></ul><p>tips: hashmap是非线程安全的, hashtable是线程安全的.</p><hr><p>补充学习:</p><ol><li>为什么hashmap会有线程安全问题?<br>jdk7之前, rehash(扩容)可能会导致环形链表; 而jdk8会导致数据覆盖.<br><a href="https://cloud.tencent.com/developer/article/1871944#">https://cloud.tencent.com/developer/article/1871944#</a></li></ol><hr><ol><li><p>HTTP和HTTPS有什么区别? 如果要实现HTTP, 服务器端需要做什么?</p></li><li><p>HTTP请求会经历哪些过程?</p></li><li><p>反问: 是否要准备项目? 是. 只有有项目才能更加深入地理解相关知识;</p></li><li><p>反问: 烂大街的项目是否会有不好的影响? 不会. 项目只是挖掘你基础知识的工具, 一个学习能力强的人在项目中学到的东西会更多. 在做项目的过程中要多问为什么.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;多态是什么? 优点?&lt;br&gt;多态是指允许不同类对同一函数调用做出反应. 即同一函数可以根据对象的不同而采用多种不同的行为方式.&lt;</summary>
      
    
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="Java" scheme="https://blog.crocodilezs.top/tags/Java/"/>
    
    <category term="算法" scheme="https://blog.crocodilezs.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快手商业化Java后端实习面经</title>
    <link href="https://blog.crocodilezs.top/202304/%E5%BF%AB%E6%89%8BJava%E9%9D%A2%E8%AF%950417/"/>
    <id>https://blog.crocodilezs.top/202304/%E5%BF%AB%E6%89%8BJava%E9%9D%A2%E8%AF%950417/</id>
    <published>2023-04-18T08:17:00.000Z</published>
    <updated>2023-05-12T16:42:54.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>Q: JVM的内存架构?</p><p>Q: IO这里了解吗?</p><p>Q: 多线程呢? 线程池怎么创建? 线程有哪些状态? 为什么选择多线程而非多进程?</p><p>Q: 设计原则有哪些?</p><p>Q: TCP和UDP的区别是什么? TCP的拥塞控制了解吗? 滑动窗口模型?<br>A: <a href="https://www.cnblogs.com/xiaolincoding/p/12732052.html">TCP流量控制和拥塞控制</a><br><a href="https://zhuanlan.zhihu.com/p/101702312">超时与重传机制</a><br>发送窗口 = Min(接收窗口, 拥塞窗口)</p><p>Q: 数据库索引有哪些? 为什么用B+树? 索引缺失了解吗?<br>A: (我把数据库索引和引擎记混了)</p><p>Q: MySQL的四种隔离级别了解吗?</p><p>Q: 解释一下可重复读?</p><p>Q: hashmap和concurrenthashmap底层分别是怎么实现的?</p><p>代码题:<br><div class="tag-plugin note" color="blue"><div class="body"><p>一个班考试成绩mysql存储，表结构如下：</p><p>create table stu_score (</p><p>   id bigint unsigned NOT NULL comment ‘学号’,</p><p>   type varchar(16) NOT NULL DEFAULT ‘’ comment ‘考试科目’,</p><p>   score double(16,2) DEFAULT ‘0’ comment ‘考试分数’</p><p>)</p><p>要求一条sql分别完成如下统计：</p><p>1.求科目为数学(type=math)最高分的对应的学号</p><p>2.科目为数学(type=math)的及格率(60分以上的人数与总人数的比例)</p></div></div></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select anum/ bnum <span class="title function_">from</span> <span class="params">(SELECT count(*)</span> as anum</span><br><span class="line">FROM stu_score</span><br><span class="line">WHERE type=math AND score &gt;= <span class="number">60</span>) a, (SELECT <span class="title function_">count</span><span class="params">(*)</span> as bnum</span><br><span class="line">FROM stu_score</span><br><span class="line">WHERE type=math) b</span><br></pre></td></tr></table></figure><p>问了关于Java的很多问题, 但是我都还没准备到…</p><p>所以这里先对照Java Guide学习一下并发编程的部分.</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>简历挖掘, 中科院那段算法经历疯狂挖掘.</p><h2 id="面试中需要补充的知识点"><a href="#面试中需要补充的知识点" class="headerlink" title="面试中需要补充的知识点"></a>面试中需要补充的知识点</h2><h3 id="Java并发常见面试题"><a href="#Java并发常见面试题" class="headerlink" title="Java并发常见面试题"></a>Java并发常见面试题</h3><ol><li>什么是线程和进程?<br>多个线程共享进程的堆和方法区资源，但每个线程有自己的程序计数器、虚拟机栈和本地方法栈.<br>一个 Java 程序的运行是 main 线程和多个其他线程同时运行.</li><li>请简要描述进程和线程的关系, 区别, 和优缺点?<br>总结： 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。</li><li>并发和并行的区别?</li><li>同步和异步的区别?</li><li>为什么要使用多线程?</li><li>使用多线程可能带来什么问题?<br><a href="https://www.51cto.com/article/715124.html">内存泄漏</a>、死锁、线程不安全.<br>内存泄漏: 垃圾回收器会回收长时间没有引用的对象，但是它不会回收那些还存在引用的对象，这就是产生内存泄漏的原因。</li><li>说说线程的生命周期和状态?</li><li>什么是线程上下文切换?</li><li>什么是线程死锁?</li><li>如何预防和避免死锁?</li><li>sleep方法和wait方法对比.</li><li>为什么wait方法不定义在Thread中?</li><li>可以直接调用Thread类的run方法吗?</li></ol><h4 id="JMM模型"><a href="#JMM模型" class="headerlink" title="JMM模型"></a>JMM模型</h4><ol><li>什么事JMM? 为什么需要JMM?</li><li>JMM如何抽象线程和主存间的关系?</li><li>happens-before的原则是什么?<br>happens-before 原则表达的意义其实并不是一个操作发生在另外一个操作的前面，虽然这从程序员的角度上来说也并无大碍。更准确地来说，它更想表达的意义是前一个操作的结果对于后一个操作是可见的，无论这两个操作是否在同一个线程里。</li><li>并发编程的三个特性是什么? 怎样理解?<br>原子性, 可见性, 有序性</li></ol><h4 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a><code>volatile</code> 关键字</h4><ol><li>如何保证变量的可见性?</li><li>如何禁止指令重排序?</li><li><code>volatile</code> 可以保证原子性吗?<br><code>volatile</code> 关键字能保证数据的可见性, 但不能保证数据的原子性. <code>synchronized</code> 关键字两者都能保证.</li></ol><h4 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h4><ol><li>什么是悲观锁?<br>共享资源每次只给一个线程使用, 其它线程阻塞, 用完后再把资源转让给其它线程.<br>像 Java 中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现.</li><li>什么是乐观锁?<br>线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了（具体方法可以使用版本号机制或 CAS 算法）<br>在 Java 中java.util.concurrent.atomic包下面的原子变量类（比如AtomicInteger、LongAdder）就是使用了乐观锁的一种实现方式 CAS 实现的。</li><li>如何实现乐观锁?<br>版本号机制和CAS算法.</li><li>乐观锁存在哪些问题?<br>ABA问题, 循环时间长开销大(自旋), 只能保证一个共享变量的原子操作.</li></ol><h4 id="Synchronized-关键字"><a href="#Synchronized-关键字" class="headerlink" title="Synchronized 关键字"></a><code>Synchronized</code> 关键字</h4><ol><li><code>synchronized</code> 是什么? 有什么用?</li><li>如何使用<code>Syncronized</code>?</li><li><code>synchronized</code> 和 <code>volatile</code> 有什么区别？</li></ol><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><ol><li>什么是IO流?<br>IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。</li></ol><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><h4 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h4><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><h4 id="随机访问流"><a href="#随机访问流" class="headerlink" title="随机访问流"></a>随机访问流</h4><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><h4 id="lt-重点-gt-JVM内存区域详解"><a href="#lt-重点-gt-JVM内存区域详解" class="headerlink" title="&lt;重点&gt;JVM内存区域详解"></a>&lt;重点&gt;JVM内存区域详解</h4><h4 id="lt-重点-gt-JVM垃圾回收详解"><a href="#lt-重点-gt-JVM垃圾回收详解" class="headerlink" title="&lt;重点&gt;JVM垃圾回收详解"></a>&lt;重点&gt;JVM垃圾回收详解</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;p&gt;Q: JVM的内存架构?&lt;/p&gt;
&lt;p&gt;Q: IO这里了解吗?&lt;/p&gt;
&lt;p&gt;Q: 多线程呢? 线程池怎么创建? 线程有哪些状态? 为什么选</summary>
      
    
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="Java" scheme="https://blog.crocodilezs.top/tags/Java/"/>
    
    <category term="算法" scheme="https://blog.crocodilezs.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>华为OD后端开发岗笔面试记录</title>
    <link href="https://blog.crocodilezs.top/202304/%E5%8D%8E%E4%B8%BAOD%E7%AC%94%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.crocodilezs.top/202304/%E5%8D%8E%E4%B8%BAOD%E7%AC%94%E8%AF%95%E8%AE%B0%E5%BD%95/</id>
    <published>2023-04-06T16:00:00.000Z</published>
    <updated>2023-05-12T16:43:28.608Z</updated>
    
    <content type="html"><![CDATA[<p>三道题, 分值分别为100, 100, 200. 做到150分以上就有面试机会, 半年内只能考一次.</p><span id="more"></span><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><h3 id="第一题-寻找子串"><a href="#第一题-寻找子串" class="headerlink" title="第一题: 寻找子串"></a>第一题: 寻找子串</h3><p>最后过了97%</p><p>字符串1和字符串2都是由数字和小写字母组成.<br>其中字符串1采用了数字和小写字母a-f作为分隔符, 可以被分割为多个子串.</p><p>要求输出字符串1的子串, 满足: 该子串中不同字符的数量不大于字符串2中不同字符的数量.<br>如果有多个子串, 按照子串的长度降序排列; 如果子串长度相同, 按照字母序降序排列.</p><p>输入为两行, 第一行为字符串1, 第二行为字符串2.</p><p>思路: 处理字符串, 自己写一个<code>Comparator</code>.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exm1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先算str2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">str2Count</span> <span class="operator">=</span> countChars(str2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分割str1</span></span><br><span class="line">        String[] strInStr1 = str1.split(<span class="string">&quot;[0-9a-f]&quot;</span>); <span class="comment">// 有空字符串</span></span><br><span class="line">        Arrays.sort(strInStr1, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> countChars(o1) != countChars(o2) ? countChars(o2) - countChars(o1) : o2.compareTo(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : strInStr1) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curCount</span> <span class="operator">=</span> countChars(s);</span><br><span class="line">            <span class="keyword">if</span> (curCount &lt;= str2Count &amp;&amp; curCount != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countChars</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] strCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            strCount[idx] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">charCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) charCount += strCount[i];</span><br><span class="line">        <span class="keyword">return</span> charCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二题-求排列组合数"><a href="#第二题-求排列组合数" class="headerlink" title="第二题: 求排列组合数"></a>第二题: 求排列组合数</h3><p>最后过了95%</p><p>系统中有两个任务, 第一个任务的执行时间为task1, 第二个任务的执行时间为task2, 总共能够执行n个任务.<br>求执行的n个任务可能花费的时间.<br>输入: task1,task2,n<br>输出: [time1, time2, …]</p><p>思路: 组合.</p><ol><li>易错点在于task1和task2执行时间相同时, 数组中不能有重复的时间.</li><li>直接打印数组: <code>Arrays.toString(arr);</code>.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exm2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String[] input = in.nextLine().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">time1</span> <span class="operator">=</span> Integer.parseInt(input[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">time2</span> <span class="operator">=</span> Integer.parseInt(input[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalNum</span> <span class="operator">=</span> Integer.parseInt(input[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[totalNum+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">minTime</span> <span class="operator">=</span> Math.min(time1, time2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxTime</span> <span class="operator">=</span> Math.max(time1, time2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">curTime</span> <span class="operator">=</span> minTime * totalNum;</span><br><span class="line">        res[<span class="number">0</span>] = curTime;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%d, &quot;</span>, res[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; totalNum+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            curTime = curTime - minTime + maxTime;</span><br><span class="line">            res[i] = curTime;</span><br><span class="line">            <span class="keyword">if</span>(i != res.length-<span class="number">1</span>) System.out.printf(<span class="string">&quot;%d, &quot;</span>, res[i]);</span><br><span class="line">            <span class="keyword">else</span> System.out.print(res[i]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //打印[3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">//        System.out.print(&quot;[&quot;);</span></span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt; res.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            if(i != res.length-1) System.out.printf(&quot;%d, &quot;, res[i]);</span></span><br><span class="line"><span class="comment">//            else System.out.print(res[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="comment">// System.out.println(Arrays.toString(res));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三题-求树的第x行第y个节点"><a href="#第三题-求树的第x行第y个节点" class="headerlink" title="第三题: 求树的第x行第y个节点"></a>第三题: 求树的第x行第y个节点</h3><p>最后过了83%.</p><p>输入:<br>第一行为节点数, 接下来的每一行第一个数字是节点的value, 后面的数是它的孩子.<br>最后一行是”坐标”.</p><p>输出:<br>{节点值}, 如果不存在节点则输出{}</p><p>样例输入:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">15 1 2 3</span><br><span class="line">6 4</span><br><span class="line">7 5</span><br><span class="line">23</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><br>样例输出:<br><code>&#123;7&#125;</code></p><p>代码:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exm3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 构建树</span></span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(in.nextLine());</span><br><span class="line">        TreeNode[] nodes = <span class="keyword">new</span> <span class="title class_">TreeNode</span>[num];</span><br><span class="line">        List&lt;Integer&gt;[] childs = <span class="keyword">new</span> <span class="title class_">List</span>[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            String[] line = in.nextLine().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">            nodes[i] = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(line[<span class="number">0</span>]));</span><br><span class="line">            childs[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; line.length; j++) childs[i].add(Integer.valueOf(line[j]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; cs = childs[i];</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">curNode</span> <span class="operator">=</span> nodes[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> idx : cs) &#123;</span><br><span class="line">                curNode.childs.add(nodes[idx]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> nodes[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建完成</span></span><br><span class="line">        <span class="comment">// 用队列进行层次遍历</span></span><br><span class="line">        String[] loc = in.nextLine().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(loc[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(loc[<span class="number">1</span>]);</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">curRow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">curLineNum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextLineNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curRow &lt; x &amp;&amp; !queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            List&lt;TreeNode&gt; curChilds = cur.childs;</span><br><span class="line">            <span class="keyword">for</span>(TreeNode child : curChilds) &#123;</span><br><span class="line">                queue.offer(child);</span><br><span class="line">                nextLineNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            curLineNum--;</span><br><span class="line">            <span class="keyword">if</span>(curLineNum == <span class="number">0</span>) &#123;</span><br><span class="line">                curLineNum = nextLineNum;</span><br><span class="line">                nextLineNum = <span class="number">0</span>;</span><br><span class="line">                curRow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(queue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//寻找y</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; y &amp;&amp; !queue.isEmpty(); j++) &#123;</span><br><span class="line">            queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(queue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> System.out.printf(<span class="string">&quot;&#123;%d&#125;\n&quot;</span>, queue.poll().value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        List&lt;TreeNode&gt; childs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> value, List&lt;TreeNode&gt; childs)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.childs = childs;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="技术一面"><a href="#技术一面" class="headerlink" title="技术一面"></a>技术一面</h2><h3 id="基础知识部分"><a href="#基础知识部分" class="headerlink" title="基础知识部分"></a>基础知识部分</h3><ol><li>问我的代码量. 我整个懵逼了, 怎么直接问这个的? 最后我说几千应该是有的.</li><li>进程和线程了解吗？进程间怎么进行通信？</li><li>线程间是如何进行同步的？(注意区分进程通信和线程同步)</li><li>怎么优化数据库的查询速度？ (没复习到这个, 详见<a href="https://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html#%E6%89%80%E6%9C%89%E8%A1%A8%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8-innodb-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E">Javaguide</a>)<br>答:<ul><li>使用InnoDB引擎;</li><li>统一使用UTF-8编码;</li><li>反范式;</li><li>控制数据表的大小, 过大的表会导致修改表的存储结构(or跨区存储);</li><li>限制索引数量(否则会导致插入和删除时效率变低)</li><li>选择索引的顺序: 区分度最高的索引在最左侧, 最频繁使用的放在最左侧, 字段长度小的放在最左侧;</li></ul></li><li>HTTP和TCP了解多少? 向我介绍一下?</li></ol><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><ol><li>删除链表后面的一个节点；</li><li>查询表A的所有项目, 并且按照B进行排列.</li><li>还有一个Linux的题目, 我给忘记了呜呜..</li></ol><h3 id="手撕代码"><a href="#手撕代码" class="headerlink" title="手撕代码"></a>手撕代码</h3><p>[输入] 第一行一个整数T(1 &lt;= T &lt;= 100), 表示有T组测试数据。对于每组测试数据：一行无序的括号，最长有3000个半括号。<br>[输出] 一个整数，即最少要添加的括号数使之成为满足题意的括号序列。<br>[样例1]</p><p>输入样例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">[[[</span><br><span class="line">[)(]</span><br><span class="line">[)</span><br></pre></td></tr></table></figure></p><p>输出样例：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><h2 id="技术二面"><a href="#技术二面" class="headerlink" title="技术二面"></a>技术二面</h2><p>手撕代码: <a href="https://leetcode.cn/problems/brick-wall/">力扣554 砖墙</a> 怎么新建一个</p><ol><li>java的进程和线程了解吗?</li><li>ArrayList怎么进行扩容?</li><li>ArrayList和LinkedList区别?</li><li>线程池了解吗?</li><li>ThreadLocal了解吗?</li><li>JVM的垃圾回收算法?</li><li>Java的锁向我介绍一下?</li></ol><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</p><ul><li>Thread.start() 和 run()的区别?<br>直接运行run方法, 会把它当成main线程下的一个普通方法运行, 并不是多线程.<br>start方法会创建新的线程, 等待分配到时间片就开始运行.</li></ul><ol><li>ThreadLocal有什么用?<br>让每个线程都绑定自己的值.</li><li>ThreadLocal原理了解吗?<br>每一个线程都有一个<code>ThreadLocalMap</code>, key是ThreadLocal, value是存储的对象.</li><li>ThreadLocal内存泄漏问题是怎么导致的?<br>key是弱引用而value是强引用. ThreadLocal在调用set, get, remove方法后会清理key为null的记录. 使用完ThreadLocal的方法后最好手动调用remove方法.<br>补充: <a href="https://www.cnblogs.com/CodeBear/p/12447554.html">Java中强引用, 弱引用, 软引用, 虚引用测试</a><br><a href="https://juejin.cn/post/6844903665241686029">理解Java中各种引用</a></li></ol><p>tips: 软连接那里, 在命令行执行<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac softref.java</span><br><span class="line">java -Xmx20m softref</span><br></pre></td></tr></table></figure></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ol><li>什么是线程池?<br>线程池就是管理一系列线程的资源池. 当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务.</li><li>为什么要使用线程池?<br>节约资源; 提高响应速度; 提高线程可管理性.</li><li>如何创建线程?<br>使用<code>ThreadPoolExecutor</code>构造函数的方式创建, 而不使用<code>Executer</code>.<br>原因: <code>FixedThreadPool</code>, <code>SingleThreadPool</code> 和 <code>ScheduledThreadPool</code> 使用无界的阻塞队列</li><li>线程池的重要参数<br><a href="https://javaguide.cn/assets/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%84%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.d65f3309.png">一图流</a><br><code>corePoolSize</code> 任务队列未达到队列容量时, 最大可以同时运行的线程数量;<br><code>maxiumumPoolSize</code> 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数;<br><code>workQueue</code> 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中.</li><li>线程池的饱和策略?<br><code>ThreadPoolExcuter.AbortPolicy</code>: 抛出<code>RejectedExcutionException</code>来拒绝新任务的处理.<br><code>ThreadPoolExcuter.CallerRunsPolicy</code>: 把任务退回给调用者, 使用调用者的线程来执行任务.<br><code>ThreadPoolExcuter.DiscardPolicy</code>: 不处理新任务, 直接丢掉.<br><code>ThreadPoolExcuter.DiscardOldestPolicy</code>: 丢弃最早的未处理请求;</li><li>线程池常用的阻塞队列有哪些?</li></ol><ul><li>无界队列<code>LinkedBlockingQueue</code>: <code>FixedThreadPool</code>,<code>SingleThreadExcuter</code></li><li>同步队列 <code>CacheThreadPool</code></li><li>延迟阻塞队列 <code>ScheduledThreadPool</code> 和 <code>SingleThreadScheduledExcutor</code></li></ul><h3 id="ArrayList扩容机制"><a href="#ArrayList扩容机制" class="headerlink" title="ArrayList扩容机制"></a>ArrayList扩容机制</h3><h3 id="JVM垃圾回收详解"><a href="#JVM垃圾回收详解" class="headerlink" title="JVM垃圾回收详解"></a>JVM垃圾回收详解</h3><h2 id="技术三面"><a href="#技术三面" class="headerlink" title="技术三面"></a>技术三面</h2><p>因为前两面定级不一致, 开始第三面.<br>第三面主要就是挖简历.<br>手撕代码: 力扣105: 从前序和中序恢复二叉树.</p><hr><p>最后定岗定到测开了, HR面完就拒了.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;三道题, 分值分别为100, 100, 200. 做到150分以上就有面试机会, 半年内只能考一次.&lt;/p&gt;</summary>
    
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="Java" scheme="https://blog.crocodilezs.top/tags/Java/"/>
    
    <category term="算法" scheme="https://blog.crocodilezs.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>阿里大淘宝技术后端实习笔面经</title>
    <link href="https://blog.crocodilezs.top/202304/%E9%98%BF%E9%87%8C%E5%A4%A7%E6%B7%98%E5%AE%9D%E5%90%8E%E7%AB%AF%E7%AC%94%E9%9D%A2%E8%AF%950412/"/>
    <id>https://blog.crocodilezs.top/202304/%E9%98%BF%E9%87%8C%E5%A4%A7%E6%B7%98%E5%AE%9D%E5%90%8E%E7%AB%AF%E7%AC%94%E9%9D%A2%E8%AF%950412/</id>
    <published>2023-04-06T16:00:00.000Z</published>
    <updated>2023-05-12T16:47:12.810Z</updated>
    
    <content type="html"><![CDATA[<p>笔试: 单选6+多选7+编程题3, 满分100, 好像做到40分就能进面试.<br>! 不能用本地IDE</p><span id="more"></span><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><p>单选和多选感觉挺难, 记录几个知识点.</p><ol><li>如何根据中序遍历 + 后序遍历 确定唯一的二叉树.</li><li>基数排序, 高位优先(MSD)和低位优先(LSD).</li><li>Linux grep指令</li><li>正则表达式 <code>\w</code> 等价于 <code>[A-Za-z0-9_]</code>; <code>\W</code>等价于<code>[^A-Za-z0-9_]</code>.</li><li>分页管理中, 内部碎片和外部碎片.</li><li>树和森林与二叉树的转换: 左孩子右兄弟法<a href="https://zhuanlan.zhihu.com/p/134251528">参考</a></li><li>循环队列的<code>front</code>和<code>rear</code>. 当<code>front == rear</code>时, 队列为空; <code>(rear + 1) % size == front</code> 时, 队列满; <code>(rear - front + size) % size</code> 为队列长度.</li></ol><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><p>第一题 定义好树是红色节点比蓝色节点多的树。输入一棵好树，想要从其中删去一边后得到的两棵树都是好树，输出有多少种删除的方法。简单的dfs ，0%</p><p>用一个数组r[n]存以各个节点为根的子树的红色节点数，一个数组b[n]存以各个节点为根的子树的蓝色节点数，第一次dfs 求出这两个数组的值，第二次dfs 时候，如果要去掉一个节点和它的子节点（设这个子节点是编号为i的节点）之间的一条边，那么得到的一棵树的蓝色节点数为b[i]，红色节点数为r[i]，另一棵树的红色节点数为r[1]-r[i]，蓝色节点为b[1]-b[i]，（1号节点是根节点），然后判断一下这种情况是否满足要求，满足就把结果加一。</p><hr><p>第二题 输入一个无符号整数数组，每次操作可以修改一个数的二进制表示的一个位，想要使得数组中每个数都相等，输出最少操作次数。只要看一下各个数位上有多少个数是0，有多少个数是1，将较小者累加到结果就行了。ac<br>这个题浪费了太久的时间.<br>Tips:<br>求二进制的时候, 每次除以2的余数是从后往前写的.<br>java直接转化的方法 <code>Integer.toBinaryString(5);</code><br>java中<code>LinkedList</code>实现了<code>Queue</code>的接口, 所以可以把它当做队列来用.</p><hr><p>第三题 输入一个整数，删除其连续的数位，使其成为15的倍数（可以有前导0），输出有多少种删除方法。0%</p><p>Tips: 难点: 15的倍数特点是个位数是5或0, 其余各个位之和为3的倍数.</p><h2 id="面试-一面"><a href="#面试-一面" class="headerlink" title="面试 - 一面"></a>面试 - 一面</h2><p>面试自我介绍的时候我说我25年才能毕业, 然后面试官说他们只招24年毕业的, 因为那边转正率蛮高的.<br>我简历上忘了改了呜呜呜… 早知道自我介绍的时候不说了.</p><p>然后场面很尴尬, 我说我想练练开发岗的面试, 面试官超级好, 就给我来了一次模拟面试.<br>他说项目经历一点也不重要, 重要的是基础知识一定一定一定要扎实. 一般基础知识能回答到85%以上就可以进二面, 80%-75%会比较犹豫. 反正在校期间做的项目都没啥卵用, 不用补项目.</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li><p>树<br>Q: 你了解的树结构有哪些?<br>A: 二叉树, 多叉树, 完全二叉树, 二叉平衡查找树, B树, B+树, 红黑树.<br>Tips: 平衡二叉树的常用实现方法有 红黑树、AVL 树、替罪羊树、加权平衡树、伸展树 等。<br>树的关键词: <u>完全, 平衡, 查找</u><br>Q: 什么是完全二叉树?<br>A: 按照层序遍历从左到右, 完全没有空隙的树就是完全二叉树. (我当时不知道该怎么形容, 然后百度了一下)对树中的结点按从上至下、从左到右的顺序进行编号，如果编和满二叉树中的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树。<br>Q: 怎么向完全二叉树中插入节点?<br>A: (没答上来, 之后查了下)<br>两种方式.<br>第一种利用队列, 把倒数第二行子节点数小于2的节点从左到右入队, 然后最后一层从左到右入队. 插入新节点的时候, 让它作为队头节点的子节点, 如果队头的子节点满了, 则出队. 把新节点入队.<br>第二种利用二进制. 先遍历一遍求节点数. 插入的节点为第n个节点, 将n转换成二进制, 去掉首位, 从第二位开始, 0往左走1往右走, 最后就能走到自己的位置.<br>Tips: 树的BFS和层序遍历是一回事.</p></li><li><p>链表<br>Q: 你了解哪些链表?<br>A: 单向链表, 双向链表, 循环链表, 双向循环链表.<br>Q: 好的. 每个链表适用于哪些场景?<br>A: (懵逼)(不会… 下来整理了一下)双向链表可以在节点前后插入, 也可以删掉前驱和后继. 而单向链表只能向后插入. 双向链表通过增加了一定的空间复杂度, 提升了向前遍历的时间复杂度. 循环链表首尾相连, 可以从任意一个节点出发, 遍历链表全部节点, 适合解决有环装特性的数据(如约瑟夫环). 双向循环链表有循环链表和双向链表的特性.<br>Q: 循环链表怎样插入?<br>A: (思考: 我真的好不熟悉, 还要现场思考.) 循环链表一般保存尾节点的指针(因为这样头插和尾插都很快). 实际在任何一个位置插入的方式都是一样的.<br>Q: 你知道跳表吗?<br>A: 不知道 (汗)</p></li></ul><p>补充学习:<br><a href="https://www.jianshu.com/p/9d8296562806">跳表</a>: 可以实现二分查找的有序链表. 跳表的查找、插入、删除的时间复杂度都是 O(logn)，而且可以按照范围区间查找元素.<br>为什么Redis使用跳表而不是红黑树来实现有序集合?<br>当需要按照区间查找元素时, 跳表的效率更高O(logn).</p><p><a href="https://www.jianshu.com/p/e136ec79235c">红黑树</a>: 红黑树（Red Black Tree） 是一种 自平衡 二叉查找树，典型的用途是实现关联数组.<br>它可以在O(log n)时间内做查找，插入和删除，这里的 n 是树中元素的数目.<br>把二叉树所有结点投射在X轴上，所有结点都是从左到右排好序的，所有目标结点的前后结点就是对应前继和后继结点.</p><p><a href="https://www.cnblogs.com/sxkgeek/p/9349931.html">BST, AVL, Red-black tree, B tree, B+ tree</a></p><p>Q: 一般内存和运行内存了解吗?<br>A: (懵逼… 好像面经里没有这个东西呀) 不了解.<br>Tips: 实际上就是ROM和RAM. RAM随机存取, 掉电后就丢失数据. RAM的运行速度远高于ROM. 之前就只知道运行内存这个东西, 学os的时候根本没把它和ram联系起来.</p><p>Q: CPU的一级缓存二级缓存可以向我介绍一下吗?<br>A: 不了解.<br>Tips: <a href="https://www.cnblogs.com/yzl050819/p/11335652.html">CPU缓存</a><br>印象里只有Cache了, 不记得它的中文是缓存. CPU缓存（Cache Memory）是位于CPU与内存之间的临时存储器，它的容量比内存小的多但是交换速度却比内存要快得多.<br>一般有一级二级三级缓存,一级缓存有一级指令缓存和一级数据缓存, 二三级缓存主要都是存储数据.</p><p><a href="https://www.jianshu.com/p/05c6c1d73144">一条指令在CPU中的执行过程</a></p><p>Q: Java中的锁了解吗?<br>A: 不…<br>Q: 这些都是要了解的呀. Java的单机锁, 分布式锁. 还有互斥锁这些…</p><p>Q: 再来问一个计网的问题, 当数据从发送端到接收端, 数据经历了哪些部件?<br>A:…</p><p>Q: 丢包之后会发生什么?</p><p>Q: 所以是没发送一个数据段, 接收端都会发送一个ACK吗?<br>A: 是吧.</p><p>Q: 再来问问数据库好了, 关于索引的底层实现你知道哪些?<br>A: B+树, 红黑树.<br>Q: 它们有哪些特征?</p><p>Q: 你这里最好还要补充一下Java中间件 / 开源框架的知识. 去看源文档或者看论坛的解析啦.</p><p>后面就是闲聊…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;笔试: 单选6+多选7+编程题3, 满分100, 好像做到40分就能进面试.&lt;br&gt;! 不能用本地IDE&lt;/p&gt;</summary>
    
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://blog.crocodilezs.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="Java" scheme="https://blog.crocodilezs.top/tags/Java/"/>
    
    <category term="算法" scheme="https://blog.crocodilezs.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java常见面试问题汇总(一)</title>
    <link href="https://blog.crocodilezs.top/202304/Java%E9%9D%A2%E7%BB%8F%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://blog.crocodilezs.top/202304/Java%E9%9D%A2%E7%BB%8F%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2023-04-05T14:40:00.000Z</published>
    <updated>2023-05-12T16:45:40.610Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h2><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><ol><li>OSI七层模型是什么? 每一层的作用是什么?</li><li>TCP/IP四层模型是什么? 每一层的作用是什么?</li><li>为什么网络要分层?</li><li>应用层常见的协议有哪些?</li><li>电子邮件的发送过程?</li><li>如何判断邮箱是真正存在的?</li></ol><hr><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><ol><li>⭐ TCP和UDP的区别?</li><li>什么时候用TCP, 什么时候用UDP?</li><li>HTTP是基于TCP还是UDP?</li><li>使用TCP的协议有哪些? 使用UDP的协议有哪些?</li><li>⭐⭐ TCP的三次握手和四次挥手(握手和挥手均可由客户端或服务端发起)<ul><li>为什么建立连接时要三次握手?</li><li>第二次握手传回了ACK, 为什么还要回传SYN?</li><li>为什么要四次挥手</li><li>为什么不能把服务器发送的ACK和FIN合并起来, 变成三次挥手?</li><li>如果第二次挥手时服务器的ACK没有送达客户端, 会怎样?</li><li>为什么第四次挥手客户端要等待2MSL(报文段最长寿命)后才进入CLOSE状态?</li></ul></li><li>⭐ TCP如何保证传输可靠性保证.(6)<ul><li>TCP 如何保证数据可靠性?</li><li>TCP 如何实现流量控制?</li><li>TCP的拥塞控制是怎么实现的?</li><li>ARQ协议了解吗?</li></ul></li></ol><hr><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ol><li>⭐⭐ 从输入URL到页面展示发生了什么?</li><li>HTTP状态码有哪些?</li><li>⭐ HTTP和HTTPS有什么区别?</li><li>HTTP 1.0 和 HTTP 1.1 有什么区别?</li><li>HTTP是不保存状态的协议, 如何保存用户状态?</li><li>URL 和 URI的区别?</li></ol><hr><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><ol><li>什么是MAC地址?</li><li>ARP协议解决了什么问题, 地位如何?</li><li>ARP协议的工作原理? (3) ARP表 / 广播问询 / 单播响应</li></ol><h3 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h3><ol><li>网络攻击常见手段?</li></ol><hr><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><h3 id="OS基础"><a href="#OS基础" class="headerlink" title="OS基础"></a>OS基础</h3><ol><li>什么是操作系统?</li><li>什么是系统调用?</li><li>进程和线程的区别? 独立性, 开销.<br>3.1 有了进程为什么还需要线程?<br>3.2 为什么要使用多线程?<br>3.3 线程间同步的方式有哪些?</li><li>PCB是什么? 包含哪些信息?</li><li>进程有哪几种状态?</li><li>进程间的通信方式?<br><del>6. 线程间同步的方式?</del></li><li>进程的调度算法有哪些? (5)</li><li>什么是僵尸进程和孤儿进程?</li><li>什么是死锁?</li><li>死锁的四个必要条件是什么?</li><li>如何解决死锁? (4)</li></ol><hr><h3 id="OS内存管理基础"><a href="#OS内存管理基础" class="headerlink" title="OS内存管理基础"></a>OS内存管理基础</h3><ol><li>操作系统内存管理主要是做什么? (6)</li><li>什么是内存碎片? (2)</li><li>内存管理有哪几种方式? (2, 连续 + 非连续(段式, 页式和段页式))</li><li>分别介绍一下分段机制和分页机制? 分页机制和分段机制有哪些共同点和区别呢?<br>13.1 什么是页缺失? (2)<br>13.2 常见的页面置换算法有哪些? (5)</li><li>介绍一下快表和多级表?</li><li>逻辑地址和物理地址的区别?</li></ol><hr><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><ol><li>什么是虚拟内存? 有什么用?</li><li>局部性原理?</li></ol><hr><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><ol><li>文件系统主要做什么? (4)</li><li>硬连接和软连接有什么区别?</li><li>硬链接为什么不能跨文件系统?</li><li>提高文件系统性能的方式有哪些? (5)</li><li>常见的磁盘调度算法有哪些? (6)</li></ol><h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="Java基础与常识"><a href="#Java基础与常识" class="headerlink" title="Java基础与常识"></a>Java基础与常识</h3><ol><li>Java语言有哪些特点?</li><li>JVM &amp; JDK &amp; JRE</li><li>什么是字节码? 采用字节码的好处是什么?</li><li>为什么不全部使用AOT?</li><li>为什么说Java语言”编译与解释共存”?</li><li>Oracle JDK vs OpenJDK</li><li>Java 和 C++的区别?</li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol><li>java的注释类型有哪些?</li><li>标识符和关键字的区别是什么?</li></ol><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ol><li>Java的几种基本数据类型了解吗? (8)</li><li>基本类型和包装类型的区别?</li><li>包装类型的缓存机制了解吗?</li><li>自动装箱与拆箱了解吗? 原理是什么?</li><li>为什么浮点数运算时会有精度丢失的危险?</li><li>如何解决浮点数精度丢失的问题? (BigDecimal)</li><li>超过long整型的数据应该如何表示? (BigInteger)</li></ol><h3 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h3><ol><li>面向对象和面向过程的区别?</li><li>创建一个对象用什么运算符? 对象实体与对象引用有何不同?</li><li>构造方法有哪些特点? 时候可以被override?</li><li>面向对象的三大特征? 封装, 继承, 多态.</li><li>接口和抽象类有什么共同点和区别?</li><li>深拷贝和浅拷贝的区别? 什么是引用拷贝?</li></ol><h3 id="Java常见类"><a href="#Java常见类" class="headerlink" title="Java常见类"></a>Java常见类</h3><ol><li>Object类的常见方法有哪些?</li><li>hashCode()有什么用?</li><li><code>String</code>, <code>StringBuffer</code>, <code>StringBuilder</code>的区别?</li><li>为什么String类型值不能被修改?</li><li>字符串常量池的作用了解吗?</li><li><code>String s1 = new String(&quot;abc&quot;);</code> 这句话创建了几个字符串对象?</li></ol><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><code>Exception</code>和<code>Error</code>有什么区别?</li><li><code>Checked Exception</code> 和 <code>Unchecked Exception</code> 有什么区别?</li><li><code>Throwable</code> 类常用方法有哪些?</li><li><code>try-catch-finally</code>如何使用?</li><li>如何使用<code>try-with-resources</code>代替<code>try-catch-finally</code>?</li></ol><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ol><li>什么是泛型? 有什么作用?</li><li>泛型的使用方式有哪几种?</li></ol><h3 id="反射"><a href="#反射" class="headerlink" title="反射(?)"></a>反射(?)</h3><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><h3 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化 / 反序列化"></a>序列化 / 反序列化</h3><ol><li>什么是序列化? 反序列化?</li></ol><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><ol><li>Java IO流了解吗?</li><li>IO流为什么要分为字节流和字符流呢?</li><li>Java IO中的设计模式有哪些?</li><li>BIO, NIO 和 AIO的区别?</li></ol><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><ol><li>什么是语法糖?</li><li>Java中有哪些常用的语法糖?</li></ol><h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><h3 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h3><ol><li>说说List, Set, Queue, Map四者的区别?</li></ol><h3 id="Collection-之-List"><a href="#Collection-之-List" class="headerlink" title="Collection 之 List"></a>Collection 之 List</h3><ol><li>ArrayList和LinkedList有什么区别?</li><li><del>说说ArrayList的扩容机制吧?</del></li></ol><h3 id="Collection-之-Set"><a href="#Collection-之-Set" class="headerlink" title="Collection 之 Set"></a>Collection 之 Set</h3><ol><li>comparable 和 Comparator 的区别?</li><li>比较HashSet, LinkedHashSet, TreeSet 三者的异同.</li></ol><h3 id="Collection-之-Queue"><a href="#Collection-之-Queue" class="headerlink" title="Collection 之 Queue"></a>Collection 之 Queue</h3><ol><li>Queue和Deque的区别.</li><li>ArrayDeque和LinkedList的区别.</li><li>介绍一下 PriorityQueue.</li></ol><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><ol><li>HashMap和Hashtable的区别.</li><li>HashMap和HashSet的区别.</li><li>HashMap和TreeMap的区别.</li><li>HashSet如何检查重复?</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;计网&quot;&gt;&lt;a href=&quot;#计网&quot; class=&quot;headerlink&quot; title=&quot;计网&quot;&gt;&lt;/a&gt;计网&lt;/h2&gt;&lt;h3 id=&quot;计算机网络基础&quot;&gt;&lt;a href=&quot;#计算机网络基础&quot; class=&quot;header</summary>
      
    
    
    
    <category term="后端开发" scheme="https://blog.crocodilezs.top/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://blog.crocodilezs.top/tags/Java/"/>
    
    <category term="计算机网络" scheme="https://blog.crocodilezs.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="操作系统" scheme="https://blog.crocodilezs.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>2023冬春季留学申请总结</title>
    <link href="https://blog.crocodilezs.top/202301/%E7%94%B3%E8%AF%B7Log/"/>
    <id>https://blog.crocodilezs.top/202301/%E7%94%B3%E8%AF%B7Log/</id>
    <published>2023-01-20T15:07:35.000Z</published>
    <updated>2023-01-20T15:08:16.685Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><ul><li>2022-09-27 Adelaide 申请系统显示 Referred to Professor;</li><li>2022-10-13 McMaster 教授反套, 约面试并且要写一个简短的Survey;</li><li>2022-10-18 发邮件问了下SUTD的流程, 那边说结果在11月中旬之前会出来;</li><li>2022-10-21 McMaster 面试. 主要的问题: 最近的research做一个简短的Pre / 正负样本不平衡怎么处理 / 关于肺部疾病imaging, 设计NN / 如何解决有时间序列的深度学习问题 / Bert细节考察 (早知道面试之前应该再看下Bert的论文, 当时已经忘得差不多了) / 介绍了实验室近况 / 问了下签证的情况; 本来前面聊得很好的, 我说北邮研究型硕士签证可能会有问题之后, 教授瞬间失去了兴趣的样子… (我甚至感觉加拿大本地人不理解签证这个东西) 不过自己口语水平真的提升了不少, 交流过程都还蛮流利.</li><li>2022-10-21 Adelaide 状态显示 Outcome Pending;</li><li>2022-11-05 Adelaide DSO找了Prof, 说因为北邮的敏感原因, 不能给我admission. 我还是有点心理准备的. x北邮, 一点好处没捞到, 在读期间天天折磨人, 毕业了还拖后腿. (讲真有点后悔的, 当初去川大学计算机不香吗)<br>刘教授推荐了的三位教授, 后续的联系过程会单独写一篇秋季申请总结.</li><li>2022-11-07 给 SUTD 的 admission team 发了邮件, 但是两天了也没有收到任何回复;</li><li>2022-11-11 Waterloo ECE 拒. </li><li>2022-11-15 SUTD 收到拒信, 原因是没有自己的pub;</li><li>2022-11-17 Waterloo syde 拒. 说实话真的有点沮丧和意外, 寄托那里看到了waterloo的ece和syde很多offer的bg都比我差一些.</li><li>2022-11-24 Waterloo cs phd admission 发邮件说由于他们工作失误, 我的申请被当成缺少文件的废处理了. 让我决定是继续申请春季还是转移申请到秋季. 我转移申请到了秋季, 不过估计照样也就是rej的结果;</li><li>2022-11-25 收到 McMaster ECE 的拒信; 至此, 2023 spring / Winter 的申请全拒, 后续准备港新的 PhD 和欧洲的 Master 了.</li><li>2023-01-20 目前收到SMU的PhD口头offer, 荷兰Leiden, Twente, 阿自由的硕士offer; 澳洲悉大和卧龙岗大学的硕士offer. </li></ul><h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>从今年4月底收到坡MOM拒签的消息, 到9月份刚填完申请系统, 感觉自己这段时间经历了好多, 也真的体会到留学申请的困难. 因为直到考完雅思之前我都准备申请9月入学的项目, 但是8月底突然知道有一堆春/冬季项目也可以申请, 所以真正的准备时间是从8月31日开始, 到9月23日填完系统. 用这一篇Post来记录自己申请的过程.</p><p><strong>Target</strong>:<br>加澳新 CS PhD 混申; ECE 和 SDE 等相关专业 Master 也尝试一下.</p><p><strong>BG</strong>:<br>北邮本, 数据科学与大数据技术, 均分87/100;<br>三年三等奖学金, 两个美赛M奖, 一个数学竞赛三等奖;<br>雅思 6.5 小分 6.5, 无 GRE (其实考过一次但是分数太烂了用不了);</p><p>论文有两篇挂名: 一篇NLP顶会 (CCF-B), 一篇水刊;<br>有四段实习(每段大概3个月): 学而思-小猴启蒙教育-用户增长运营, 小米-互联网业务部-商业平台产品经理, 国网区块链-科研实习, 中科院自动化所-自然语言处理研究小组-科研实习.</p><h2 id="选校定位"><a href="#选校定位" class="headerlink" title="选校定位"></a>选校定位</h2><p>因为家里不提供任何资金支持 (23年秋季申请爸妈改变主意了, 所以考虑了很多欧洲的自费硕士项目), 所以只能去能申全奖的项目, 于是优先考虑 PhD. 欧陆的 PhD (除了英国) 待遇普遍都很好, 但是看了大部分项目都需要Master学历或者非常强的本科生, 所以直接放弃. 英国的 PhD 自费的可能多一些, 所以也没有考虑. 剩下的地区就选择了加澳新, 其中加拿大还申请了比较多的 MSc 或者 MASc 项目, 研究型硕士靠奖, RA&amp;TA 工资和老师的补贴也能养活自己. 因为自己已经gap一年了, 不是很想再等了, 所以打算申请23年1月或者5月入学的项目.</p><p>因为是主申PhD, 学校的因素可能就没有那么重要了, 我就按照 CSRanking 去找NLP方向比较强的导师去套词.</p><p>Tips: 北半球大部分学校冬季项目在前一年的7月份就截止了.</p><details class="tag-plugin folding" ><summary><span>加拿大选校</span></summary><div class="body"><div class="table-container"><table><thead><tr><th>学校</th><th>assessment (2023年)</th></tr></thead><tbody><tr><td>UoT</td><td>❌ cs无春季项目, 且我的英语成绩不够</td></tr><tr><td>McGill</td><td>❌ 强 committee, 语言成绩不够没法 argue</td></tr><tr><td>SFU</td><td>➖ 语言成绩不够 (应该套一下词的)</td></tr><tr><td>Alberta</td><td>❌ cs 方向没有春季入学项目</td></tr><tr><td>York</td><td>❌ cs 没有冬/春季项目</td></tr><tr><td>UBC</td><td>❌ cs 没有冬/春季项目</td></tr><tr><td>Calgary</td><td>❌ cs 没有冬/春季项目</td></tr><tr><td>Queen’s</td><td>❌ cs 没有冬/春季项目</td></tr><tr><td>Waterloo</td><td>✅ cs, ece, syde 都有项目</td></tr><tr><td>Victoria</td><td>✅ cs, ece 有项目</td></tr><tr><td>Carleton</td><td>✅ ece, hci 有项目</td></tr><tr><td>Ottawa</td><td>✅ 同Carleton</td></tr><tr><td>McMater</td><td>✅ ece有项目</td></tr></tbody></table></div></div></details><details class="tag-plugin folding" ><summary><span>新加坡选校</span></summary><div class="body"><div class="table-container"><table><thead><tr><th>学校</th><th>assessment (2023年)</th></tr></thead><tbody><tr><td>NUS</td><td>❌ 强comittee且要GRE</td></tr><tr><td>SMU</td><td>➖ 要GRE (不知道是不是强committee, 或许可以试着套一下)</td></tr><tr><td>NTU</td><td>✅ 要GRE, 但强committee, 语言可以waive</td></tr><tr><td>SUTD</td><td>✅ cs和ece都有项目</td></tr></tbody></table></div></div></details><details class="tag-plugin folding" ><summary><span>澳洲选校</span></summary><div class="body"><div class="table-container"><table><thead><tr><th>学校</th><th>assessment (2023年)</th></tr></thead><tbody><tr><td>新西兰的学校</td><td>❌ 硕士学历要求</td></tr><tr><td>澳洲八大</td><td>✅ 因为和北半球相反, 2月入学是澳洲的主学期, 所以机会会更多一些</td></tr></tbody></table></div></div></details><h2 id="套词和面试"><a href="#套词和面试" class="headerlink" title="套词和面试"></a>套词和面试</h2><p>套词的时候需要准备自己的 CV 和 成绩单. 之前找ra工作的时候都准备过这些. ps. 北邮的成绩单是真tmd贵 <span class="tag-plugin emoji"><img no-lazy="" class="inline" src="https://gcore.jsdelivr.net/gh/cdn-x/emoji/aru-l/0390.gif" style="height:3em"/></span>, 早知道基本用不上纸质成绩单就不开了, 直接电子成绩单就够够的了.</p><p>套词信的模板参照了寄托的一篇文章 <a href="https://bbs.gter.net/thread-1699797-1-1.html">Link</a>, 我觉得最主要的就是去看老师的研究方向和 Funding, 读组里的论文然后去联系老师, 套词信不用太长. 我从8月底开始选择感兴趣的老师发邮件套词, 一共发出了13封套词信, 收到7个回复. 其中1封养鱼信, 3个比较正面的回复 (约面试or要RP), 3个拒. </p><ul><li>Waterloo CS 养鱼回复</li><li>SUTD CS 约面试</li><li>Adelaide CS 约面试</li><li>Macquarie CS 要RP</li><li>Auckland CS 学历拒, 新西兰的PhD需要Master学位</li><li>Massey CS 同上</li><li>NTU CS 没hc</li></ul><p>本来应该多套一些的, 但是9月份自己的精神状态不是特别好<span class="tag-plugin emoji"><img no-lazy="" class="inline" src="https://gcore.jsdelivr.net/gh/cdn-x/emoji/aru-l/8110.gif" style="height:3em"/></span>, 压力非常大, 而且大多数项目的申请ddl是9月底, 我还要预留时间写RP, 各种statement和填申请系统. 当时觉得自己的bg去申请直博竞争力没有很大, 直到今天写总结的时候才发现自己套词回复率这么高.</p><p>说下Adelaide的面试, 先做了一个15min的pre, 讲了最近的工作. 然后和老师讨论了下我的研究方向, 又问了几个问题. 一个是神经网络在某个节点进行泰勒展开(我: ?) 当时学机器学习课程的时候我都没有学过这一段, 然后直接蒙蔽. 后面的问题是法律领域的自然语言处理问题, 文本应该怎么处理, 如何解决few-shot的问题. 因为之前的demo做了医学领域的nlp, 就把相关论文的methods尝试用到法律领域去回答了; few-shot 问题我想到的是生成对抗网络加 pseudo labels.</p><p>最后套词的结果有两个口头offer: Adelaide的老师给了自己项目的funding, SUTD的老师让我拿学校的奖. 因为这个时候感觉时间已经很紧张了, 所以先准备填系统等有没有反套.</p><h2 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h2><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><p><strong>Research Proposal</strong>: 我写了之后改的不多, 拿给阿大的老师看了下没问题就过了</p><p><strong>Statement of Purpose</strong>: SUTD要求一个3000words的SOP, 我真的<span class="tag-plugin emoji"><img no-lazy="" class="inline" src="https://gcore.jsdelivr.net/gh/cdn-x/emoji/aru-l/6510.gif" style="height:3em"/></span> 我自己写了大概2300字左右, 拿到fiverr上找了一个老哥改. 这个<a href="https://www.fiverr.com/musihality?source=order_page_user_stamp_link">老哥</a>的团队在一亩三分地上也有帖子, 主要的优势就是比较快, 适合我这种着急要sop的选手. 后续其他学校的SOP也是在他返稿的基础上改的.</p><p><strong>Passport</strong>: 不知道为啥卡的这么严, 尽量找小地方申请.</p><p><strong>Reference Letter</strong>: 中科院两位老师的牛推, 还有本科给我上数据挖掘课的于老师. 感谢各位老师!</p><h3 id="申请系统"><a href="#申请系统" class="headerlink" title="申请系统"></a>申请系统</h3><p>项目数量: 6</p><ul><li>2022-9-15 Adelaide cs phd申请系统提交;</li><li>2022-9-20 SUTD cs phd申请系统提交;</li><li>2022-9-20 Waterloo cs phd, ece msc, syde msc提交申请;</li><li>2022-9-22 Waterloo 发学生ID, 可以上传文件了;</li><li>2022-9-22 McMaster ece masc申请系统提交;</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;Update&quot;&gt;&lt;a href=&quot;#Update&quot; class=&quot;headerlink&quot; title=&quot;Update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2022-09-27 Adelaide 申请系统</summary>
      
    
    
    
    <category term="留学" scheme="https://blog.crocodilezs.top/categories/%E7%95%99%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>2022年的书籍/影视/游戏/音乐总结</title>
    <link href="https://blog.crocodilezs.top/202212/2022%E5%B9%B4%E4%B9%A6%E5%BD%B1%E6%B8%B8%E9%9F%B3%E9%80%9F%E8%AF%84/"/>
    <id>https://blog.crocodilezs.top/202212/2022%E5%B9%B4%E4%B9%A6%E5%BD%B1%E6%B8%B8%E9%9F%B3%E9%80%9F%E8%AF%84/</id>
    <published>2022-12-28T06:23:09.000Z</published>
    <updated>2022-12-28T13:16:10.289Z</updated>
    
    <content type="html"><![CDATA[<p>书籍 11本, 电影/电视剧 26部.<br><span id="more"></span></p><div class="tag-plugin grid" bg="block"><div class="cell" index="0"><center>    <b>电影/电视剧</b>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>想见你 ⭐⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>进击的巨人S1-2 ⭐⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>甄嬛传 ⭐⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>寻梦环游记 ⭐⭐⭐⭐⭐-</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>逍遥法外 ⭐⭐⭐⭐+</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>开端 ⭐⭐⭐⭐+</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>怪奇物语S1-4 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>死亡笔记 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>鱿鱼游戏 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>我们与恶的距离 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>僵尸校园 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>心灵奇旅 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>爱在黎明破晓前 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>顶楼S1-2 ⭐⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>回来的女儿 ⭐⭐⭐⭐-</span></div>    <div class="tag-plugin checkbox" color="red" symbol="times"><input type="checkbox" checked="true"/><span>命运航班 ⭐⭐⭐+</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>信条 ⭐⭐⭐+</span></div>    <div class="tag-plugin checkbox" color="red" symbol="times"><input type="checkbox" checked="true"/><span>还有明天 ⭐⭐⭐</span></div>    <div class="tag-plugin checkbox" color="red" symbol="times"><input type="checkbox" checked="true"/><span>甜蜜家园 ⭐⭐+</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>想见你影版 ⭐⭐+</span></div>    <div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>尸战朝鲜 ⭐⭐</span></div></center></div><div class="cell" index="1"><center><b>书籍</b><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>哈利波特1-5 ⭐⭐⭐⭐⭐</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>蛤蟆先生去看心理医生 ⭐⭐⭐⭐+</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>拖延心理学 ⭐⭐⭐⭐</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>被讨厌的勇气 ⭐⭐⭐⭐</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>坏小孩 ⭐⭐⭐+</span></div><div class="tag-plugin checkbox" color="red" symbol="times"><input type="checkbox" checked="true"/><span>计算广告 ⭐⭐⭐+</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>阿德勒心理学 ⭐⭐⭐</span></div></center><br><center><b>游戏</b><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>明日方舟 ⭐⭐⭐⭐+</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>塞尔达传说 ⭐⭐⭐⭐+</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>凯娜精神之桥 ⭐⭐⭐⭐-</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>原神 ⭐⭐⭐⭐-</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>宝可梦传说 阿尔宙斯 ⭐⭐⭐</span></div><div class="tag-plugin checkbox" color="red" symbol="times"><input type="checkbox" checked="true"/><span>第五人格 ⭐⭐</span></div></center><br><center><b>音乐播放次数榜单</b><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>Free Loop - Daniel Powter</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>Stay this way - fromis_9</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>LOVE DIVE - IVE</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>Shoot! - POP!CORN</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>TOMEBOY - (G)I-DLE</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>Running Up That Hill - Kate Bush</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>Hype Boy - NewJeans</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>Honey - 王心凌</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>LE VOYA9E - Kep1er</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>DM - fromis_9</span></div></center></div></div><h2 id="短评"><a href="#短评" class="headerlink" title="短评"></a>短评</h2><div class="tag-plugin tabs" align="center"id="tab_1"><div class="nav-tabs"><div class="tab active"><a href="#tab_1-1">书</a></div><div class="tab"><a href="#tab_1-2">影</a></div><div class="tab"><a href="#tab_1-3">游</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_1-1"><details class="tag-plugin folding"  open><summary><span>哈利波特 1-5</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐⭐<br>Review: 今年跟着喜马拉雅听书又重新听了一遍, 前四部依然非常上头. 感觉电影的情节真的安排得太赶了, 读原著会更爽一些.</p></div></details><details class="tag-plugin folding"  open><summary><span>阿德勒心理学</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐<br>Review: 在 PageOne 读的纸质书, 插画形式讲解阿德勒心理学. 已经读过「被讨厌的勇气」, 觉得这本书就像一本知识点总结.</p></div></details><details class="tag-plugin folding"  open><summary><span>被讨厌的勇气</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐<br>Review: 用Kindle读的, 阿德勒心理学有可取之处, 这本书讲的也非常好. 其中最重要的「课题划分」概念对于当时的我来说意义非凡. 之后可能会重读一遍, 因为第一次读还有很多东西没有完全理解.</p></div></details><details class="tag-plugin folding"  open><summary><span>蛤蟆先生去看心理医生</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐+<br>Review: 用Kindle读的, 虽然这本书的知识性不如上面一本, 但是这本书知识讲解得鞭辟入里, 代入感非常强 (又有柳林风声的背景). 其中「儿童, 成人, 家长」状态的概念对我的影响很大.</p></div></details><details class="tag-plugin folding"  open><summary><span>坏小孩</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐+<br>Review: 在喜马拉雅听的有声书. 不知道是不是因为我读书习惯越来越差了, 我觉得文字内容并没有那么有趣, 甚至有些无聊(相比改编的电视剧). 不过这本书写的孩子并不是传统意义的天真善良的刻板印象, 很有新意.</p></div></details><details class="tag-plugin folding"  open><summary><span>拖延心理学</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="green">Ongoing</a><br>Stars: ⭐⭐⭐⭐<br>Review: 在 PageOne 看了一会儿纸质书, 之后购入准备慢慢看. 书的内容对我非常有启发性, 特别是对于不在上班/上学的, 有大量空闲时间的我来说, 详尽地解释了拖延的原因和自我管理的方法, 我觉得这本书真的是大部分人的必读书.</p></div></details><details class="tag-plugin folding"  open><summary><span>计算广告</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="red">Abandoned</a><br>Stars: ⭐⭐⭐+<br>Review: 可以速度一遍过一下基础概念. 这本书有点过时了, 不如去找网上的一些文档.</p></div></details></div><div class="tab-pane" id="tab_1-2"><details class="tag-plugin folding"  open><summary><span>开端</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐+<br>Review: 无限流的影视佳作. 说实话我感觉白敬亭演的不好, 但是也没有太影响观感吧. (演员不要上综艺, 不然大家容易带入不进去.)</p></div></details><details class="tag-plugin folding"  open><summary><span>想见你</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐⭐<br>Review: 值得五星的电视剧. 第三次刷了, 这一次是陪对象看的, 对象看的超级上头hhh.</p></div></details><details class="tag-plugin folding"  open><summary><span>想见你影版</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐+<br>Review: 逻辑线很好, 剪辑稀烂. 我觉得主要是剧版太牛了吧, 影版想超越真的太难了.</p></div></details><details class="tag-plugin folding"  open><summary><span>进击的巨人S1-2</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐⭐<br>Review: 和对象一起看的第三遍, 刚看完第二季, 说实话我真不觉得结局有那么烂(我感觉就是oc而已…)</p></div></details><details class="tag-plugin folding"  open><summary><span>怪奇物语S1-4</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐<br>Review: 设定很赞, 每季主线流畅, 最后大家聚集在一起很热血. 最新一部 Run! Max 太牛了.</p></div></details><details class="tag-plugin folding"  open><summary><span>还有明天</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="red">Abandoned</a><br>Stars: ⭐⭐⭐<br>Review: 开头还挺好看的,越往后就感觉情节越老套. 编剧没有好好打磨人物.</p></div></details><details class="tag-plugin folding"  open><summary><span>甄嬛传</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐⭐<br>Review: 卓越的国产剧, 没有无意义的镜头.</p></div></details><details class="tag-plugin folding"  open><summary><span>死亡笔记</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐<br>Review: 年初时候看的, 当时还担心这个动漫太压抑了. 开头太惊艳了, L 死后的故事有点赶. 是一部不能否认的好作品. Misamisa的恋爱脑还是让人有点不喜欢, 但是看到结局也接受了.</p></div></details><details class="tag-plugin folding"  open><summary><span>僵尸校园</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐<br>Review: 和对象一起看的, 我觉得是合格的丧尸剧, 虽然爱情线有点莫名其妙了. 超级喜欢这种封闭空间逃难/逃杀的片.</p></div></details><details class="tag-plugin folding"  open><summary><span>尸战朝鲜</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐<br>Review: 讲真有点无聊的. 主要是韩国的那个皇帝也太寒酸了.</p></div></details><details class="tag-plugin folding"  open><summary><span>甜蜜家园</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="red">Abandoned</a><br>Stars: ⭐⭐+<br>Review: 看剧评感觉这部剧还是不错的, 但是我第一季快看完了, 仍然感觉没有进入主线, 剧情太拖沓了. 难以接受.</p></div></details><details class="tag-plugin folding"  open><summary><span>心灵奇旅</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐<br>Review: 虽然讲述的道理没有那么深刻, 但是其他的一切真的很完美了. 生活本身就是生活的意义.</p></div></details><details class="tag-plugin folding"  open><summary><span>寻梦环游记</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐⭐-<br>Review: 一部讨论了生与死的电影, 对我来说是很少接触的题材. 很喜欢.</p></div></details><details class="tag-plugin folding"  open><summary><span>命运航班</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="red">Abandoned</a><br>Stars: ⭐⭐⭐+<br>Review: 设定太棒了, 但是剧情也太太太太拖沓了.</p></div></details><details class="tag-plugin folding"  open><summary><span>顶楼S1-2</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐-<br>Review: 爽剧, 真的是够爽了.</p></div></details><details class="tag-plugin folding"  open><summary><span>逍遥法外</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐+<br>Review: 年初又重刷了一遍. 对我来说是一部好剧, 也是我的美剧启蒙.很难得的是没有烂尾.</p></div></details><details class="tag-plugin folding"  open><summary><span>爱在黎明破晓前</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐<br>Review: 年初和对象一起看的. 是我年轻三岁会喜欢的电影.</p></div></details><details class="tag-plugin folding"  open><summary><span>信条</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐+<br>Review: 我总感觉这个剧在故弄玄虚, 好像要讲一个很高深的设定但是又不想让观众搞明白的感觉. 仍记得当时我在电影院睡着的场景. 我在电影院一共就睡着两次, 一次是这一部另一次是柯南绀青之拳.</p></div></details><details class="tag-plugin folding"  open><summary><span>披荆斩棘的哥哥</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐+<br>Review: 综艺如果往艺术品的方向做就违背初衷了. 我觉得综艺最重要的是接地气, 能引发观众共鸣.</p></div></details><details class="tag-plugin folding"  open><summary><span>我们与恶的距离</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="green">Ongoing</a><br>Stars: ⭐⭐⭐⭐<br>Review: 设定就很棒了, 导演也很用心. 但是看剧时候的我太浮躁了, 总觉得看不下去.</p></div></details><details class="tag-plugin folding"  open><summary><span>鱿鱼游戏</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐<br>Review: 套用爽剧模板但是很有趣.</p></div></details><details class="tag-plugin folding"  open><summary><span>回来的女儿</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="green">Ongoing</a><br>Stars: ⭐⭐⭐⭐-<br>Review: 我个人看悬疑剧更看重悬疑而不是逻辑, 这部剧还是挺好的踩到我的爽点上了. 无论是开头的孙悟空还是文文和妈妈睡觉的场景, 都让我感觉有爽到.</p></div></details></div><div class="tab-pane" id="tab_1-3"><details class="tag-plugin folding"  open><summary><span>凯娜精神之桥</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="blue">Finished</a><br>Stars: ⭐⭐⭐⭐-<br>Review: 场景很赞, 但是感觉通关一遍就不想玩了. 我之后渐渐发觉自己还是喜欢社区属性强的游戏.</p></div></details><details class="tag-plugin folding"  open><summary><span>塞尔达传说</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="green">Ongoing</a><br>Stars: ⭐⭐⭐⭐+<br>Review: 把地图开完了, 水神兽打完. 最喜欢的设定是关于武器使用的设定.(投掷武器是真的爽) 神庙设计的也非常棒, 很喜欢.</p></div></details><details class="tag-plugin folding"  open><summary><span>宝可梦传说 阿尔宙斯</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="green">Ongoing</a><br>Stars: ⭐⭐⭐<br>Review: 说实话有点无聊. 一上来就给个图鉴然你去肝是怎样.</p></div></details><details class="tag-plugin folding"  open><summary><span>第五人格</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="red">Abandoned</a><br>Stars: ⭐⭐<br>Review: 结合 LOL 最近说国服气氛不好, 我觉得PVP游戏国内的氛围真的 太差了, 也是因为大家的竞争观念, 想要赢的想法太强了吧. 没法好好享受游戏.</p></div></details><details class="tag-plugin folding"  open><summary><span>原神</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="green">Ongoing</a><br>Stars: ⭐⭐⭐⭐-<br>Review: 我一直觉得原神是一款很好的游戏. 但是对于老玩家来说, 玩法太单一了, 新出的卡牌也没什么意思. 今年从56级升到57级就也不想继续玩了. 如果原神再没有啥好玩的常驻新模式, 会渐渐没落的吧.</p></div></details><details class="tag-plugin folding"  open><summary><span>明日方舟</span></summary><div class="body"><p>Status: <a class="tag-plugin tag" color="green">Ongoing</a><br>Stars: ⭐⭐⭐⭐+<br>Review: 下半年刚入坑. 塔防中的神中神. 这一年策划没有作妖, 社区氛围也非常好. 二创也都太有意思了. 肉鸽设计的真的很棒.</p></div></details></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;书籍 11本, 电影/电视剧 26部.&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2022年个人OKR核验</title>
    <link href="https://blog.crocodilezs.top/202212/2022%E5%B9%B4%E4%B8%AA%E4%BA%BAOKR%E6%A0%B8%E9%AA%8C/"/>
    <id>https://blog.crocodilezs.top/202212/2022%E5%B9%B4%E4%B8%AA%E4%BA%BAOKR%E6%A0%B8%E9%AA%8C/</id>
    <published>2022-12-25T16:03:27.000Z</published>
    <updated>2022-12-28T06:02:21.017Z</updated>
    
    <content type="html"><![CDATA[<p>写于 2022.12.25.</p><p>现在的我正在中关村东路租的小房间里写下2022年的回顾与展望. 这个小房间刚搬进来的时候我还万分不满, 但现在住久了也渐渐习惯了, 书桌旁边就有一扇大窗户, 能够享受白天的阳光, 真的是一件很美好的事情. </p><p>我好像已经很久很久没有写过类似总结归纳的东西了, 很久没有在关心自己的状态. 过去一段时间的日程管理也仅仅是记录学习/工作上的事情. 好像我不敢写总结, 是因为害怕面对自己. </p><p>我突然想到, &lt;想见你&gt;里面黄雨萱跟陈思源讲的道理, “大人之所以是大人, 是因为他们知道什么事情比较重要.” 为了那件重要的事情, 就可以忽略其他不重要的事情. 在乎方方面面(维护一个完美的人设)是很累的, 找准最主要的事情然后针对它去努力就可以了, 其他的都可以不用在乎.</p><h2 id="年度OKR核验12-26-2022-4-30-修订版本"><a href="#年度OKR核验12-26-2022-4-30-修订版本" class="headerlink" title="年度OKR核验12.26 (2022.4.30 修订版本)"></a>年度OKR核验12.26 (2022.4.30 修订版本)</h2><div class="tag-plugin note" color="blue"><div class="body"><p><b>O: 【事业发展】<s>对广告行业和NLP领域有深入的了解，能够独立负责项目。申请NUS或NTU博士并拿到offer.</s> 申请PhD或Master项目并拿到Offer.<br>Rv: 【90%】 了解计算广告行业的大框架, 在NLP领域有了很大的进步, 申请过程虽不是一帆风顺但自己也努力取得了成果. </b><br><s>KR1: 了解广告行业知识和现状（看完《计算广告》和相关网文），对小米广告（浏览器和内容中心）内部框架有一个清晰的认知（看完小米商业平台部的文档）；每月复盘自己的工作内容，对工作负责。</s></p><p>KR1: 了解NLP学术知识和企业应用现状，积累能写入简历的科研经历(以cv为导向), 发表论文一篇.<br>Rv1: 【85%】 基本达成, EMNLP2022 Demo track非一作一篇. 没有一作的文章有点遗憾.</p><p>KR2: 语言ielts &gt;= 6.5; GRE &gt;= 320 + 3.5 （英语成绩够用就好，有这个时间不如花在科研上）<br>Rv2: 【100%】 ielts分数超出预期, GRE暂时不需要就没有考了.</p><p>KR: 完成推荐信等, 联系导师套词, 争取拿到博士机会. 期间了解新加坡读博的各种政策, 整理.<br>Rv3: 【100%】 Good Job.</p></div></div><div class="tag-plugin note" color="green"><div class="body"><p><b>O: 【内心成长】追求心理健康和稳定，用理论框架梳理解释情绪和行为.<br>Rv: 【99%】对自己过去一年内心的成长感到十分的钦佩. 勇敢面对自己和自己的选择, 没有丧失同理心.</b></p><p>KR1: 定期看心理医生、按时吃药，争取减药or停药。<br>Rv1: 【90%】 Good Job.</p><p>KR2: 定期整理自己的情绪和领悟到的东西, 情绪以事业服务, 勇敢一些, 无需获得他人的认可. <s>看心理学方面的书籍并思考，记录关键笔记。如《被讨厌的勇气》、《蛤蟆先生去看心理医生》、《津巴多普通心理学》、《乌合之众》、《自卑与超越》、《社会性动物》。能够对生活中常见的问题或困扰自己的问题做出心理学角度的解释。</s><br>Rv2: 【70%】 用理论框架梳理生活情绪, 能够站在比较高的位置观察自己的心态.</p></div></div><div class="tag-plugin note" color="yellow"><div class="body"><p><b>O: 【身体健康】保持运动习惯，注重形象管理，身材变好，体脂降低。<br>Rv: 【60%】勉强及格. 下半年做的不是太好, 虽然有客观原因, 但是仍然没有坚持健康管理.</b></p><p>KR1: 个人护理。坚持好好洗脸和护肤，定期面膜护理，减糖。<br>Rv1: 【75%】前三个季度都做的不错, 最后一个季度甜食吃的太多。</p><p>KR2: 健康饮食。限制零食的购买和食用。不加餐，加餐只吃健康食品。<br>Rv2: 【60%】前半年做的很好, 后半年由于身体原因和疫情原因属实是放纵了.</p><p>KR: 运动。每周至少运动2三次，没有时间的话就只做有氧(游泳)。每周至少一次力量训练。<br>Rv3: 【50%】学会了蛙泳. 5月之前做的很好, 后半年有少量有氧, 完全舍弃了力量运动. 疫情和身体原因都是借口.</p></div></div><div class="tag-plugin note" color="orange"><div class="body"><p><b>O: 【技艺才情】寻求多变<br>Rv: 【75%】做的好. 能够达到75%真的超过我的预期了. 没想到自己这么棒.</b></p><p>KR1: 视频制作/vlog。提高作品质量，不盲目追求投稿打卡。一年发布一条十分优质的视频内容。不以核心数据作为视频质量的评价指标.<br>Rv1: 【75%】视频拍摄技巧/录音技巧/视频剪辑软件的使用(pr, 剪映, fcp) 都更加熟练, 技术方面取得了很大的进步. 但是有非常多的idea没有付诸现实. 原因: 没有考虑目标的可达成性, 没有合理制定目标和时间节点. 截至Dec. 26, 累计播放12.3万, 累计粉丝1472. 个人觉得最优秀的视频是拆花的视频, 最受欢迎的是化妆刷.</p><p>KR2: 游泳。学会蛙泳和自由泳。<br>Rv2: 【70%】Good Job. 学会了蛙泳.</p></div></div><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><p>回顾过去的2022, 它不像过去的年份那样平淡, 这一年里发生的事情都太激烈了, 每有一件新事情出现我的情绪就被震撼一次, 所以我对之前发生的事情记忆力就没有那么深刻. 留学 收到3份口头 Offer, 4份 Condition offer, 因为敏感背景被加澳 admission officer 拒2次, 被新加坡拒签1次, 收到小米和中科院的Offer, 雅思考出成绩. 这一年的情绪一直在被这些事情牵动着, 也没有想象中那么稳定. 在新的一年, 我希望自己能够坚定自己目标而不被这些事情的结果影响. 同时制定计划的时候也不应该把不能预料结果的事情算进去. 不能制定 “如果A那么我就做B” 这样的计划. </p><ul><li><p>在同理心和钝感之间平衡, 不要过多得揣测别人话中莫须有的「深意」.</p></li><li><p>只有留给自己充分的休息时间, 才能更高效率的工作.</p></li><li><p>对话时降低语速, 注意表达时的眼神和神态控制, 去掉「然后」的口癖, 用停顿或动作来代替.</p></li><li><p>避免假性高效, 根据重要性等级为每件事情设置分数, 为自己创造深度工作的时间.</p></li><li><p>项目管理流程强化: 对交付信息- 主动汇报关键节点 - 复盘.</p></li><li><p>焦虑控制四象限. 焦虑原因: 想要证明成绩/获得认可.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写于 2022.12.25.&lt;/p&gt;
&lt;p&gt;现在的我正在中关村东路租的小房间里写下2022年的回顾与展望. 这个小房间刚搬进来的时候我还万分不满, 但现在住久了也渐渐习惯了, 书桌旁边就有一扇大窗户, 能够享受白天的阳光, 真的是一件很美好的事情. &lt;/p&gt;
&lt;p&gt;我好像已</summary>
      
    
    
    
    
    <category term="项目管理" scheme="https://blog.crocodilezs.top/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
